{*********************************************************}
{                                                         }
{                 Zeos Database Objects                   }
{            Interfaces for Native Plain Drivers          }
{                                                         }
{          Originally distributed by firebird.org         }
{                  ported by EgonHugeist                  }
{                                                         }
{*********************************************************}

{@********************************************************}
{    Copyright (c) 1999-2024 Zeos Development Group       }
{                                                         }
{ License Agreement:                                      }
{                                                         }
{ This library is distributed in the hope that it will be }
{ useful, but WITHOUT ANY WARRANTY; without even the      }
{ implied warranty of MERCHANTABILITY or FITNESS FOR      }
{ A PARTICULAR PURPOSE.  See the GNU Lesser General       }
{ Public License for more details.                        }
{                                                         }
{ The source code of the ZEOS Libraries and packages are  }
{ distributed under the Library GNU General Public        }
{ License (see the file COPYING / COPYING.ZEOS)           }
{ with the following  modification:                       }
{ As a special exception, the copyright holders of this   }
{ library give you permission to link this library with   }
{ independent modules to produce an executable,           }
{ regardless of the license terms of these independent    }
{ modules, and to copy and distribute the resulting       }
{ executable under terms of your choice, provided that    }
{ you also meet, for each linked independent module,      }
{ the terms and conditions of the license of that module. }
{ An independent module is a module which is not derived  }
{ from or based on this library. If you modify this       }
{ library, you may extend this exception to your version  }
{ of the library, but you are not obligated to do so.     }
{ If you do not wish to do so, delete this exception      }
{ statement from your version.                            }
{                                                         }
{                                                         }
{ The project web site is located on:                     }
{   https://zeoslib.sourceforge.io/ (FORUM)               }
{   http://sourceforge.net/p/zeoslib/tickets/ (BUGTRACKER)}
{   svn://svn.code.sf.net/p/zeoslib/code-0/trunk (SVN)    }
{                                                         }
{   http://www.sourceforge.net/projects/zeoslib.          }
{                                                         }
{                                                         }
{                                 Zeos Development Group. }
{********************************************************@}

{ the original file shipped by Firebird 3.0 and up
the file firebird.pas as been  formattet by program "FirebirdPasToZPlainFirebirdDriverPas"
1. to get it running with FPC <= v3: add the "INTERFACES CORBA" macro
and add "OBJECTCHECKS OFF"
2. to get it running with D7..D2007, FPC2:
comment all error checks original like FbException.checkException(status);
and stricly follow step 3
Those compiler (including FPC < v3) do not support class consts so we add
replacements.
3. genaral: comment all try .. except block they leave ugly warnings,
slowing down the code executable code and finally D7 crash an each call
with multiple parameters.
So we do the error checks @all
4. comment the FBException. The error details are not interpreted..
  Error handling happens higher up!
5. to avoid overdozed rtti, add the "public" and "protected" keywords to all
  VTable and Impl(dispatcher) objects
6. Make a string replace : QWord -> UInt64 etc
7. Since the fpc did decide to add private fields to the TObject, we had to rework
  everything again: use records insteaed of TObjects.
  See FPC-BugTracker: https://gitlab.com/freepascal.org/fpc/source/-/issues/40810
  and Zeos-BugTracker: https://sourceforge.net/p/zeoslib/tickets/603/
  This also works since D2010.
}
{ This file was autogenerated by cloop - Cross Language Object Oriented Programming }
unit ZPlainFirebird;

interface

{$I ZPlain.inc}

{$IFDEF FPC}
{$IFNDEF WITH_RECORD_METHODS}{$INTERFACES CORBA}{$ENDIF}
{$OBJECTCHECKS OFF}
{$ENDIF}

{$IFNDEF ZEOS_DISABLE_FIREBIRD}  //if set we've a empty unit

uses ZCompatibility, ZPlainFirebirdInterbaseDriver;

const
  cIVersioned_VERSION = 1;
  cIReferenceCounted_VERSION = 2;
  cIDisposable_VERSION = 2;
  cIStatus_VERSION = 3;
  cIStatus_STATE_WARNINGS = Cardinal($1);
  cIStatus_STATE_ERRORS = Cardinal($2);
  cIStatus_RESULT_ERROR = Integer(-1);
  cIStatus_RESULT_OK = Integer(0);
  cIStatus_RESULT_NO_DATA = Integer(1);
  cIStatus_RESULT_SEGMENT = Integer(2);
  cIMaster_VERSION = 2;
  cIPluginBase_VERSION = 3;
  cIPluginSet_VERSION = 3;
  cIConfigEntry_VERSION = 3;
  cIConfig_VERSION = 3;
  cIFirebirdConf_VERSION = 4;
  cIPluginConfig_VERSION = 3;
  cIPluginFactory_VERSION = 2;
  cIPluginModule_VERSION = 3;
  cIPluginManager_VERSION = 2;
  cIPluginManager_TYPE_PROVIDER = Cardinal(1);
  cIPluginManager_TYPE_FIRST_NON_LIB = Cardinal(2);
  cIPluginManager_TYPE_AUTH_SERVER = Cardinal(3);
  cIPluginManager_TYPE_AUTH_CLIENT = Cardinal(4);
  cIPluginManager_TYPE_AUTH_USER_MANAGEMENT = Cardinal(5);
  cIPluginManager_TYPE_EXTERNAL_ENGINE = Cardinal(6);
  cIPluginManager_TYPE_TRACE = Cardinal(7);
  cIPluginManager_TYPE_WIRE_CRYPT = Cardinal(8);
  cIPluginManager_TYPE_DB_CRYPT = Cardinal(9);
  cIPluginManager_TYPE_KEY_HOLDER = Cardinal(10);
  cIPluginManager_TYPE_REPLICATOR = Cardinal(11);
  cIPluginManager_TYPE_PROFILER = Cardinal(12);
  cIPluginManager_TYPE_COUNT = Cardinal(13);
  cICryptKey_VERSION = 2;
  cIConfigManager_VERSION = 3;
  cIConfigManager_DIR_BIN = Cardinal(0);
  cIConfigManager_DIR_SBIN = Cardinal(1);
  cIConfigManager_DIR_CONF = Cardinal(2);
  cIConfigManager_DIR_LIB = Cardinal(3);
  cIConfigManager_DIR_INC = Cardinal(4);
  cIConfigManager_DIR_DOC = Cardinal(5);
  cIConfigManager_DIR_UDF = Cardinal(6);
  cIConfigManager_DIR_SAMPLE = Cardinal(7);
  cIConfigManager_DIR_SAMPLEDB = Cardinal(8);
  cIConfigManager_DIR_HELP = Cardinal(9);
  cIConfigManager_DIR_INTL = Cardinal(10);
  cIConfigManager_DIR_MISC = Cardinal(11);
  cIConfigManager_DIR_SECDB = Cardinal(12);
  cIConfigManager_DIR_MSG = Cardinal(13);
  cIConfigManager_DIR_LOG = Cardinal(14);
  cIConfigManager_DIR_GUARD = Cardinal(15);
  cIConfigManager_DIR_PLUGINS = Cardinal(16);
  cIConfigManager_DIR_TZDATA = Cardinal(17);
  cIConfigManager_DIR_COUNT = Cardinal(18);
  cIEventCallback_VERSION = 3;
  cIBlob_VERSION = 4;
  cITransaction_VERSION = 4;
  cIMessageMetadata_VERSION = 4;
  cIMetadataBuilder_VERSION = 4;
  cIResultSet_VERSION = 5;
  cIResultSet_INF_RECORD_COUNT = Byte(10);
  cIStatement_VERSION = 5;
  cIStatement_PREPARE_PREFETCH_NONE = Cardinal($0);
  cIStatement_PREPARE_PREFETCH_TYPE = Cardinal($1);
  cIStatement_PREPARE_PREFETCH_INPUT_PARAMETERS = Cardinal($2);
  cIStatement_PREPARE_PREFETCH_OUTPUT_PARAMETERS = Cardinal($4);
  cIStatement_PREPARE_PREFETCH_LEGACY_PLAN = Cardinal($8);
  cIStatement_PREPARE_PREFETCH_DETAILED_PLAN = Cardinal($10);
  cIStatement_PREPARE_PREFETCH_AFFECTED_RECORDS = Cardinal($20);
  cIStatement_PREPARE_PREFETCH_FLAGS = Cardinal($40);
  cIStatement_PREPARE_PREFETCH_METADATA = Cardinal(cIStatement_PREPARE_PREFETCH_TYPE or cIStatement_PREPARE_PREFETCH_FLAGS or cIStatement_PREPARE_PREFETCH_INPUT_PARAMETERS or cIStatement_PREPARE_PREFETCH_OUTPUT_PARAMETERS);
  cIStatement_PREPARE_PREFETCH_ALL = Cardinal(cIStatement_PREPARE_PREFETCH_METADATA or cIStatement_PREPARE_PREFETCH_LEGACY_PLAN or cIStatement_PREPARE_PREFETCH_DETAILED_PLAN or cIStatement_PREPARE_PREFETCH_AFFECTED_RECORDS);
  cIStatement_FLAG_HAS_CURSOR = Cardinal($1);
  cIStatement_FLAG_REPEAT_EXECUTE = Cardinal($2);
  cIStatement_CURSOR_TYPE_SCROLLABLE = Cardinal($1);
  cIBatch_VERSION = 4;
  cIBatch_VERSION1 = Byte(1);
  cIBatch_CURRENT_VERSION = Byte(cIBatch_VERSION1);
  cIBatch_TAG_MULTIERROR = Byte(1);
  cIBatch_TAG_RECORD_COUNTS = Byte(2);
  cIBatch_TAG_BUFFER_BYTES_SIZE = Byte(3);
  cIBatch_TAG_BLOB_POLICY = Byte(4);
  cIBatch_TAG_DETAILED_ERRORS = Byte(5);
  cIBatch_INF_BUFFER_BYTES_SIZE = Byte(10);
  cIBatch_INF_DATA_BYTES_SIZE = Byte(11);
  cIBatch_INF_BLOBS_BYTES_SIZE = Byte(12);
  cIBatch_INF_BLOB_ALIGNMENT = Byte(13);
  cIBatch_INF_BLOB_HEADER = Byte(14);
  cIBatch_BLOB_NONE = Byte(0);
  cIBatch_BLOB_ID_ENGINE = Byte(1);
  cIBatch_BLOB_ID_USER = Byte(2);
  cIBatch_BLOB_STREAM = Byte(3);
  cIBatch_BLOB_SEGHDR_ALIGN = Cardinal(2);
  cIBatchCompletionState_VERSION = 3;
  cIBatchCompletionState_EXECUTE_FAILED = Integer(-1);
  cIBatchCompletionState_SUCCESS_NO_INFO = Integer(-2);
  cIBatchCompletionState_NO_MORE_ERRORS = Cardinal($ffffffff);
  cIReplicator_VERSION = 4;
  cIRequest_VERSION = 4;
  cIEvents_VERSION = 4;
  cIAttachment_VERSION = 5;
  cIService_VERSION = 5;
  cIProvider_VERSION = 4;
  cIDtcStart_VERSION = 3;
  cIDtc_VERSION = 2;
  cIAuth_VERSION = 4;
  cIAuth_AUTH_FAILED = Integer(-1);
  cIAuth_AUTH_SUCCESS = Integer(0);
  cIAuth_AUTH_MORE_DATA = Integer(1);
  cIAuth_AUTH_CONTINUE = Integer(2);
  cIWriter_VERSION = 2;
  cIServerBlock_VERSION = 2;
  cIClientBlock_VERSION = 4;
  cIServer_VERSION = 6;
  cIClient_VERSION = 5;
  cIUserField_VERSION = 2;
  cICharUserField_VERSION = 3;
  cIIntUserField_VERSION = 3;
  cIUser_VERSION = 2;
  cIUser_OP_USER_ADD = Cardinal(1);
  cIUser_OP_USER_MODIFY = Cardinal(2);
  cIUser_OP_USER_DELETE = Cardinal(3);
  cIUser_OP_USER_DISPLAY = Cardinal(4);
  cIUser_OP_USER_SET_MAP = Cardinal(5);
  cIUser_OP_USER_DROP_MAP = Cardinal(6);
  cIListUsers_VERSION = 2;
  cILogonInfo_VERSION = 3;
  cIManagement_VERSION = 4;
  cIAuthBlock_VERSION = 2;
  cIWireCryptPlugin_VERSION = 5;
  cICryptKeyCallback_VERSION = 2;
  cIKeyHolderPlugin_VERSION = 5;
  cIDbCryptInfo_VERSION = 3;
  cIDbCryptPlugin_VERSION = 5;
  cIExternalContext_VERSION = 2;
  cIExternalResultSet_VERSION = 3;
  cIExternalFunction_VERSION = 3;
  cIExternalProcedure_VERSION = 3;
  cIExternalTrigger_VERSION = 3;
  cIExternalTrigger_TYPE_BEFORE = Cardinal(1);
  cIExternalTrigger_TYPE_AFTER = Cardinal(2);
  cIExternalTrigger_TYPE_DATABASE = Cardinal(3);
  cIExternalTrigger_ACTION_INSERT = Cardinal(1);
  cIExternalTrigger_ACTION_UPDATE = Cardinal(2);
  cIExternalTrigger_ACTION_DELETE = Cardinal(3);
  cIExternalTrigger_ACTION_CONNECT = Cardinal(4);
  cIExternalTrigger_ACTION_DISCONNECT = Cardinal(5);
  cIExternalTrigger_ACTION_TRANS_START = Cardinal(6);
  cIExternalTrigger_ACTION_TRANS_COMMIT = Cardinal(7);
  cIExternalTrigger_ACTION_TRANS_ROLLBACK = Cardinal(8);
  cIExternalTrigger_ACTION_DDL = Cardinal(9);
  cIRoutineMetadata_VERSION = 2;
  cIExternalEngine_VERSION = 4;
  cITimer_VERSION = 3;
  cITimerControl_VERSION = 2;
  cIVersionCallback_VERSION = 2;
  cIUtil_VERSION = 4;
  cIOffsetsCallback_VERSION = 2;
  cIXpbBuilder_VERSION = 3;
  cIXpbBuilder_DPB = Cardinal(1);
  cIXpbBuilder_SPB_ATTACH = Cardinal(2);
  cIXpbBuilder_SPB_START = Cardinal(3);
  cIXpbBuilder_TPB = Cardinal(4);
  cIXpbBuilder_BATCH = Cardinal(5);
  cIXpbBuilder_BPB = Cardinal(6);
  cIXpbBuilder_SPB_SEND = Cardinal(7);
  cIXpbBuilder_SPB_RECEIVE = Cardinal(8);
  cIXpbBuilder_SPB_RESPONSE = Cardinal(9);
  cIXpbBuilder_INFO_SEND = Cardinal(10);
  cIXpbBuilder_INFO_RESPONSE = Cardinal(11);
  cITraceConnection_VERSION = 2;
  cITraceConnection_KIND_DATABASE = Cardinal(1);
  cITraceConnection_KIND_SERVICE = Cardinal(2);
  cITraceDatabaseConnection_VERSION = 3;
  cITraceTransaction_VERSION = 3;
  cITraceTransaction_ISOLATION_CONSISTENCY = Cardinal(1);
  cITraceTransaction_ISOLATION_CONCURRENCY = Cardinal(2);
  cITraceTransaction_ISOLATION_READ_COMMITTED_RECVER = Cardinal(3);
  cITraceTransaction_ISOLATION_READ_COMMITTED_NORECVER = Cardinal(4);
  cITraceTransaction_ISOLATION_READ_COMMITTED_READ_CONSISTENCY = Cardinal(5);
  cITraceParams_VERSION = 3;
  cITraceStatement_VERSION = 2;
  cITraceSQLStatement_VERSION = 3;
  cITraceBLRStatement_VERSION = 3;
  cITraceDYNRequest_VERSION = 2;
  cITraceContextVariable_VERSION = 2;
  cITraceProcedure_VERSION = 3;
  cITraceFunction_VERSION = 3;
  cITraceTrigger_VERSION = 3;
  cITraceTrigger_TYPE_ALL = Cardinal(0);
  cITraceTrigger_TYPE_BEFORE = Cardinal(1);
  cITraceTrigger_TYPE_AFTER = Cardinal(2);
  cITraceServiceConnection_VERSION = 3;
  cITraceStatusVector_VERSION = 2;
  cITraceSweepInfo_VERSION = 2;
  cITraceLogWriter_VERSION = 4;
  cITraceInitInfo_VERSION = 2;
  cITracePlugin_VERSION = 5;
  cITracePlugin_RESULT_SUCCESS = Cardinal(0);
  cITracePlugin_RESULT_FAILED = Cardinal(1);
  cITracePlugin_RESULT_UNAUTHORIZED = Cardinal(2);
  cITracePlugin_SWEEP_STATE_STARTED = Cardinal(1);
  cITracePlugin_SWEEP_STATE_FINISHED = Cardinal(2);
  cITracePlugin_SWEEP_STATE_FAILED = Cardinal(3);
  cITracePlugin_SWEEP_STATE_PROGRESS = Cardinal(4);
  cITraceFactory_VERSION = 4;
  cITraceFactory_TRACE_EVENT_ATTACH = Cardinal(0);
  cITraceFactory_TRACE_EVENT_DETACH = Cardinal(1);
  cITraceFactory_TRACE_EVENT_TRANSACTION_START = Cardinal(2);
  cITraceFactory_TRACE_EVENT_TRANSACTION_END = Cardinal(3);
  cITraceFactory_TRACE_EVENT_SET_CONTEXT = Cardinal(4);
  cITraceFactory_TRACE_EVENT_PROC_EXECUTE = Cardinal(5);
  cITraceFactory_TRACE_EVENT_TRIGGER_EXECUTE = Cardinal(6);
  cITraceFactory_TRACE_EVENT_DSQL_PREPARE = Cardinal(7);
  cITraceFactory_TRACE_EVENT_DSQL_FREE = Cardinal(8);
  cITraceFactory_TRACE_EVENT_DSQL_EXECUTE = Cardinal(9);
  cITraceFactory_TRACE_EVENT_BLR_COMPILE = Cardinal(10);
  cITraceFactory_TRACE_EVENT_BLR_EXECUTE = Cardinal(11);
  cITraceFactory_TRACE_EVENT_DYN_EXECUTE = Cardinal(12);
  cITraceFactory_TRACE_EVENT_SERVICE_ATTACH = Cardinal(13);
  cITraceFactory_TRACE_EVENT_SERVICE_START = Cardinal(14);
  cITraceFactory_TRACE_EVENT_SERVICE_QUERY = Cardinal(15);
  cITraceFactory_TRACE_EVENT_SERVICE_DETACH = Cardinal(16);
  cITraceFactory_TRACE_EVENT_ERROR = Cardinal(17);
  cITraceFactory_TRACE_EVENT_SWEEP = Cardinal(18);
  cITraceFactory_TRACE_EVENT_FUNC_EXECUTE = Cardinal(19);
  cITraceFactory_TRACE_EVENT_PROC_COMPILE = Cardinal(20);
  cITraceFactory_TRACE_EVENT_FUNC_COMPILE = Cardinal(21);
  cITraceFactory_TRACE_EVENT_TRIGGER_COMPILE = Cardinal(22);
  cITraceFactory_TRACE_EVENT_MAX = Cardinal(23);
  cIUdrFunctionFactory_VERSION = 3;
  cIUdrProcedureFactory_VERSION = 3;
  cIUdrTriggerFactory_VERSION = 3;
  cIUdrPlugin_VERSION = 2;
  cIDecFloat16_VERSION = 2;
  cIDecFloat16_BCD_SIZE = Cardinal(16);
  cIDecFloat16_STRING_SIZE = Cardinal(24);
  cIDecFloat34_VERSION = 2;
  cIDecFloat34_BCD_SIZE = Cardinal(34);
  cIDecFloat34_STRING_SIZE = Cardinal(43);
  cIInt128_VERSION = 2;
  cIInt128_STRING_SIZE = Cardinal(46);
  cIReplicatedField_VERSION = 2;
  cIReplicatedRecord_VERSION = 2;
  cIReplicatedTransaction_VERSION = 3;
  cIReplicatedSession_VERSION = 4;
  cIProfilerPlugin_VERSION = 4;
  cIProfilerSession_VERSION = 3;
  cIProfilerSession_FLAG_BEFORE_EVENTS = Cardinal($1);
  cIProfilerSession_FLAG_AFTER_EVENTS = Cardinal($2);
  cIProfilerStats_VERSION = 2;
type
  IVersioned = {$IFDEF WITH_RECORD_METHODS}^TVersioned{$ELSE}class{$ENDIF};
  IReferenceCounted = {$IFDEF WITH_RECORD_METHODS}^TReferenceCounted{$ELSE}class{$ENDIF};
  IDisposable = {$IFDEF WITH_RECORD_METHODS}^TDisposable{$ELSE}class{$ENDIF};
  IStatus = {$IFDEF WITH_RECORD_METHODS}^TStatus{$ELSE}class{$ENDIF};
  IMaster = {$IFDEF WITH_RECORD_METHODS}^TMaster{$ELSE}class{$ENDIF};
  IPluginBase = {$IFDEF WITH_RECORD_METHODS}^TPluginBase{$ELSE}class{$ENDIF};
  IPluginSet = {$IFDEF WITH_RECORD_METHODS}^TPluginSet{$ELSE}class{$ENDIF};
  IConfigEntry = {$IFDEF WITH_RECORD_METHODS}^TConfigEntry{$ELSE}class{$ENDIF};
  IConfig = {$IFDEF WITH_RECORD_METHODS}^TConfig{$ELSE}class{$ENDIF};
  IFirebirdConf = {$IFDEF WITH_RECORD_METHODS}^TFirebirdConf{$ELSE}class{$ENDIF};
  IPluginConfig = {$IFDEF WITH_RECORD_METHODS}^TPluginConfig{$ELSE}class{$ENDIF};
  IPluginFactory = {$IFDEF WITH_RECORD_METHODS}^TPluginFactory{$ELSE}class{$ENDIF};
  IPluginModule = {$IFDEF WITH_RECORD_METHODS}^TPluginModule{$ELSE}class{$ENDIF};
  IPluginManager = {$IFDEF WITH_RECORD_METHODS}^TPluginManager{$ELSE}class{$ENDIF};
  ICryptKey = {$IFDEF WITH_RECORD_METHODS}^TCryptKey{$ELSE}class{$ENDIF};
  IConfigManager = {$IFDEF WITH_RECORD_METHODS}^TConfigManager{$ELSE}class{$ENDIF};
  IEventCallback = {$IFDEF WITH_RECORD_METHODS}^TEventCallback{$ELSE}class{$ENDIF};
  IBlob = {$IFDEF WITH_RECORD_METHODS}^TBlob{$ELSE}class{$ENDIF};
  ITransaction = {$IFDEF WITH_RECORD_METHODS}^TTransaction{$ELSE}class{$ENDIF};
  IMessageMetadata = {$IFDEF WITH_RECORD_METHODS}^TMessageMetadata{$ELSE}class{$ENDIF};
  IMetadataBuilder = {$IFDEF WITH_RECORD_METHODS}^TMetadataBuilder{$ELSE}class{$ENDIF};
  IResultSet = {$IFDEF WITH_RECORD_METHODS}^TResultSet{$ELSE}class{$ENDIF};
  IStatement = {$IFDEF WITH_RECORD_METHODS}^TStatement{$ELSE}class{$ENDIF};
  IBatch = {$IFDEF WITH_RECORD_METHODS}^TBatch{$ELSE}class{$ENDIF};
  IBatchCompletionState = {$IFDEF WITH_RECORD_METHODS}^TBatchCompletionState{$ELSE}class{$ENDIF};
  IReplicator = {$IFDEF WITH_RECORD_METHODS}^TReplicator{$ELSE}class{$ENDIF};
  IRequest = {$IFDEF WITH_RECORD_METHODS}^TRequest{$ELSE}class{$ENDIF};
  IEvents = {$IFDEF WITH_RECORD_METHODS}^TEvents{$ELSE}class{$ENDIF};
  IAttachment = {$IFDEF WITH_RECORD_METHODS}^TAttachment{$ELSE}class{$ENDIF};
  IService = {$IFDEF WITH_RECORD_METHODS}^TService{$ELSE}class{$ENDIF};
  IProvider = {$IFDEF WITH_RECORD_METHODS}^TProvider{$ELSE}class{$ENDIF};
  IDtcStart = {$IFDEF WITH_RECORD_METHODS}^TDtcStart{$ELSE}class{$ENDIF};
  IDtc = {$IFDEF WITH_RECORD_METHODS}^TDtc{$ELSE}class{$ENDIF};
  IAuth = {$IFDEF WITH_RECORD_METHODS}^TAuth{$ELSE}class{$ENDIF};
  IWriter = {$IFDEF WITH_RECORD_METHODS}^TWriter{$ELSE}class{$ENDIF};
  IServerBlock = {$IFDEF WITH_RECORD_METHODS}^TServerBlock{$ELSE}class{$ENDIF};
  IClientBlock = {$IFDEF WITH_RECORD_METHODS}^TClientBlock{$ELSE}class{$ENDIF};
  IServer = {$IFDEF WITH_RECORD_METHODS}^TServer{$ELSE}class{$ENDIF};
  IClient = {$IFDEF WITH_RECORD_METHODS}^TClient{$ELSE}class{$ENDIF};
  IUserField = {$IFDEF WITH_RECORD_METHODS}^TUserField{$ELSE}class{$ENDIF};
  ICharUserField = {$IFDEF WITH_RECORD_METHODS}^TCharUserField{$ELSE}class{$ENDIF};
  IIntUserField = {$IFDEF WITH_RECORD_METHODS}^TIntUserField{$ELSE}class{$ENDIF};
  IUser = {$IFDEF WITH_RECORD_METHODS}^TUser{$ELSE}class{$ENDIF};
  IListUsers = {$IFDEF WITH_RECORD_METHODS}^TListUsers{$ELSE}class{$ENDIF};
  ILogonInfo = {$IFDEF WITH_RECORD_METHODS}^TLogonInfo{$ELSE}class{$ENDIF};
  IManagement = {$IFDEF WITH_RECORD_METHODS}^TManagement{$ELSE}class{$ENDIF};
  IAuthBlock = {$IFDEF WITH_RECORD_METHODS}^TAuthBlock{$ELSE}class{$ENDIF};
  IWireCryptPlugin = {$IFDEF WITH_RECORD_METHODS}^TWireCryptPlugin{$ELSE}class{$ENDIF};
  ICryptKeyCallback = {$IFDEF WITH_RECORD_METHODS}^TCryptKeyCallback{$ELSE}class{$ENDIF};
  IKeyHolderPlugin = {$IFDEF WITH_RECORD_METHODS}^TKeyHolderPlugin{$ELSE}class{$ENDIF};
  IDbCryptInfo = {$IFDEF WITH_RECORD_METHODS}^TDbCryptInfo{$ELSE}class{$ENDIF};
  IDbCryptPlugin = {$IFDEF WITH_RECORD_METHODS}^TDbCryptPlugin{$ELSE}class{$ENDIF};
  IExternalContext = {$IFDEF WITH_RECORD_METHODS}^TExternalContext{$ELSE}class{$ENDIF};
  IExternalResultSet = {$IFDEF WITH_RECORD_METHODS}^TExternalResultSet{$ELSE}class{$ENDIF};
  IExternalFunction = {$IFDEF WITH_RECORD_METHODS}^TExternalFunction{$ELSE}class{$ENDIF};
  IExternalProcedure = {$IFDEF WITH_RECORD_METHODS}^TExternalProcedure{$ELSE}class{$ENDIF};
  IExternalTrigger = {$IFDEF WITH_RECORD_METHODS}^TExternalTrigger{$ELSE}class{$ENDIF};
  IRoutineMetadata = {$IFDEF WITH_RECORD_METHODS}^TRoutineMetadata{$ELSE}class{$ENDIF};
  IExternalEngine = {$IFDEF WITH_RECORD_METHODS}^TExternalEngine{$ELSE}class{$ENDIF};
  ITimer = {$IFDEF WITH_RECORD_METHODS}^TTimer{$ELSE}class{$ENDIF};
  ITimerControl = {$IFDEF WITH_RECORD_METHODS}^TTimerControl{$ELSE}class{$ENDIF};
  IVersionCallback = {$IFDEF WITH_RECORD_METHODS}^TVersionCallback{$ELSE}class{$ENDIF};
  IUtil = {$IFDEF WITH_RECORD_METHODS}^TUtil{$ELSE}class{$ENDIF};
  IOffsetsCallback = {$IFDEF WITH_RECORD_METHODS}^TOffsetsCallback{$ELSE}class{$ENDIF};
  IXpbBuilder = {$IFDEF WITH_RECORD_METHODS}^TXpbBuilder{$ELSE}class{$ENDIF};
  ITraceConnection = {$IFDEF WITH_RECORD_METHODS}^TTraceConnection{$ELSE}class{$ENDIF};
  ITraceDatabaseConnection = {$IFDEF WITH_RECORD_METHODS}^TTraceDatabaseConnection{$ELSE}class{$ENDIF};
  ITraceTransaction = {$IFDEF WITH_RECORD_METHODS}^TTraceTransaction{$ELSE}class{$ENDIF};
  ITraceParams = {$IFDEF WITH_RECORD_METHODS}^TTraceParams{$ELSE}class{$ENDIF};
  ITraceStatement = {$IFDEF WITH_RECORD_METHODS}^TTraceStatement{$ELSE}class{$ENDIF};
  ITraceSQLStatement = {$IFDEF WITH_RECORD_METHODS}^TTraceSQLStatement{$ELSE}class{$ENDIF};
  ITraceBLRStatement = {$IFDEF WITH_RECORD_METHODS}^TTraceBLRStatement{$ELSE}class{$ENDIF};
  ITraceDYNRequest = {$IFDEF WITH_RECORD_METHODS}^TTraceDYNRequest{$ELSE}class{$ENDIF};
  ITraceContextVariable = {$IFDEF WITH_RECORD_METHODS}^TTraceContextVariable{$ELSE}class{$ENDIF};
  ITraceProcedure = {$IFDEF WITH_RECORD_METHODS}^TTraceProcedure{$ELSE}class{$ENDIF};
  ITraceFunction = {$IFDEF WITH_RECORD_METHODS}^TTraceFunction{$ELSE}class{$ENDIF};
  ITraceTrigger = {$IFDEF WITH_RECORD_METHODS}^TTraceTrigger{$ELSE}class{$ENDIF};
  ITraceServiceConnection = {$IFDEF WITH_RECORD_METHODS}^TTraceServiceConnection{$ELSE}class{$ENDIF};
  ITraceStatusVector = {$IFDEF WITH_RECORD_METHODS}^TTraceStatusVector{$ELSE}class{$ENDIF};
  ITraceSweepInfo = {$IFDEF WITH_RECORD_METHODS}^TTraceSweepInfo{$ELSE}class{$ENDIF};
  ITraceLogWriter = {$IFDEF WITH_RECORD_METHODS}^TTraceLogWriter{$ELSE}class{$ENDIF};
  ITraceInitInfo = {$IFDEF WITH_RECORD_METHODS}^TTraceInitInfo{$ELSE}class{$ENDIF};
  ITracePlugin = {$IFDEF WITH_RECORD_METHODS}^TTracePlugin{$ELSE}class{$ENDIF};
  ITraceFactory = {$IFDEF WITH_RECORD_METHODS}^TTraceFactory{$ELSE}class{$ENDIF};
  IUdrFunctionFactory = {$IFDEF WITH_RECORD_METHODS}^TUdrFunctionFactory{$ELSE}class{$ENDIF};
  IUdrProcedureFactory = {$IFDEF WITH_RECORD_METHODS}^TUdrProcedureFactory{$ELSE}class{$ENDIF};
  IUdrTriggerFactory = {$IFDEF WITH_RECORD_METHODS}^TUdrTriggerFactory{$ELSE}class{$ENDIF};
  IUdrPlugin = {$IFDEF WITH_RECORD_METHODS}^TUdrPlugin{$ELSE}class{$ENDIF};
  IDecFloat16 = {$IFDEF WITH_RECORD_METHODS}^TDecFloat16{$ELSE}class{$ENDIF};
  IDecFloat34 = {$IFDEF WITH_RECORD_METHODS}^TDecFloat34{$ELSE}class{$ENDIF};
  IInt128 = {$IFDEF WITH_RECORD_METHODS}^TInt128{$ELSE}class{$ENDIF};
  IReplicatedField = {$IFDEF WITH_RECORD_METHODS}^TReplicatedField{$ELSE}class{$ENDIF};
  IReplicatedRecord = {$IFDEF WITH_RECORD_METHODS}^TReplicatedRecord{$ELSE}class{$ENDIF};
  IReplicatedTransaction = {$IFDEF WITH_RECORD_METHODS}^TReplicatedTransaction{$ELSE}class{$ENDIF};
  IReplicatedSession = {$IFDEF WITH_RECORD_METHODS}^TReplicatedSession{$ELSE}class{$ENDIF};
  IProfilerPlugin = {$IFDEF WITH_RECORD_METHODS}^TProfilerPlugin{$ELSE}class{$ENDIF};
  IProfilerSession = {$IFDEF WITH_RECORD_METHODS}^TProfilerSession{$ELSE}class{$ENDIF};
  IProfilerStats = {$IFDEF WITH_RECORD_METHODS}^TProfilerStats{$ELSE}class{$ENDIF};

  PBoolean = ^Boolean;
  PIKeyHolderPlugin = ^IKeyHolderPlugin;

  IReferenceCounted_addRefPtr = procedure(this: IReferenceCounted); cdecl;
  IReferenceCounted_releasePtr = function(this: IReferenceCounted): Integer; cdecl;
  IDisposable_disposePtr = procedure(this: IDisposable); cdecl;
  IStatus_initPtr = procedure(this: IStatus); cdecl;
  IStatus_getStatePtr = function(this: IStatus): Cardinal; cdecl;
  IStatus_setErrors2Ptr = procedure(this: IStatus; length: Cardinal; value: PNativeInt); cdecl;
  IStatus_setWarnings2Ptr = procedure(this: IStatus; length: Cardinal; value: PNativeInt); cdecl;
  IStatus_setErrorsPtr = procedure(this: IStatus; value: PNativeInt); cdecl;
  IStatus_setWarningsPtr = procedure(this: IStatus; value: PNativeInt); cdecl;
  IStatus_getErrorsPtr = function(this: IStatus): PNativeInt; cdecl;
  IStatus_getWarningsPtr = function(this: IStatus): PNativeInt; cdecl;
  IStatus_clonePtr = function(this: IStatus): IStatus; cdecl;
  IMaster_getStatusPtr = function(this: IMaster): IStatus; cdecl;
  IMaster_getDispatcherPtr = function(this: IMaster): IProvider; cdecl;
  IMaster_getPluginManagerPtr = function(this: IMaster): IPluginManager; cdecl;
  IMaster_getTimerControlPtr = function(this: IMaster): ITimerControl; cdecl;
  IMaster_getDtcPtr = function(this: IMaster): IDtc; cdecl;
  IMaster_registerAttachmentPtr = function(this: IMaster; provider: IProvider; attachment: IAttachment): IAttachment; cdecl;
  IMaster_registerTransactionPtr = function(this: IMaster; attachment: IAttachment; transaction: ITransaction): ITransaction; cdecl;
  IMaster_getMetadataBuilderPtr = function(this: IMaster; status: IStatus; fieldCount: Cardinal): IMetadataBuilder; cdecl;
  IMaster_serverModePtr = function(this: IMaster; mode: Integer): Integer; cdecl;
  IMaster_getUtilInterfacePtr = function(this: IMaster): IUtil; cdecl;
  IMaster_getConfigManagerPtr = function(this: IMaster): IConfigManager; cdecl;
  IMaster_getProcessExitingPtr = function(this: IMaster): Boolean; cdecl;
  IPluginBase_setOwnerPtr = procedure(this: IPluginBase; r: IReferenceCounted); cdecl;
  IPluginBase_getOwnerPtr = function(this: IPluginBase): IReferenceCounted; cdecl;
  IPluginSet_getNamePtr = function(this: IPluginSet): PAnsiChar; cdecl;
  IPluginSet_getModuleNamePtr = function(this: IPluginSet): PAnsiChar; cdecl;
  IPluginSet_getPluginPtr = function(this: IPluginSet; status: IStatus): IPluginBase; cdecl;
  IPluginSet_nextPtr = procedure(this: IPluginSet; status: IStatus); cdecl;
  IPluginSet_set_Ptr = procedure(this: IPluginSet; status: IStatus; s: PAnsiChar); cdecl;
  IConfigEntry_getNamePtr = function(this: IConfigEntry): PAnsiChar; cdecl;
  IConfigEntry_getValuePtr = function(this: IConfigEntry): PAnsiChar; cdecl;
  IConfigEntry_getIntValuePtr = function(this: IConfigEntry): Int64; cdecl;
  IConfigEntry_getBoolValuePtr = function(this: IConfigEntry): Boolean; cdecl;
  IConfigEntry_getSubConfigPtr = function(this: IConfigEntry; status: IStatus): IConfig; cdecl;
  IConfig_findPtr = function(this: IConfig; status: IStatus; name: PAnsiChar): IConfigEntry; cdecl;
  IConfig_findValuePtr = function(this: IConfig; status: IStatus; name: PAnsiChar; value: PAnsiChar): IConfigEntry; cdecl;
  IConfig_findPosPtr = function(this: IConfig; status: IStatus; name: PAnsiChar; pos: Cardinal): IConfigEntry; cdecl;
  IFirebirdConf_getKeyPtr = function(this: IFirebirdConf; name: PAnsiChar): Cardinal; cdecl;
  IFirebirdConf_asPInteger = function(this: IFirebirdConf; key: Cardinal): Int64; cdecl;
  IFirebirdConf_asStringPtr = function(this: IFirebirdConf; key: Cardinal): PAnsiChar; cdecl;
  IFirebirdConf_asPBoolean = function(this: IFirebirdConf; key: Cardinal): Boolean; cdecl;
  IFirebirdConf_getVersionPtr = function(this: IFirebirdConf; status: IStatus): Cardinal; cdecl;
  IPluginConfig_getConfigFileNamePtr = function(this: IPluginConfig): PAnsiChar; cdecl;
  IPluginConfig_getDefaultConfigPtr = function(this: IPluginConfig; status: IStatus): IConfig; cdecl;
  IPluginConfig_getFirebirdConfPtr = function(this: IPluginConfig; status: IStatus): IFirebirdConf; cdecl;
  IPluginConfig_setReleaseDelayPtr = procedure(this: IPluginConfig; status: IStatus; microSeconds: UInt64); cdecl;
  IPluginFactory_createPluginPtr = function(this: IPluginFactory; status: IStatus; factoryParameter: IPluginConfig): IPluginBase; cdecl;
  IPluginModule_doCleanPtr = procedure(this: IPluginModule); cdecl;
  IPluginModule_threadDetachPtr = procedure(this: IPluginModule); cdecl;
  IPluginManager_registerPluginFactoryPtr = procedure(this: IPluginManager; pluginType: Cardinal; defaultName: PAnsiChar; factory: IPluginFactory); cdecl;
  IPluginManager_registerModulePtr = procedure(this: IPluginManager; cleanup: IPluginModule); cdecl;
  IPluginManager_unregisterModulePtr = procedure(this: IPluginManager; cleanup: IPluginModule); cdecl;
  IPluginManager_getPluginsPtr = function(this: IPluginManager; status: IStatus; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: IFirebirdConf): IPluginSet; cdecl;
  IPluginManager_getConfigPtr = function(this: IPluginManager; status: IStatus; filename: PAnsiChar): IConfig; cdecl;
  IPluginManager_releasePluginPtr = procedure(this: IPluginManager; plugin: IPluginBase); cdecl;
  ICryptKey_setSymmetricPtr = procedure(this: ICryptKey; status: IStatus; type_: PAnsiChar; keyLength: Cardinal; key: Pointer); cdecl;
  ICryptKey_setAsymmetricPtr = procedure(this: ICryptKey; status: IStatus; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer); cdecl;
  ICryptKey_getEncryptKeyPtr = function(this: ICryptKey; length: PCardinal): Pointer; cdecl;
  ICryptKey_getDecryptKeyPtr = function(this: ICryptKey; length: PCardinal): Pointer; cdecl;
  IConfigManager_getDirectoryPtr = function(this: IConfigManager; code: Cardinal): PAnsiChar; cdecl;
  IConfigManager_getFirebirdConfPtr = function(this: IConfigManager): IFirebirdConf; cdecl;
  IConfigManager_getDatabaseConfPtr = function(this: IConfigManager; dbName: PAnsiChar): IFirebirdConf; cdecl;
  IConfigManager_getPluginConfigPtr = function(this: IConfigManager; configuredPlugin: PAnsiChar): IConfig; cdecl;
  IConfigManager_getInstallDirectoryPtr = function(this: IConfigManager): PAnsiChar; cdecl;
  IConfigManager_getRootDirectoryPtr = function(this: IConfigManager): PAnsiChar; cdecl;
  IConfigManager_getDefaultSecurityDbPtr = function(this: IConfigManager): PAnsiChar; cdecl;
  IEventCallback_eventCallbackFunctionPtr = procedure(this: IEventCallback; length: Cardinal; events: PByte); cdecl;
  IBlob_getInfoPtr = procedure(this: IBlob; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  IBlob_getSegmentPtr = function(this: IBlob; status: IStatus; bufferLength: Cardinal; buffer: Pointer; segmentLength: PCardinal): Integer; cdecl;
  IBlob_putSegmentPtr = procedure(this: IBlob; status: IStatus; length: Cardinal; buffer: Pointer); cdecl;
  IBlob_deprecatedCancelPtr = procedure(this: IBlob; status: IStatus); cdecl;
  IBlob_deprecatedClosePtr = procedure(this: IBlob; status: IStatus); cdecl;
  IBlob_seekPtr = function(this: IBlob; status: IStatus; mode: Integer; offset: Integer): Integer; cdecl;
  IBlob_cancelPtr = procedure(this: IBlob; status: IStatus); cdecl;
  IBlob_closePtr = procedure(this: IBlob; status: IStatus); cdecl;
  ITransaction_getInfoPtr = procedure(this: ITransaction; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  ITransaction_preparePtr = procedure(this: ITransaction; status: IStatus; msgLength: Cardinal; message: PByte); cdecl;
  ITransaction_deprecatedCommitPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  ITransaction_commitRetainingPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  ITransaction_deprecatedRollbackPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  ITransaction_rollbackRetainingPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  ITransaction_deprecatedDisconnectPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  ITransaction_joinPtr = function(this: ITransaction; status: IStatus; transaction: ITransaction): ITransaction; cdecl;
  ITransaction_validatePtr = function(this: ITransaction; status: IStatus; attachment: IAttachment): ITransaction; cdecl;
  ITransaction_enterDtcPtr = function(this: ITransaction; status: IStatus): ITransaction; cdecl;
  ITransaction_commitPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  ITransaction_rollbackPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  ITransaction_disconnectPtr = procedure(this: ITransaction; status: IStatus); cdecl;
  IMessageMetadata_getCountPtr = function(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
  IMessageMetadata_getFieldPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
  IMessageMetadata_getRelationPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
  IMessageMetadata_getOwnerPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
  IMessageMetadata_getAliasPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
  IMessageMetadata_getTypePtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
  IMessageMetadata_isNullablePtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Boolean; cdecl;
  IMessageMetadata_getSubTypePtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Integer; cdecl;
  IMessageMetadata_getLengthPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
  IMessageMetadata_getScalePtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Integer; cdecl;
  IMessageMetadata_getCharSetPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
  IMessageMetadata_getOffsetPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
  IMessageMetadata_getNullOffsetPtr = function(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
  IMessageMetadata_getBuilderPtr = function(this: IMessageMetadata; status: IStatus): IMetadataBuilder; cdecl;
  IMessageMetadata_getMessageLengthPtr = function(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
  IMessageMetadata_getAlignmentPtr = function(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
  IMessageMetadata_getAlignedLengthPtr = function(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
  IMetadataBuilder_setTypePtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; type_: Cardinal); cdecl;
  IMetadataBuilder_setSubTypePtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; subType: Integer); cdecl;
  IMetadataBuilder_setLengthPtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; length: Cardinal); cdecl;
  IMetadataBuilder_setCharSetPtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; charSet: Cardinal); cdecl;
  IMetadataBuilder_setScalePtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; scale: Integer); cdecl;
  IMetadataBuilder_truncatePtr = procedure(this: IMetadataBuilder; status: IStatus; count: Cardinal); cdecl;
  IMetadataBuilder_moveNameToIndexPtr = procedure(this: IMetadataBuilder; status: IStatus; name: PAnsiChar; index: Cardinal); cdecl;
  IMetadataBuilder_removePtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal); cdecl;
  IMetadataBuilder_addFieldPtr = function(this: IMetadataBuilder; status: IStatus): Cardinal; cdecl;
  IMetadataBuilder_getMetadataPtr = function(this: IMetadataBuilder; status: IStatus): IMessageMetadata; cdecl;
  IMetadataBuilder_setFieldPtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; field: PAnsiChar); cdecl;
  IMetadataBuilder_setRelationPtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; relation: PAnsiChar); cdecl;
  IMetadataBuilder_setOwnerPtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; owner: PAnsiChar); cdecl;
  IMetadataBuilder_setAliasPtr = procedure(this: IMetadataBuilder; status: IStatus; index: Cardinal; alias: PAnsiChar); cdecl;
  IResultSet_fetchNextPtr = function(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
  IResultSet_fetchPriorPtr = function(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
  IResultSet_fetchFirstPtr = function(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
  IResultSet_fetchLastPtr = function(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
  IResultSet_fetchAbsolutePtr = function(this: IResultSet; status: IStatus; position: Integer; message: Pointer): Integer; cdecl;
  IResultSet_fetchRelativePtr = function(this: IResultSet; status: IStatus; offset: Integer; message: Pointer): Integer; cdecl;
  IResultSet_isEofPtr = function(this: IResultSet; status: IStatus): Boolean; cdecl;
  IResultSet_isBofPtr = function(this: IResultSet; status: IStatus): Boolean; cdecl;
  IResultSet_getMetadataPtr = function(this: IResultSet; status: IStatus): IMessageMetadata; cdecl;
  IResultSet_deprecatedClosePtr = procedure(this: IResultSet; status: IStatus); cdecl;
  IResultSet_setDelayedOutputFormatPtr = procedure(this: IResultSet; status: IStatus; format: IMessageMetadata); cdecl;
  IResultSet_closePtr = procedure(this: IResultSet; status: IStatus); cdecl;
  IResultSet_getInfoPtr = procedure(this: IResultSet; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  IStatement_getInfoPtr = procedure(this: IStatement; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  IStatement_getTypePtr = function(this: IStatement; status: IStatus): Cardinal; cdecl;
  IStatement_getPlanPtr = function(this: IStatement; status: IStatus; detailed: Boolean): PAnsiChar; cdecl;
  IStatement_getAffectedRecordsPtr = function(this: IStatement; status: IStatus): UInt64; cdecl;
  IStatement_getInputMetadataPtr = function(this: IStatement; status: IStatus): IMessageMetadata; cdecl;
  IStatement_getOutputMetadataPtr = function(this: IStatement; status: IStatus): IMessageMetadata; cdecl;
  IStatement_executePtr = function(this: IStatement; status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction; cdecl;
  IStatement_openCursorPtr = function(this: IStatement; status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; flags: Cardinal): IResultSet; cdecl;
  IStatement_setCursorNamePtr = procedure(this: IStatement; status: IStatus; name: PAnsiChar); cdecl;
  IStatement_deprecatedFreePtr = procedure(this: IStatement; status: IStatus); cdecl;
  IStatement_getFlagsPtr = function(this: IStatement; status: IStatus): Cardinal; cdecl;
  IStatement_getTimeoutPtr = function(this: IStatement; status: IStatus): Cardinal; cdecl;
  IStatement_setTimeoutPtr = procedure(this: IStatement; status: IStatus; timeOut: Cardinal); cdecl;
  IStatement_createBatchPtr = function(this: IStatement; status: IStatus; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch; cdecl;
  IStatement_freePtr = procedure(this: IStatement; status: IStatus); cdecl;
  IBatch_addPtr = procedure(this: IBatch; status: IStatus; count: Cardinal; inBuffer: Pointer); cdecl;
  IBatch_addBlobPtr = procedure(this: IBatch; status: IStatus; length: Cardinal; inBuffer: Pointer; blobId: PISC_QUAD; parLength: Cardinal; par: PByte); cdecl;
  IBatch_appendBlobDataPtr = procedure(this: IBatch; status: IStatus; length: Cardinal; inBuffer: Pointer); cdecl;
  IBatch_addBlobStreamPtr = procedure(this: IBatch; status: IStatus; length: Cardinal; inBuffer: Pointer); cdecl;
  IBatch_registerBlobPtr = procedure(this: IBatch; status: IStatus; existingBlob: PISC_QUAD; blobId: PISC_QUAD); cdecl;
  IBatch_executePtr = function(this: IBatch; status: IStatus; transaction: ITransaction): IBatchCompletionState; cdecl;
  IBatch_cancelPtr = procedure(this: IBatch; status: IStatus); cdecl;
  IBatch_getBlobAlignmentPtr = function(this: IBatch; status: IStatus): Cardinal; cdecl;
  IBatch_getMetadataPtr = function(this: IBatch; status: IStatus): IMessageMetadata; cdecl;
  IBatch_setDefaultBpbPtr = procedure(this: IBatch; status: IStatus; parLength: Cardinal; par: PByte); cdecl;
  IBatch_deprecatedClosePtr = procedure(this: IBatch; status: IStatus); cdecl;
  IBatch_closePtr = procedure(this: IBatch; status: IStatus); cdecl;
  IBatch_getInfoPtr = procedure(this: IBatch; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  IBatchCompletionState_getSizePtr = function(this: IBatchCompletionState; status: IStatus): Cardinal; cdecl;
  IBatchCompletionState_getStatePtr = function(this: IBatchCompletionState; status: IStatus; pos: Cardinal): Integer; cdecl;
  IBatchCompletionState_findErrorPtr = function(this: IBatchCompletionState; status: IStatus; pos: Cardinal): Cardinal; cdecl;
  IBatchCompletionState_getStatusPtr = procedure(this: IBatchCompletionState; status: IStatus; to_: IStatus; pos: Cardinal); cdecl;
  IReplicator_processPtr = procedure(this: IReplicator; status: IStatus; length: Cardinal; data: PByte); cdecl;
  IReplicator_deprecatedClosePtr = procedure(this: IReplicator; status: IStatus); cdecl;
  IReplicator_closePtr = procedure(this: IReplicator; status: IStatus); cdecl;
  IRequest_receivePtr = procedure(this: IRequest; status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); cdecl;
  IRequest_sendPtr = procedure(this: IRequest; status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); cdecl;
  IRequest_getInfoPtr = procedure(this: IRequest; status: IStatus; level: Integer; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  IRequest_startPtr = procedure(this: IRequest; status: IStatus; tra: ITransaction; level: Integer); cdecl;
  IRequest_startAndSendPtr = procedure(this: IRequest; status: IStatus; tra: ITransaction; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); cdecl;
  IRequest_unwindPtr = procedure(this: IRequest; status: IStatus; level: Integer); cdecl;
  IRequest_deprecatedFreePtr = procedure(this: IRequest; status: IStatus); cdecl;
  IRequest_freePtr = procedure(this: IRequest; status: IStatus); cdecl;
  IEvents_deprecatedCancelPtr = procedure(this: IEvents; status: IStatus); cdecl;
  IEvents_cancelPtr = procedure(this: IEvents; status: IStatus); cdecl;
  IAttachment_getInfoPtr = procedure(this: IAttachment; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  IAttachment_startTransactionPtr = function(this: IAttachment; status: IStatus; tpbLength: Cardinal; tpb: PByte): ITransaction; cdecl;
  IAttachment_reconnectTransactionPtr = function(this: IAttachment; status: IStatus; length: Cardinal; id: PByte): ITransaction; cdecl;
  IAttachment_compileRequestPtr = function(this: IAttachment; status: IStatus; blrLength: Cardinal; blr: PByte): IRequest; cdecl;
  IAttachment_transactRequestPtr = procedure(this: IAttachment; status: IStatus; transaction: ITransaction; blrLength: Cardinal; blr: PByte; inMsgLength: Cardinal; inMsg: PByte; outMsgLength: Cardinal; outMsg: PByte); cdecl;
  IAttachment_createBlobPtr = function(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob; cdecl;
  IAttachment_openBlobPtr = function(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob; cdecl;
  IAttachment_getSlicePtr = function(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte): Integer; cdecl;
  IAttachment_putSlicePtr = procedure(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte); cdecl;
  IAttachment_executeDynPtr = procedure(this: IAttachment; status: IStatus; transaction: ITransaction; length: Cardinal; dyn: PByte); cdecl;
  IAttachment_preparePtr = function(this: IAttachment; status: IStatus; tra: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): IStatement; cdecl;
  IAttachment_executePtr = function(this: IAttachment; status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction; cdecl;
  IAttachment_openCursorPtr = function(this: IAttachment; status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): IResultSet; cdecl;
  IAttachment_queEventsPtr = function(this: IAttachment; status: IStatus; callback: IEventCallback; length: Cardinal; events: PByte): IEvents; cdecl;
  IAttachment_cancelOperationPtr = procedure(this: IAttachment; status: IStatus; option: Integer); cdecl;
  IAttachment_pingPtr = procedure(this: IAttachment; status: IStatus); cdecl;
  IAttachment_deprecatedDetachPtr = procedure(this: IAttachment; status: IStatus); cdecl;
  IAttachment_deprecatedDropDatabasePtr = procedure(this: IAttachment; status: IStatus); cdecl;
  IAttachment_getIdleTimeoutPtr = function(this: IAttachment; status: IStatus): Cardinal; cdecl;
  IAttachment_setIdleTimeoutPtr = procedure(this: IAttachment; status: IStatus; timeOut: Cardinal); cdecl;
  IAttachment_getStatementTimeoutPtr = function(this: IAttachment; status: IStatus): Cardinal; cdecl;
  IAttachment_setStatementTimeoutPtr = procedure(this: IAttachment; status: IStatus; timeOut: Cardinal); cdecl;
  IAttachment_createBatchPtr = function(this: IAttachment; status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch; cdecl;
  IAttachment_createReplicatorPtr = function(this: IAttachment; status: IStatus): IReplicator; cdecl;
  IAttachment_detachPtr = procedure(this: IAttachment; status: IStatus); cdecl;
  IAttachment_dropDatabasePtr = procedure(this: IAttachment; status: IStatus); cdecl;
  IService_deprecatedDetachPtr = procedure(this: IService; status: IStatus); cdecl;
  IService_queryPtr = procedure(this: IService; status: IStatus; sendLength: Cardinal; sendItems: PByte; receiveLength: Cardinal; receiveItems: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
  IService_startPtr = procedure(this: IService; status: IStatus; spbLength: Cardinal; spb: PByte); cdecl;
  IService_detachPtr = procedure(this: IService; status: IStatus); cdecl;
  IService_cancelPtr = procedure(this: IService; status: IStatus); cdecl;
  IProvider_attachDatabasePtr = function(this: IProvider; status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment; cdecl;
  IProvider_createDatabasePtr = function(this: IProvider; status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment; cdecl;
  IProvider_attachServiceManagerPtr = function(this: IProvider; status: IStatus; service: PAnsiChar; spbLength: Cardinal; spb: PByte): IService; cdecl;
  IProvider_shutdownPtr = procedure(this: IProvider; status: IStatus; timeout: Cardinal; reason: Integer); cdecl;
  IProvider_setDbCryptCallbackPtr = procedure(this: IProvider; status: IStatus; cryptCallback: ICryptKeyCallback); cdecl;
  IDtcStart_addAttachmentPtr = procedure(this: IDtcStart; status: IStatus; att: IAttachment); cdecl;
  IDtcStart_addWithTpbPtr = procedure(this: IDtcStart; status: IStatus; att: IAttachment; length: Cardinal; tpb: PByte); cdecl;
  IDtcStart_startPtr = function(this: IDtcStart; status: IStatus): ITransaction; cdecl;
  IDtc_joinPtr = function(this: IDtc; status: IStatus; one: ITransaction; two: ITransaction): ITransaction; cdecl;
  IDtc_startBuilderPtr = function(this: IDtc; status: IStatus): IDtcStart; cdecl;
  IWriter_resetPtr = procedure(this: IWriter); cdecl;
  IWriter_addPtr = procedure(this: IWriter; status: IStatus; name: PAnsiChar); cdecl;
  IWriter_setTypePtr = procedure(this: IWriter; status: IStatus; value: PAnsiChar); cdecl;
  IWriter_setDbPtr = procedure(this: IWriter; status: IStatus; value: PAnsiChar); cdecl;
  IServerBlock_getLoginPtr = function(this: IServerBlock): PAnsiChar; cdecl;
  IServerBlock_getDataPtr = function(this: IServerBlock; length: PCardinal): PByte; cdecl;
  IServerBlock_putDataPtr = procedure(this: IServerBlock; status: IStatus; length: Cardinal; data: Pointer); cdecl;
  IServerBlock_newKeyPtr = function(this: IServerBlock; status: IStatus): ICryptKey; cdecl;
  IClientBlock_getLoginPtr = function(this: IClientBlock): PAnsiChar; cdecl;
  IClientBlock_getPasswordPtr = function(this: IClientBlock): PAnsiChar; cdecl;
  IClientBlock_getDataPtr = function(this: IClientBlock; length: PCardinal): PByte; cdecl;
  IClientBlock_putDataPtr = procedure(this: IClientBlock; status: IStatus; length: Cardinal; data: Pointer); cdecl;
  IClientBlock_newKeyPtr = function(this: IClientBlock; status: IStatus): ICryptKey; cdecl;
  IClientBlock_getAuthBlockPtr = function(this: IClientBlock; status: IStatus): IAuthBlock; cdecl;
  IServer_authenticatePtr = function(this: IServer; status: IStatus; sBlock: IServerBlock; writerInterface: IWriter): Integer; cdecl;
  IServer_setDbCryptCallbackPtr = procedure(this: IServer; status: IStatus; cryptCallback: ICryptKeyCallback); cdecl;
  IClient_authenticatePtr = function(this: IClient; status: IStatus; cBlock: IClientBlock): Integer; cdecl;
  IUserField_enteredPtr = function(this: IUserField): Integer; cdecl;
  IUserField_specifiedPtr = function(this: IUserField): Integer; cdecl;
  IUserField_setEnteredPtr = procedure(this: IUserField; status: IStatus; newValue: Integer); cdecl;
  ICharUserField_getPtr = function(this: ICharUserField): PAnsiChar; cdecl;
  ICharUserField_set_Ptr = procedure(this: ICharUserField; status: IStatus; newValue: PAnsiChar); cdecl;
  IIntUserField_getPtr = function(this: IIntUserField): Integer; cdecl;
  IIntUserField_set_Ptr = procedure(this: IIntUserField; status: IStatus; newValue: Integer); cdecl;
  IUser_operationPtr = function(this: IUser): Cardinal; cdecl;
  IUser_userNamePtr = function(this: IUser): ICharUserField; cdecl;
  IUser_passwordPtr = function(this: IUser): ICharUserField; cdecl;
  IUser_firstNamePtr = function(this: IUser): ICharUserField; cdecl;
  IUser_lastNamePtr = function(this: IUser): ICharUserField; cdecl;
  IUser_middleNamePtr = function(this: IUser): ICharUserField; cdecl;
  IUser_commentPtr = function(this: IUser): ICharUserField; cdecl;
  IUser_attributesPtr = function(this: IUser): ICharUserField; cdecl;
  IUser_activePtr = function(this: IUser): IIntUserField; cdecl;
  IUser_adminPtr = function(this: IUser): IIntUserField; cdecl;
  IUser_clearPtr = procedure(this: IUser; status: IStatus); cdecl;
  IListUsers_listPtr = procedure(this: IListUsers; status: IStatus; user: IUser); cdecl;
  ILogonInfo_namePtr = function(this: ILogonInfo): PAnsiChar; cdecl;
  ILogonInfo_rolePtr = function(this: ILogonInfo): PAnsiChar; cdecl;
  ILogonInfo_networkProtocolPtr = function(this: ILogonInfo): PAnsiChar; cdecl;
  ILogonInfo_remoteAddressPtr = function(this: ILogonInfo): PAnsiChar; cdecl;
  ILogonInfo_authBlockPtr = function(this: ILogonInfo; length: PCardinal): PByte; cdecl;
  ILogonInfo_attachmentPtr = function(this: ILogonInfo; status: IStatus): IAttachment; cdecl;
  ILogonInfo_transactionPtr = function(this: ILogonInfo; status: IStatus): ITransaction; cdecl;
  IManagement_startPtr = procedure(this: IManagement; status: IStatus; logonInfo: ILogonInfo); cdecl;
  IManagement_executePtr = function(this: IManagement; status: IStatus; user: IUser; callback: IListUsers): Integer; cdecl;
  IManagement_commitPtr = procedure(this: IManagement; status: IStatus); cdecl;
  IManagement_rollbackPtr = procedure(this: IManagement; status: IStatus); cdecl;
  IAuthBlock_getTypePtr = function(this: IAuthBlock): PAnsiChar; cdecl;
  IAuthBlock_getNamePtr = function(this: IAuthBlock): PAnsiChar; cdecl;
  IAuthBlock_getPluginPtr = function(this: IAuthBlock): PAnsiChar; cdecl;
  IAuthBlock_getSecurityDbPtr = function(this: IAuthBlock): PAnsiChar; cdecl;
  IAuthBlock_getOriginalPluginPtr = function(this: IAuthBlock): PAnsiChar; cdecl;
  IAuthBlock_nextPtr = function(this: IAuthBlock; status: IStatus): Boolean; cdecl;
  IAuthBlock_firstPtr = function(this: IAuthBlock; status: IStatus): Boolean; cdecl;
  IWireCryptPlugin_getKnownTypesPtr = function(this: IWireCryptPlugin; status: IStatus): PAnsiChar; cdecl;
  IWireCryptPlugin_setKeyPtr = procedure(this: IWireCryptPlugin; status: IStatus; key: ICryptKey); cdecl;
  IWireCryptPlugin_encryptPtr = procedure(this: IWireCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
  IWireCryptPlugin_decryptPtr = procedure(this: IWireCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
  IWireCryptPlugin_getSpecificDataPtr = function(this: IWireCryptPlugin; status: IStatus; keyType: PAnsiChar; length: PCardinal): PByte; cdecl;
  IWireCryptPlugin_setSpecificDataPtr = procedure(this: IWireCryptPlugin; status: IStatus; keyType: PAnsiChar; length: Cardinal; data: PByte); cdecl;
  ICryptKeyCallback_callbackPtr = function(this: ICryptKeyCallback; dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal; cdecl;
  IKeyHolderPlugin_keyCallbackPtr = function(this: IKeyHolderPlugin; status: IStatus; callback: ICryptKeyCallback): Integer; cdecl;
  IKeyHolderPlugin_keyHandlePtr = function(this: IKeyHolderPlugin; status: IStatus; keyName: PAnsiChar): ICryptKeyCallback; cdecl;
  IKeyHolderPlugin_useOnlyOwnKeysPtr = function(this: IKeyHolderPlugin; status: IStatus): Boolean; cdecl;
  IKeyHolderPlugin_chainHandlePtr = function(this: IKeyHolderPlugin; status: IStatus): ICryptKeyCallback; cdecl;
  IDbCryptInfo_getDatabaseFullPathPtr = function(this: IDbCryptInfo; status: IStatus): PAnsiChar; cdecl;
  IDbCryptPlugin_setKeyPtr = procedure(this: IDbCryptPlugin; status: IStatus; length: Cardinal; sources: PIKeyHolderPlugin; keyName: PAnsiChar); cdecl;
  IDbCryptPlugin_encryptPtr = procedure(this: IDbCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
  IDbCryptPlugin_decryptPtr = procedure(this: IDbCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
  IDbCryptPlugin_setInfoPtr = procedure(this: IDbCryptPlugin; status: IStatus; info: IDbCryptInfo); cdecl;
  IExternalContext_getMasterPtr = function(this: IExternalContext): IMaster; cdecl;
  IExternalContext_getEnginePtr = function(this: IExternalContext; status: IStatus): IExternalEngine; cdecl;
  IExternalContext_getAttachmentPtr = function(this: IExternalContext; status: IStatus): IAttachment; cdecl;
  IExternalContext_getTransactionPtr = function(this: IExternalContext; status: IStatus): ITransaction; cdecl;
  IExternalContext_getUserNamePtr = function(this: IExternalContext): PAnsiChar; cdecl;
  IExternalContext_getDatabaseNamePtr = function(this: IExternalContext): PAnsiChar; cdecl;
  IExternalContext_getClientCharSetPtr = function(this: IExternalContext): PAnsiChar; cdecl;
  IExternalContext_obtainInfoCodePtr = function(this: IExternalContext): Integer; cdecl;
  IExternalContext_getInfoPtr = function(this: IExternalContext; code: Integer): Pointer; cdecl;
  IExternalContext_setInfoPtr = function(this: IExternalContext; code: Integer; value: Pointer): Pointer; cdecl;
  IExternalResultSet_fetchPtr = function(this: IExternalResultSet; status: IStatus): Boolean; cdecl;
  IExternalFunction_getCharSetPtr = procedure(this: IExternalFunction; status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
  IExternalFunction_executePtr = procedure(this: IExternalFunction; status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer); cdecl;
  IExternalProcedure_getCharSetPtr = procedure(this: IExternalProcedure; status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
  IExternalProcedure_openPtr = function(this: IExternalProcedure; status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer): IExternalResultSet; cdecl;
  IExternalTrigger_getCharSetPtr = procedure(this: IExternalTrigger; status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
  IExternalTrigger_executePtr = procedure(this: IExternalTrigger; status: IStatus; context: IExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer); cdecl;
  IRoutineMetadata_getPackagePtr = function(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
  IRoutineMetadata_getNamePtr = function(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
  IRoutineMetadata_getEntryPointPtr = function(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
  IRoutineMetadata_getBodyPtr = function(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
  IRoutineMetadata_getInputMetadataPtr = function(this: IRoutineMetadata; status: IStatus): IMessageMetadata; cdecl;
  IRoutineMetadata_getOutputMetadataPtr = function(this: IRoutineMetadata; status: IStatus): IMessageMetadata; cdecl;
  IRoutineMetadata_getTriggerMetadataPtr = function(this: IRoutineMetadata; status: IStatus): IMessageMetadata; cdecl;
  IRoutineMetadata_getTriggerTablePtr = function(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
  IRoutineMetadata_getTriggerTypePtr = function(this: IRoutineMetadata; status: IStatus): Cardinal; cdecl;
  IExternalEngine_openPtr = procedure(this: IExternalEngine; status: IStatus; context: IExternalContext; charSet: PAnsiChar; charSetSize: Cardinal); cdecl;
  IExternalEngine_openAttachmentPtr = procedure(this: IExternalEngine; status: IStatus; context: IExternalContext); cdecl;
  IExternalEngine_closeAttachmentPtr = procedure(this: IExternalEngine; status: IStatus; context: IExternalContext); cdecl;
  IExternalEngine_makeFunctionPtr = function(this: IExternalEngine; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalFunction; cdecl;
  IExternalEngine_makeProcedurePtr = function(this: IExternalEngine; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalProcedure; cdecl;
  IExternalEngine_makeTriggerPtr = function(this: IExternalEngine; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder): IExternalTrigger; cdecl;
  ITimer_handlerPtr = procedure(this: ITimer); cdecl;
  ITimerControl_startPtr = procedure(this: ITimerControl; status: IStatus; timer: ITimer; microSeconds: UInt64); cdecl;
  ITimerControl_stopPtr = procedure(this: ITimerControl; status: IStatus; timer: ITimer); cdecl;
  IVersionCallback_callbackPtr = procedure(this: IVersionCallback; status: IStatus; text: PAnsiChar); cdecl;
  IUtil_getFbVersionPtr = procedure(this: IUtil; status: IStatus; att: IAttachment; callback: IVersionCallback); cdecl;
  IUtil_loadBlobPtr = procedure(this: IUtil; status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean); cdecl;
  IUtil_dumpBlobPtr = procedure(this: IUtil; status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean); cdecl;
  IUtil_getPerfCountersPtr = procedure(this: IUtil; status: IStatus; att: IAttachment; countersSet: PAnsiChar; counters: PInt64); cdecl;
  IUtil_executeCreateDatabasePtr = function(this: IUtil; status: IStatus; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: PBoolean): IAttachment; cdecl;
  IUtil_decodeDatePtr = procedure(this: IUtil; date: TISC_DATE; year: PCardinal; month: PCardinal; day: PCardinal); cdecl;
  IUtil_decodeTimePtr = procedure(this: IUtil; time: TISC_TIME; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal); cdecl;
  IUtil_encodeDatePtr = function(this: IUtil; year: Cardinal; month: Cardinal; day: Cardinal): TISC_DATE; cdecl;
  IUtil_encodeTimePtr = function(this: IUtil; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): TISC_TIME; cdecl;
  IUtil_formatStatusPtr = function(this: IUtil; buffer: PAnsiChar; bufferSize: Cardinal; status: IStatus): Cardinal; cdecl;
  IUtil_getClientVersionPtr = function(this: IUtil): Cardinal; cdecl;
  IUtil_getXpbBuilderPtr = function(this: IUtil; status: IStatus; kind: Cardinal; buf: PByte; len: Cardinal): IXpbBuilder; cdecl;
  IUtil_setOffsetsPtr = function(this: IUtil; status: IStatus; metadata: IMessageMetadata; callback: IOffsetsCallback): Cardinal; cdecl;
  IUtil_getDecFloat16Ptr = function(this: IUtil; status: IStatus): IDecFloat16; cdecl;
  IUtil_getDecFloat34Ptr = function(this: IUtil; status: IStatus): IDecFloat34; cdecl;
  IUtil_decodeTimeTzPtr = procedure(this: IUtil; status: IStatus; timeTz: PISC_TIME_TZ; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
  IUtil_decodeTimeStampTzPtr = procedure(this: IUtil; status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
  IUtil_encodeTimeTzPtr = procedure(this: IUtil; status: IStatus; timeTz: PISC_TIME_TZ; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar); cdecl;
  IUtil_encodeTimeStampTzPtr = procedure(this: IUtil; status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: Cardinal; month: Cardinal; day: Cardinal; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar); cdecl;
  IUtil_getInt128Ptr = function(this: IUtil; status: IStatus): IInt128; cdecl;
  IUtil_decodeTimeTzExPtr = procedure(this: IUtil; status: IStatus; timeTz: PISC_TIME_TZ_EX; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
  IUtil_decodeTimeStampTzExPtr = procedure(this: IUtil; status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ_EX; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
  IOffsetsCallback_setOffsetPtr = procedure(this: IOffsetsCallback; status: IStatus; index: Cardinal; offset: Cardinal; nullOffset: Cardinal); cdecl;
  IXpbBuilder_clearPtr = procedure(this: IXpbBuilder; status: IStatus); cdecl;
  IXpbBuilder_removeCurrentPtr = procedure(this: IXpbBuilder; status: IStatus); cdecl;
  IXpbBuilder_insertIntPtr = procedure(this: IXpbBuilder; status: IStatus; tag: Byte; value: Integer); cdecl;
  IXpbBuilder_insertBigIntPtr = procedure(this: IXpbBuilder; status: IStatus; tag: Byte; value: Int64); cdecl;
  IXpbBuilder_insertBytesPtr = procedure(this: IXpbBuilder; status: IStatus; tag: Byte; bytes: Pointer; length: Cardinal); cdecl;
  IXpbBuilder_insertStringPtr = procedure(this: IXpbBuilder; status: IStatus; tag: Byte; str: PAnsiChar); cdecl;
  IXpbBuilder_insertTagPtr = procedure(this: IXpbBuilder; status: IStatus; tag: Byte); cdecl;
  IXpbBuilder_isEofPtr = function(this: IXpbBuilder; status: IStatus): Boolean; cdecl;
  IXpbBuilder_moveNextPtr = procedure(this: IXpbBuilder; status: IStatus); cdecl;
  IXpbBuilder_rewindPtr = procedure(this: IXpbBuilder; status: IStatus); cdecl;
  IXpbBuilder_findFirstPtr = function(this: IXpbBuilder; status: IStatus; tag: Byte): Boolean; cdecl;
  IXpbBuilder_findNextPtr = function(this: IXpbBuilder; status: IStatus): Boolean; cdecl;
  IXpbBuilder_getTagPtr = function(this: IXpbBuilder; status: IStatus): Byte; cdecl;
  IXpbBuilder_getLengthPtr = function(this: IXpbBuilder; status: IStatus): Cardinal; cdecl;
  IXpbBuilder_getIntPtr = function(this: IXpbBuilder; status: IStatus): Integer; cdecl;
  IXpbBuilder_getBigIntPtr = function(this: IXpbBuilder; status: IStatus): Int64; cdecl;
  IXpbBuilder_getStringPtr = function(this: IXpbBuilder; status: IStatus): PAnsiChar; cdecl;
  IXpbBuilder_getBytesPtr = function(this: IXpbBuilder; status: IStatus): PByte; cdecl;
  IXpbBuilder_getBufferLengthPtr = function(this: IXpbBuilder; status: IStatus): Cardinal; cdecl;
  IXpbBuilder_getBufferPtr = function(this: IXpbBuilder; status: IStatus): PByte; cdecl;
  ITraceConnection_getKindPtr = function(this: ITraceConnection): Cardinal; cdecl;
  ITraceConnection_getProcessIDPtr = function(this: ITraceConnection): Integer; cdecl;
  ITraceConnection_getUserNamePtr = function(this: ITraceConnection): PAnsiChar; cdecl;
  ITraceConnection_getRoleNamePtr = function(this: ITraceConnection): PAnsiChar; cdecl;
  ITraceConnection_getCharSetPtr = function(this: ITraceConnection): PAnsiChar; cdecl;
  ITraceConnection_getRemoteProtocolPtr = function(this: ITraceConnection): PAnsiChar; cdecl;
  ITraceConnection_getRemoteAddressPtr = function(this: ITraceConnection): PAnsiChar; cdecl;
  ITraceConnection_getRemoteProcessIDPtr = function(this: ITraceConnection): Integer; cdecl;
  ITraceConnection_getRemoteProcessNamePtr = function(this: ITraceConnection): PAnsiChar; cdecl;
  ITraceDatabaseConnection_getConnectionIDPtr = function(this: ITraceDatabaseConnection): Int64; cdecl;
  ITraceDatabaseConnection_getDatabaseNamePtr = function(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
  ITraceTransaction_getTransactionIDPtr = function(this: ITraceTransaction): Int64; cdecl;
  ITraceTransaction_getReadOnlyPtr = function(this: ITraceTransaction): Boolean; cdecl;
  ITraceTransaction_getWaitPtr = function(this: ITraceTransaction): Integer; cdecl;
  ITraceTransaction_getIsolationPtr = function(this: ITraceTransaction): Cardinal; cdecl;
  ITraceTransaction_getPerfPtr = function(this: ITraceTransaction): PPerformanceInfo; cdecl;
  ITraceTransaction_getInitialIDPtr = function(this: ITraceTransaction): Int64; cdecl;
  ITraceTransaction_getPreviousIDPtr = function(this: ITraceTransaction): Int64; cdecl;
  ITraceParams_getCountPtr = function(this: ITraceParams): Cardinal; cdecl;
  ITraceParams_getParamPtr = function(this: ITraceParams; idx: Cardinal): Pdsc; cdecl;
  ITraceParams_getTextUTF8Ptr = function(this: ITraceParams; status: IStatus; idx: Cardinal): PAnsiChar; cdecl;
  ITraceStatement_getStmtIDPtr = function(this: ITraceStatement): Int64; cdecl;
  ITraceStatement_getPerfPtr = function(this: ITraceStatement): PPerformanceInfo; cdecl;
  ITraceSQLStatement_getTextPtr = function(this: ITraceSQLStatement): PAnsiChar; cdecl;
  ITraceSQLStatement_getPlanPtr = function(this: ITraceSQLStatement): PAnsiChar; cdecl;
  ITraceSQLStatement_getInputsPtr = function(this: ITraceSQLStatement): ITraceParams; cdecl;
  ITraceSQLStatement_getTextUTF8Ptr = function(this: ITraceSQLStatement): PAnsiChar; cdecl;
  ITraceSQLStatement_getExplainedPlanPtr = function(this: ITraceSQLStatement): PAnsiChar; cdecl;
  ITraceBLRStatement_getDataPtr = function(this: ITraceBLRStatement): PByte; cdecl;
  ITraceBLRStatement_getDataLengthPtr = function(this: ITraceBLRStatement): Cardinal; cdecl;
  ITraceBLRStatement_getTextPtr = function(this: ITraceBLRStatement): PAnsiChar; cdecl;
  ITraceDYNRequest_getDataPtr = function(this: ITraceDYNRequest): PByte; cdecl;
  ITraceDYNRequest_getDataLengthPtr = function(this: ITraceDYNRequest): Cardinal; cdecl;
  ITraceDYNRequest_getTextPtr = function(this: ITraceDYNRequest): PAnsiChar; cdecl;
  ITraceContextVariable_getNameSpacePtr = function(this: ITraceContextVariable): PAnsiChar; cdecl;
  ITraceContextVariable_getVarNamePtr = function(this: ITraceContextVariable): PAnsiChar; cdecl;
  ITraceContextVariable_getVarValuePtr = function(this: ITraceContextVariable): PAnsiChar; cdecl;
  ITraceProcedure_getProcNamePtr = function(this: ITraceProcedure): PAnsiChar; cdecl;
  ITraceProcedure_getInputsPtr = function(this: ITraceProcedure): ITraceParams; cdecl;
  ITraceProcedure_getPerfPtr = function(this: ITraceProcedure): PPerformanceInfo; cdecl;
  ITraceProcedure_getStmtIDPtr = function(this: ITraceProcedure): Int64; cdecl;
  ITraceProcedure_getPlanPtr = function(this: ITraceProcedure): PAnsiChar; cdecl;
  ITraceProcedure_getExplainedPlanPtr = function(this: ITraceProcedure): PAnsiChar; cdecl;
  ITraceFunction_getFuncNamePtr = function(this: ITraceFunction): PAnsiChar; cdecl;
  ITraceFunction_getInputsPtr = function(this: ITraceFunction): ITraceParams; cdecl;
  ITraceFunction_getResultPtr = function(this: ITraceFunction): ITraceParams; cdecl;
  ITraceFunction_getPerfPtr = function(this: ITraceFunction): PPerformanceInfo; cdecl;
  ITraceFunction_getStmtIDPtr = function(this: ITraceFunction): Int64; cdecl;
  ITraceFunction_getPlanPtr = function(this: ITraceFunction): PAnsiChar; cdecl;
  ITraceFunction_getExplainedPlanPtr = function(this: ITraceFunction): PAnsiChar; cdecl;
  ITraceTrigger_getTriggerNamePtr = function(this: ITraceTrigger): PAnsiChar; cdecl;
  ITraceTrigger_getRelationNamePtr = function(this: ITraceTrigger): PAnsiChar; cdecl;
  ITraceTrigger_getActionPtr = function(this: ITraceTrigger): Integer; cdecl;
  ITraceTrigger_getWhichPtr = function(this: ITraceTrigger): Integer; cdecl;
  ITraceTrigger_getPerfPtr = function(this: ITraceTrigger): PPerformanceInfo; cdecl;
  ITraceTrigger_getStmtIDPtr = function(this: ITraceTrigger): Int64; cdecl;
  ITraceTrigger_getPlanPtr = function(this: ITraceTrigger): PAnsiChar; cdecl;
  ITraceTrigger_getExplainedPlanPtr = function(this: ITraceTrigger): PAnsiChar; cdecl;
  ITraceServiceConnection_getServiceIDPtr = function(this: ITraceServiceConnection): Pointer; cdecl;
  ITraceServiceConnection_getServiceMgrPtr = function(this: ITraceServiceConnection): PAnsiChar; cdecl;
  ITraceServiceConnection_getServiceNamePtr = function(this: ITraceServiceConnection): PAnsiChar; cdecl;
  ITraceStatusVector_hasErrorPtr = function(this: ITraceStatusVector): Boolean; cdecl;
  ITraceStatusVector_hasWarningPtr = function(this: ITraceStatusVector): Boolean; cdecl;
  ITraceStatusVector_getStatusPtr = function(this: ITraceStatusVector): IStatus; cdecl;
  ITraceStatusVector_getTextPtr = function(this: ITraceStatusVector): PAnsiChar; cdecl;
  ITraceSweepInfo_getOITPtr = function(this: ITraceSweepInfo): Int64; cdecl;
  ITraceSweepInfo_getOSTPtr = function(this: ITraceSweepInfo): Int64; cdecl;
  ITraceSweepInfo_getOATPtr = function(this: ITraceSweepInfo): Int64; cdecl;
  ITraceSweepInfo_getNextPtr = function(this: ITraceSweepInfo): Int64; cdecl;
  ITraceSweepInfo_getPerfPtr = function(this: ITraceSweepInfo): PPerformanceInfo; cdecl;
  ITraceLogWriter_writePtr = function(this: ITraceLogWriter; buf: Pointer; size: Cardinal): Cardinal; cdecl;
  ITraceLogWriter_write_sPtr = function(this: ITraceLogWriter; status: IStatus; buf: Pointer; size: Cardinal): Cardinal; cdecl;
  ITraceInitInfo_getConfigTextPtr = function(this: ITraceInitInfo): PAnsiChar; cdecl;
  ITraceInitInfo_getTraceSessionIDPtr = function(this: ITraceInitInfo): Integer; cdecl;
  ITraceInitInfo_getTraceSessionNamePtr = function(this: ITraceInitInfo): PAnsiChar; cdecl;
  ITraceInitInfo_getFirebirdRootDirectoryPtr = function(this: ITraceInitInfo): PAnsiChar; cdecl;
  ITraceInitInfo_getDatabaseNamePtr = function(this: ITraceInitInfo): PAnsiChar; cdecl;
  ITraceInitInfo_getConnectionPtr = function(this: ITraceInitInfo): ITraceDatabaseConnection; cdecl;
  ITraceInitInfo_getLogWriterPtr = function(this: ITraceInitInfo): ITraceLogWriter; cdecl;
  ITracePlugin_trace_get_errorPtr = function(this: ITracePlugin): PAnsiChar; cdecl;
  ITracePlugin_trace_attachPtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_detachPtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; drop_db: Boolean): Boolean; cdecl;
  ITracePlugin_trace_transaction_startPtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; tpb_length: Cardinal; tpb: PByte; tra_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_transaction_endPtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_proc_executePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; procedure_: ITraceProcedure; started: Boolean; proc_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_trigger_executePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; trigger: ITraceTrigger; started: Boolean; trig_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_set_contextPtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; variable: ITraceContextVariable): Boolean; cdecl;
  ITracePlugin_trace_dsql_preparePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_dsql_freePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; statement: ITraceSQLStatement; option: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_dsql_executePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_blr_compilePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_blr_executePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; req_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_dyn_executePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; request: ITraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_service_attachPtr = function(this: ITracePlugin; service: ITraceServiceConnection; att_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_service_startPtr = function(this: ITracePlugin; service: ITraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_service_queryPtr = function(this: ITracePlugin; service: ITraceServiceConnection; send_item_length: Cardinal; send_items: PByte; recv_item_length: Cardinal; recv_items: PByte; query_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_service_detachPtr = function(this: ITracePlugin; service: ITraceServiceConnection; detach_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_event_errorPtr = function(this: ITracePlugin; connection: ITraceConnection; status: ITraceStatusVector; function_: PAnsiChar): Boolean; cdecl;
  ITracePlugin_trace_event_sweepPtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; sweep: ITraceSweepInfo; sweep_state: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_func_executePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; function_: ITraceFunction; started: Boolean; func_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_dsql_restartPtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; number: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_proc_compilePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; procedure_: ITraceProcedure; time_millis: Int64; proc_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_func_compilePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; function_: ITraceFunction; time_millis: Int64; func_result: Cardinal): Boolean; cdecl;
  ITracePlugin_trace_trigger_compilePtr = function(this: ITracePlugin; connection: ITraceDatabaseConnection; trigger: ITraceTrigger; time_millis: Int64; trig_result: Cardinal): Boolean; cdecl;
  ITraceFactory_trace_needsPtr = function(this: ITraceFactory): UInt64; cdecl;
  ITraceFactory_trace_createPtr = function(this: ITraceFactory; status: IStatus; init_info: ITraceInitInfo): ITracePlugin; cdecl;
  IUdrFunctionFactory_setupPtr = procedure(this: IUdrFunctionFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder); cdecl;
  IUdrFunctionFactory_newItemPtr = function(this: IUdrFunctionFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalFunction; cdecl;
  IUdrProcedureFactory_setupPtr = procedure(this: IUdrProcedureFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder); cdecl;
  IUdrProcedureFactory_newItemPtr = function(this: IUdrProcedureFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalProcedure; cdecl;
  IUdrTriggerFactory_setupPtr = procedure(this: IUdrTriggerFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder); cdecl;
  IUdrTriggerFactory_newItemPtr = function(this: IUdrTriggerFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalTrigger; cdecl;
  IUdrPlugin_getMasterPtr = function(this: IUdrPlugin): IMaster; cdecl;
  IUdrPlugin_registerFunctionPtr = procedure(this: IUdrPlugin; status: IStatus; name: PAnsiChar; factory: IUdrFunctionFactory); cdecl;
  IUdrPlugin_registerProcedurePtr = procedure(this: IUdrPlugin; status: IStatus; name: PAnsiChar; factory: IUdrProcedureFactory); cdecl;
  IUdrPlugin_registerTriggerPtr = procedure(this: IUdrPlugin; status: IStatus; name: PAnsiChar; factory: IUdrTriggerFactory); cdecl;
  IDecFloat16_toBcdPtr = procedure(this: IDecFloat16; from: PFB_DEC16; sign: PInteger; bcd: PByte; exp: PInteger); cdecl;
  IDecFloat16_toStringPtr = procedure(this: IDecFloat16; status: IStatus; from: PFB_DEC16; bufferLength: Cardinal; buffer: PAnsiChar); cdecl;
  IDecFloat16_fromBcdPtr = procedure(this: IDecFloat16; sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC16); cdecl;
  IDecFloat16_fromStringPtr = procedure(this: IDecFloat16; status: IStatus; from: PAnsiChar; to_: PFB_DEC16); cdecl;
  IDecFloat34_toBcdPtr = procedure(this: IDecFloat34; from: PFB_DEC34; sign: PInteger; bcd: PByte; exp: PInteger); cdecl;
  IDecFloat34_toStringPtr = procedure(this: IDecFloat34; status: IStatus; from: PFB_DEC34; bufferLength: Cardinal; buffer: PAnsiChar); cdecl;
  IDecFloat34_fromBcdPtr = procedure(this: IDecFloat34; sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC34); cdecl;
  IDecFloat34_fromStringPtr = procedure(this: IDecFloat34; status: IStatus; from: PAnsiChar; to_: PFB_DEC34); cdecl;
  IInt128_toStringPtr = procedure(this: IInt128; status: IStatus; from: PFB_I128; scale: Integer; bufferLength: Cardinal; buffer: PAnsiChar); cdecl;
  IInt128_fromStringPtr = procedure(this: IInt128; status: IStatus; scale: Integer; from: PAnsiChar; to_: PFB_I128); cdecl;
  IReplicatedField_getNamePtr = function(this: IReplicatedField): PAnsiChar; cdecl;
  IReplicatedField_getTypePtr = function(this: IReplicatedField): Cardinal; cdecl;
  IReplicatedField_getSubTypePtr = function(this: IReplicatedField): Integer; cdecl;
  IReplicatedField_getScalePtr = function(this: IReplicatedField): Integer; cdecl;
  IReplicatedField_getLengthPtr = function(this: IReplicatedField): Cardinal; cdecl;
  IReplicatedField_getCharSetPtr = function(this: IReplicatedField): Cardinal; cdecl;
  IReplicatedField_getDataPtr = function(this: IReplicatedField): Pointer; cdecl;
  IReplicatedRecord_getCountPtr = function(this: IReplicatedRecord): Cardinal; cdecl;
  IReplicatedRecord_getFieldPtr = function(this: IReplicatedRecord; index: Cardinal): IReplicatedField; cdecl;
  IReplicatedRecord_getRawLengthPtr = function(this: IReplicatedRecord): Cardinal; cdecl;
  IReplicatedRecord_getRawDataPtr = function(this: IReplicatedRecord): PByte; cdecl;
  IReplicatedTransaction_preparePtr = procedure(this: IReplicatedTransaction; status: IStatus); cdecl;
  IReplicatedTransaction_commitPtr = procedure(this: IReplicatedTransaction; status: IStatus); cdecl;
  IReplicatedTransaction_rollbackPtr = procedure(this: IReplicatedTransaction; status: IStatus); cdecl;
  IReplicatedTransaction_startSavepointPtr = procedure(this: IReplicatedTransaction; status: IStatus); cdecl;
  IReplicatedTransaction_releaseSavepointPtr = procedure(this: IReplicatedTransaction; status: IStatus); cdecl;
  IReplicatedTransaction_rollbackSavepointPtr = procedure(this: IReplicatedTransaction; status: IStatus); cdecl;
  IReplicatedTransaction_insertRecordPtr = procedure(this: IReplicatedTransaction; status: IStatus; name: PAnsiChar; record_: IReplicatedRecord); cdecl;
  IReplicatedTransaction_updateRecordPtr = procedure(this: IReplicatedTransaction; status: IStatus; name: PAnsiChar; orgRecord: IReplicatedRecord; newRecord: IReplicatedRecord); cdecl;
  IReplicatedTransaction_deleteRecordPtr = procedure(this: IReplicatedTransaction; status: IStatus; name: PAnsiChar; record_: IReplicatedRecord); cdecl;
  IReplicatedTransaction_executeSqlPtr = procedure(this: IReplicatedTransaction; status: IStatus; sql: PAnsiChar); cdecl;
  IReplicatedTransaction_executeSqlIntlPtr = procedure(this: IReplicatedTransaction; status: IStatus; charset: Cardinal; sql: PAnsiChar); cdecl;
  IReplicatedSession_initPtr = function(this: IReplicatedSession; status: IStatus; attachment: IAttachment): Boolean; cdecl;
  IReplicatedSession_startTransactionPtr = function(this: IReplicatedSession; status: IStatus; transaction: ITransaction; number: Int64): IReplicatedTransaction; cdecl;
  IReplicatedSession_cleanupTransactionPtr = procedure(this: IReplicatedSession; status: IStatus; number: Int64); cdecl;
  IReplicatedSession_setSequencePtr = procedure(this: IReplicatedSession; status: IStatus; name: PAnsiChar; value: Int64); cdecl;
  IProfilerPlugin_initPtr = procedure(this: IProfilerPlugin; status: IStatus; attachment: IAttachment; ticksFrequency: UInt64); cdecl;
  IProfilerPlugin_startSessionPtr = function(this: IProfilerPlugin; status: IStatus; description: PAnsiChar; options: PAnsiChar; timestamp: TISC_TIMESTAMP_TZ): IProfilerSession; cdecl;
  IProfilerPlugin_flushPtr = procedure(this: IProfilerPlugin; status: IStatus); cdecl;
  IProfilerSession_getIdPtr = function(this: IProfilerSession): Int64; cdecl;
  IProfilerSession_getFlagsPtr = function(this: IProfilerSession): Cardinal; cdecl;
  IProfilerSession_cancelPtr = procedure(this: IProfilerSession; status: IStatus); cdecl;
  IProfilerSession_finishPtr = procedure(this: IProfilerSession; status: IStatus; timestamp: TISC_TIMESTAMP_TZ); cdecl;
  IProfilerSession_defineStatementPtr = procedure(this: IProfilerSession; status: IStatus; statementId: Int64; parentStatementId: Int64; type_: PAnsiChar; packageName: PAnsiChar; routineName: PAnsiChar; sqlText: PAnsiChar); cdecl;
  IProfilerSession_defineCursorPtr = procedure(this: IProfilerSession; statementId: Int64; cursorId: Cardinal; name: PAnsiChar; line: Cardinal; column: Cardinal); cdecl;
  IProfilerSession_defineRecordSourcePtr = procedure(this: IProfilerSession; statementId: Int64; cursorId: Cardinal; recSourceId: Cardinal; level: Cardinal; accessPath: PAnsiChar; parentRecSourceId: Cardinal); cdecl;
  IProfilerSession_onRequestStartPtr = procedure(this: IProfilerSession; status: IStatus; statementId: Int64; requestId: Int64; callerStatementId: Int64; callerRequestId: Int64; timestamp: TISC_TIMESTAMP_TZ); cdecl;
  IProfilerSession_onRequestFinishPtr = procedure(this: IProfilerSession; status: IStatus; statementId: Int64; requestId: Int64; timestamp: TISC_TIMESTAMP_TZ; stats: IProfilerStats); cdecl;
  IProfilerSession_beforePsqlLineColumnPtr = procedure(this: IProfilerSession; statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal); cdecl;
  IProfilerSession_afterPsqlLineColumnPtr = procedure(this: IProfilerSession; statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal; stats: IProfilerStats); cdecl;
  IProfilerSession_beforeRecordSourceOpenPtr = procedure(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal); cdecl;
  IProfilerSession_afterRecordSourceOpenPtr = procedure(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats); cdecl;
  IProfilerSession_beforeRecordSourceGetRecordPtr = procedure(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal); cdecl;
  IProfilerSession_afterRecordSourceGetRecordPtr = procedure(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats); cdecl;
  IProfilerStats_getElapsedTicksPtr = function(this: IProfilerStats): UInt64; cdecl;

  {$IFDEF WITH_RECORD_METHODS}
  PVersionedVTable = ^TVersionedVTable;
  TVersionedVTable = record
    SelfOffsetPtr: pointer;
  {$ELSE !WITH_RECORD_METHODS}
  TVersionedVTable = class
  public
  {$ENDIF !WITH_RECORD_METHODS}
    version: NativeInt;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TVersioned = record
    SelfOffsetPtr: pointer;
    vTable: PVersionedVTable;
    SelfObject: Pointer;
  {$ELSE !WITH_RECORD_METHODS}
  IVersioned = class
  public
    vTable: TVersionedVTable
  {$ENDIF !WITH_RECORD_METHODS}
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IVersionedImpl = class
  protected
    SelfOffsetPtr: pointer;
    vTable: pointer;
    SelfObject: Pointer;
  public
  {$ELSE !WITH_RECORD_METHODS}
  IVersionedImpl = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    constructor create;

  end;

  {$IFDEF WITH_RECORD_METHODS}
  PReferenceCountedVTable = ^TReferenceCountedVTable;
  TReferenceCountedVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TReferenceCountedVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    addRef: IReferenceCounted_addRefPtr;
    release: IReferenceCounted_releasePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TReferenceCounted = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IReferenceCounted = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure addRef();
    function release(): Integer;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IReferenceCountedImpl = class(IVersionedImpl)
  public
  {$ELSE !WITH_RECORD_METHODS}
  IReferenceCountedImpl = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PDisposableVTable = ^TDisposableVTable;
  TDisposableVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TDisposableVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    dispose: IDisposable_disposePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TDisposable = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IDisposable = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure dispose();
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IDisposableImpl = class(IVersionedImpl)
  public
  {$ELSE !WITH_RECORD_METHODS}
  IDisposableImpl = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure dispose(); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PStatusVTable = ^TStatusVTable;
  TStatusVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TStatusVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    init: IStatus_initPtr;
    getState: IStatus_getStatePtr;
    setErrors2: IStatus_setErrors2Ptr;
    setWarnings2: IStatus_setWarnings2Ptr;
    setErrors: IStatus_setErrorsPtr;
    setWarnings: IStatus_setWarningsPtr;
    getErrors: IStatus_getErrorsPtr;
    getWarnings: IStatus_getWarningsPtr;
    clone: IStatus_clonePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TStatus = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IStatus = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure init();
    function getState(): Cardinal;
    procedure setErrors2(length: Cardinal; value: PNativeInt);
    procedure setWarnings2(length: Cardinal; value: PNativeInt);
    procedure setErrors(value: PNativeInt);
    procedure setWarnings(value: PNativeInt);
    function getErrors(): PNativeInt;
    function getWarnings(): PNativeInt;
    function clone(): IStatus;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IStatusImpl = class(IDisposableImpl)
  public
    function AsIStatus: IStatus; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IStatusImpl = class(IStatus)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure init(); virtual; abstract;
    function getState(): Cardinal; virtual; abstract;
    procedure setErrors2(length: Cardinal; value: PNativeInt); virtual; abstract;
    procedure setWarnings2(length: Cardinal; value: PNativeInt); virtual; abstract;
    procedure setErrors(value: PNativeInt); virtual; abstract;
    procedure setWarnings(value: PNativeInt); virtual; abstract;
    function getErrors(): PNativeInt; virtual; abstract;
    function getWarnings(): PNativeInt; virtual; abstract;
    function clone(): IStatus; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PMasterVTable = ^TMasterVTable;
  TMasterVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TMasterVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getStatus: IMaster_getStatusPtr;
    getDispatcher: IMaster_getDispatcherPtr;
    getPluginManager: IMaster_getPluginManagerPtr;
    getTimerControl: IMaster_getTimerControlPtr;
    getDtc: IMaster_getDtcPtr;
    registerAttachment: IMaster_registerAttachmentPtr;
    registerTransaction: IMaster_registerTransactionPtr;
    getMetadataBuilder: IMaster_getMetadataBuilderPtr;
    serverMode: IMaster_serverModePtr;
    getUtilInterface: IMaster_getUtilInterfacePtr;
    getConfigManager: IMaster_getConfigManagerPtr;
    getProcessExiting: IMaster_getProcessExitingPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TMaster = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IMaster = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getStatus(): IStatus;
    function getDispatcher(): IProvider;
    function getPluginManager(): IPluginManager;
    function getTimerControl(): ITimerControl;
    function getDtc(): IDtc;
    function registerAttachment(provider: IProvider; attachment: IAttachment): IAttachment;
    function registerTransaction(attachment: IAttachment; transaction: ITransaction): ITransaction;
    function getMetadataBuilder(status: IStatus; fieldCount: Cardinal): IMetadataBuilder;
    function serverMode(mode: Integer): Integer;
    function getUtilInterface(): IUtil;
    function getConfigManager(): IConfigManager;
    function getProcessExiting(): Boolean;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IMasterImpl = class(IVersionedImpl)
  public
    function AsIMaster: IMaster; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IMasterImpl = class(IMaster)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getStatus(): IStatus; virtual; abstract;
    function getDispatcher(): IProvider; virtual; abstract;
    function getPluginManager(): IPluginManager; virtual; abstract;
    function getTimerControl(): ITimerControl; virtual; abstract;
    function getDtc(): IDtc; virtual; abstract;
    function registerAttachment(provider: IProvider; attachment: IAttachment): IAttachment; virtual; abstract;
    function registerTransaction(attachment: IAttachment; transaction: ITransaction): ITransaction; virtual; abstract;
    function getMetadataBuilder(status: IStatus; fieldCount: Cardinal): IMetadataBuilder; virtual; abstract;
    function serverMode(mode: Integer): Integer; virtual; abstract;
    function getUtilInterface(): IUtil; virtual; abstract;
    function getConfigManager(): IConfigManager; virtual; abstract;
    function getProcessExiting(): Boolean; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PPluginBaseVTable = ^TPluginBaseVTable;
  TPluginBaseVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TPluginBaseVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setOwner: IPluginBase_setOwnerPtr;
    getOwner: IPluginBase_getOwnerPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TPluginBase = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IPluginBase = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setOwner(r: IReferenceCounted);
    function getOwner(): IReferenceCounted;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IPluginBaseImpl = class(IReferenceCountedImpl)
  public
    function AsIPluginBase: IPluginBase; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IPluginBaseImpl = class(IPluginBase)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PPluginSetVTable = ^TPluginSetVTable;
  TPluginSetVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TPluginSetVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getName: IPluginSet_getNamePtr;
    getModuleName: IPluginSet_getModuleNamePtr;
    getPlugin: IPluginSet_getPluginPtr;
    next: IPluginSet_nextPtr;
    set_: IPluginSet_set_Ptr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TPluginSet = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IPluginSet = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getName(): PAnsiChar;
    function getModuleName(): PAnsiChar;
    function getPlugin(status: IStatus): IPluginBase;
    procedure next(status: IStatus);
    procedure set_(status: IStatus; s: PAnsiChar);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IPluginSetImpl = class(IReferenceCountedImpl)
  public
    function AsIPluginSet: IPluginSet; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IPluginSetImpl = class(IPluginSet)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getName(): PAnsiChar; virtual; abstract;
    function getModuleName(): PAnsiChar; virtual; abstract;
    function getPlugin(status: IStatus): IPluginBase; virtual; abstract;
    procedure next(status: IStatus); virtual; abstract;
    procedure set_(status: IStatus; s: PAnsiChar); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PConfigEntryVTable = ^TConfigEntryVTable;
  TConfigEntryVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TConfigEntryVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getName: IConfigEntry_getNamePtr;
    getValue: IConfigEntry_getValuePtr;
    getIntValue: IConfigEntry_getIntValuePtr;
    getBoolValue: IConfigEntry_getBoolValuePtr;
    getSubConfig: IConfigEntry_getSubConfigPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TConfigEntry = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IConfigEntry = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getName(): PAnsiChar;
    function getValue(): PAnsiChar;
    function getIntValue(): Int64;
    function getBoolValue(): Boolean;
    function getSubConfig(status: IStatus): IConfig;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IConfigEntryImpl = class(IReferenceCountedImpl)
  public
    function AsIConfigEntry: IConfigEntry; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IConfigEntryImpl = class(IConfigEntry)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getName(): PAnsiChar; virtual; abstract;
    function getValue(): PAnsiChar; virtual; abstract;
    function getIntValue(): Int64; virtual; abstract;
    function getBoolValue(): Boolean; virtual; abstract;
    function getSubConfig(status: IStatus): IConfig; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PConfigVTable = ^TConfigVTable;
  TConfigVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TConfigVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    find: IConfig_findPtr;
    findValue: IConfig_findValuePtr;
    findPos: IConfig_findPosPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TConfig = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IConfig = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function find(status: IStatus; name: PAnsiChar): IConfigEntry;
    function findValue(status: IStatus; name: PAnsiChar; value: PAnsiChar): IConfigEntry;
    function findPos(status: IStatus; name: PAnsiChar; pos: Cardinal): IConfigEntry;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IConfigImpl = class(IReferenceCountedImpl)
  public
    function AsIConfig: IConfig; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IConfigImpl = class(IConfig)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function find(status: IStatus; name: PAnsiChar): IConfigEntry; virtual; abstract;
    function findValue(status: IStatus; name: PAnsiChar; value: PAnsiChar): IConfigEntry; virtual; abstract;
    function findPos(status: IStatus; name: PAnsiChar; pos: Cardinal): IConfigEntry; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PFirebirdConfVTable = ^TFirebirdConfVTable;
  TFirebirdConfVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TFirebirdConfVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getKey: IFirebirdConf_getKeyPtr;
    asInteger: IFirebirdConf_asPInteger;
    asString: IFirebirdConf_asStringPtr;
    asBoolean: IFirebirdConf_asPBoolean;
    getVersion: IFirebirdConf_getVersionPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TFirebirdConf = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IFirebirdConf = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getKey(name: PAnsiChar): Cardinal;
    function asInteger(key: Cardinal): Int64;
    function asString(key: Cardinal): PAnsiChar;
    function asBoolean(key: Cardinal): Boolean;
    function getVersion(status: IStatus): Cardinal;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IFirebirdConfImpl = class(IReferenceCountedImpl)
  public
    function AsIFirebirdConf: IFirebirdConf; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IFirebirdConfImpl = class(IFirebirdConf)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getKey(name: PAnsiChar): Cardinal; virtual; abstract;
    function asInteger(key: Cardinal): Int64; virtual; abstract;
    function asString(key: Cardinal): PAnsiChar; virtual; abstract;
    function asBoolean(key: Cardinal): Boolean; virtual; abstract;
    function getVersion(status: IStatus): Cardinal; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PPluginConfigVTable = ^TPluginConfigVTable;
  TPluginConfigVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TPluginConfigVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getConfigFileName: IPluginConfig_getConfigFileNamePtr;
    getDefaultConfig: IPluginConfig_getDefaultConfigPtr;
    getFirebirdConf: IPluginConfig_getFirebirdConfPtr;
    setReleaseDelay: IPluginConfig_setReleaseDelayPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TPluginConfig = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IPluginConfig = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getConfigFileName(): PAnsiChar;
    function getDefaultConfig(status: IStatus): IConfig;
    function getFirebirdConf(status: IStatus): IFirebirdConf;
    procedure setReleaseDelay(status: IStatus; microSeconds: UInt64);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IPluginConfigImpl = class(IReferenceCountedImpl)
  public
    function AsIPluginConfig: IPluginConfig; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IPluginConfigImpl = class(IPluginConfig)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getConfigFileName(): PAnsiChar; virtual; abstract;
    function getDefaultConfig(status: IStatus): IConfig; virtual; abstract;
    function getFirebirdConf(status: IStatus): IFirebirdConf; virtual; abstract;
    procedure setReleaseDelay(status: IStatus; microSeconds: UInt64); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PPluginFactoryVTable = ^TPluginFactoryVTable;
  TPluginFactoryVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TPluginFactoryVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    createPlugin: IPluginFactory_createPluginPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TPluginFactory = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IPluginFactory = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function createPlugin(status: IStatus; factoryParameter: IPluginConfig): IPluginBase;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IPluginFactoryImpl = class(IVersionedImpl)
  public
    function AsIPluginFactory: IPluginFactory; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IPluginFactoryImpl = class(IPluginFactory)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function createPlugin(status: IStatus; factoryParameter: IPluginConfig): IPluginBase; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PPluginModuleVTable = ^TPluginModuleVTable;
  TPluginModuleVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TPluginModuleVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    doClean: IPluginModule_doCleanPtr;
    threadDetach: IPluginModule_threadDetachPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TPluginModule = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IPluginModule = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure doClean();
    procedure threadDetach();
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IPluginModuleImpl = class(IVersionedImpl)
  public
    function AsIPluginModule: IPluginModule; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IPluginModuleImpl = class(IPluginModule)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure doClean(); virtual; abstract;
    procedure threadDetach(); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PPluginManagerVTable = ^TPluginManagerVTable;
  TPluginManagerVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TPluginManagerVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    registerPluginFactory: IPluginManager_registerPluginFactoryPtr;
    registerModule: IPluginManager_registerModulePtr;
    unregisterModule: IPluginManager_unregisterModulePtr;
    getPlugins: IPluginManager_getPluginsPtr;
    getConfig: IPluginManager_getConfigPtr;
    releasePlugin: IPluginManager_releasePluginPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TPluginManager = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IPluginManager = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure registerPluginFactory(pluginType: Cardinal; defaultName: PAnsiChar; factory: IPluginFactory);
    procedure registerModule(cleanup: IPluginModule);
    procedure unregisterModule(cleanup: IPluginModule);
    function getPlugins(status: IStatus; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: IFirebirdConf): IPluginSet;
    function getConfig(status: IStatus; filename: PAnsiChar): IConfig;
    procedure releasePlugin(plugin: IPluginBase);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IPluginManagerImpl = class(IVersionedImpl)
  public
    function AsIPluginManager: IPluginManager; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IPluginManagerImpl = class(IPluginManager)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure registerPluginFactory(pluginType: Cardinal; defaultName: PAnsiChar; factory: IPluginFactory); virtual; abstract;
    procedure registerModule(cleanup: IPluginModule); virtual; abstract;
    procedure unregisterModule(cleanup: IPluginModule); virtual; abstract;
    function getPlugins(status: IStatus; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: IFirebirdConf): IPluginSet; virtual; abstract;
    function getConfig(status: IStatus; filename: PAnsiChar): IConfig; virtual; abstract;
    procedure releasePlugin(plugin: IPluginBase); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PCryptKeyVTable = ^TCryptKeyVTable;
  TCryptKeyVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TCryptKeyVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setSymmetric: ICryptKey_setSymmetricPtr;
    setAsymmetric: ICryptKey_setAsymmetricPtr;
    getEncryptKey: ICryptKey_getEncryptKeyPtr;
    getDecryptKey: ICryptKey_getDecryptKeyPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TCryptKey = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ICryptKey = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setSymmetric(status: IStatus; type_: PAnsiChar; keyLength: Cardinal; key: Pointer);
    procedure setAsymmetric(status: IStatus; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer);
    function getEncryptKey(length: PCardinal): Pointer;
    function getDecryptKey(length: PCardinal): Pointer;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ICryptKeyImpl = class(IVersionedImpl)
  public
    function AsICryptKey: ICryptKey; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ICryptKeyImpl = class(ICryptKey)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setSymmetric(status: IStatus; type_: PAnsiChar; keyLength: Cardinal; key: Pointer); virtual; abstract;
    procedure setAsymmetric(status: IStatus; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer); virtual; abstract;
    function getEncryptKey(length: PCardinal): Pointer; virtual; abstract;
    function getDecryptKey(length: PCardinal): Pointer; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PConfigManagerVTable = ^TConfigManagerVTable;
  TConfigManagerVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TConfigManagerVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getDirectory: IConfigManager_getDirectoryPtr;
    getFirebirdConf: IConfigManager_getFirebirdConfPtr;
    getDatabaseConf: IConfigManager_getDatabaseConfPtr;
    getPluginConfig: IConfigManager_getPluginConfigPtr;
    getInstallDirectory: IConfigManager_getInstallDirectoryPtr;
    getRootDirectory: IConfigManager_getRootDirectoryPtr;
    getDefaultSecurityDb: IConfigManager_getDefaultSecurityDbPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TConfigManager = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IConfigManager = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getDirectory(code: Cardinal): PAnsiChar;
    function getFirebirdConf(): IFirebirdConf;
    function getDatabaseConf(dbName: PAnsiChar): IFirebirdConf;
    function getPluginConfig(configuredPlugin: PAnsiChar): IConfig;
    function getInstallDirectory(): PAnsiChar;
    function getRootDirectory(): PAnsiChar;
    function getDefaultSecurityDb(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IConfigManagerImpl = class(IVersionedImpl)
  public
    function AsIConfigManager: IConfigManager; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IConfigManagerImpl = class(IConfigManager)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getDirectory(code: Cardinal): PAnsiChar; virtual; abstract;
    function getFirebirdConf(): IFirebirdConf; virtual; abstract;
    function getDatabaseConf(dbName: PAnsiChar): IFirebirdConf; virtual; abstract;
    function getPluginConfig(configuredPlugin: PAnsiChar): IConfig; virtual; abstract;
    function getInstallDirectory(): PAnsiChar; virtual; abstract;
    function getRootDirectory(): PAnsiChar; virtual; abstract;
    function getDefaultSecurityDb(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PEventCallbackVTable = ^TEventCallbackVTable;
  TEventCallbackVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TEventCallbackVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    eventCallbackFunction: IEventCallback_eventCallbackFunctionPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TEventCallback = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IEventCallback = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure eventCallbackFunction(length: Cardinal; events: PByte);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IEventCallbackImpl = class(IReferenceCountedImpl)
  public
    function AsIEventCallback: IEventCallback; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IEventCallbackImpl = class(IEventCallback)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure eventCallbackFunction(length: Cardinal; events: PByte); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PBlobVTable = ^TBlobVTable;
  TBlobVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TBlobVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getInfo: IBlob_getInfoPtr;
    getSegment: IBlob_getSegmentPtr;
    putSegment: IBlob_putSegmentPtr;
    deprecatedCancel: IBlob_deprecatedCancelPtr;
    deprecatedClose: IBlob_deprecatedClosePtr;
    seek: IBlob_seekPtr;
    cancel: IBlob_cancelPtr;
    close: IBlob_closePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TBlob = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IBlob = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
    function getSegment(status: IStatus; bufferLength: Cardinal; buffer: Pointer; segmentLength: PCardinal): Integer;
    procedure putSegment(status: IStatus; length: Cardinal; buffer: Pointer);
    procedure deprecatedCancel(status: IStatus);
    procedure deprecatedClose(status: IStatus);
    function seek(status: IStatus; mode: Integer; offset: Integer): Integer;
    procedure cancel(status: IStatus);
    procedure close(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IBlobImpl = class(IReferenceCountedImpl)
  public
    function AsIBlob: IBlob; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IBlobImpl = class(IBlob)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
    function getSegment(status: IStatus; bufferLength: Cardinal; buffer: Pointer; segmentLength: PCardinal): Integer; virtual; abstract;
    procedure putSegment(status: IStatus; length: Cardinal; buffer: Pointer); virtual; abstract;
    procedure deprecatedCancel(status: IStatus); virtual; abstract;
    procedure deprecatedClose(status: IStatus); virtual; abstract;
    function seek(status: IStatus; mode: Integer; offset: Integer): Integer; virtual; abstract;
    procedure cancel(status: IStatus); virtual; abstract;
    procedure close(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTransactionVTable = ^TTransactionVTable;
  TTransactionVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTransactionVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getInfo: ITransaction_getInfoPtr;
    prepare: ITransaction_preparePtr;
    deprecatedCommit: ITransaction_deprecatedCommitPtr;
    commitRetaining: ITransaction_commitRetainingPtr;
    deprecatedRollback: ITransaction_deprecatedRollbackPtr;
    rollbackRetaining: ITransaction_rollbackRetainingPtr;
    deprecatedDisconnect: ITransaction_deprecatedDisconnectPtr;
    join: ITransaction_joinPtr;
    validate: ITransaction_validatePtr;
    enterDtc: ITransaction_enterDtcPtr;
    commit: ITransaction_commitPtr;
    rollback: ITransaction_rollbackPtr;
    disconnect: ITransaction_disconnectPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTransaction = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  ITransaction = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
    procedure prepare(status: IStatus; msgLength: Cardinal; message: PByte);
    procedure deprecatedCommit(status: IStatus);
    procedure commitRetaining(status: IStatus);
    procedure deprecatedRollback(status: IStatus);
    procedure rollbackRetaining(status: IStatus);
    procedure deprecatedDisconnect(status: IStatus);
    function join(status: IStatus; transaction: ITransaction): ITransaction;
    function validate(status: IStatus; attachment: IAttachment): ITransaction;
    function enterDtc(status: IStatus): ITransaction;
    procedure commit(status: IStatus);
    procedure rollback(status: IStatus);
    procedure disconnect(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl = class(IReferenceCountedImpl)
  public
    function AsITransaction: ITransaction; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl = class(ITransaction)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
    procedure prepare(status: IStatus; msgLength: Cardinal; message: PByte); virtual; abstract;
    procedure deprecatedCommit(status: IStatus); virtual; abstract;
    procedure commitRetaining(status: IStatus); virtual; abstract;
    procedure deprecatedRollback(status: IStatus); virtual; abstract;
    procedure rollbackRetaining(status: IStatus); virtual; abstract;
    procedure deprecatedDisconnect(status: IStatus); virtual; abstract;
    function join(status: IStatus; transaction: ITransaction): ITransaction; virtual; abstract;
    function validate(status: IStatus; attachment: IAttachment): ITransaction; virtual; abstract;
    function enterDtc(status: IStatus): ITransaction; virtual; abstract;
    procedure commit(status: IStatus); virtual; abstract;
    procedure rollback(status: IStatus); virtual; abstract;
    procedure disconnect(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PMessageMetadataVTable = ^TMessageMetadataVTable;
  TMessageMetadataVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TMessageMetadataVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getCount: IMessageMetadata_getCountPtr;
    getField: IMessageMetadata_getFieldPtr;
    getRelation: IMessageMetadata_getRelationPtr;
    getOwner: IMessageMetadata_getOwnerPtr;
    getAlias: IMessageMetadata_getAliasPtr;
    getType: IMessageMetadata_getTypePtr;
    isNullable: IMessageMetadata_isNullablePtr;
    getSubType: IMessageMetadata_getSubTypePtr;
    getLength: IMessageMetadata_getLengthPtr;
    getScale: IMessageMetadata_getScalePtr;
    getCharSet: IMessageMetadata_getCharSetPtr;
    getOffset: IMessageMetadata_getOffsetPtr;
    getNullOffset: IMessageMetadata_getNullOffsetPtr;
    getBuilder: IMessageMetadata_getBuilderPtr;
    getMessageLength: IMessageMetadata_getMessageLengthPtr;
    getAlignment: IMessageMetadata_getAlignmentPtr;
    getAlignedLength: IMessageMetadata_getAlignedLengthPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TMessageMetadata = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IMessageMetadata = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getCount(status: IStatus): Cardinal;
    function getField(status: IStatus; index: Cardinal): PAnsiChar;
    function getRelation(status: IStatus; index: Cardinal): PAnsiChar;
    function getOwner(status: IStatus; index: Cardinal): PAnsiChar;
    function getAlias(status: IStatus; index: Cardinal): PAnsiChar;
    function getType(status: IStatus; index: Cardinal): Cardinal;
    function isNullable(status: IStatus; index: Cardinal): Boolean;
    function getSubType(status: IStatus; index: Cardinal): Integer;
    function getLength(status: IStatus; index: Cardinal): Cardinal;
    function getScale(status: IStatus; index: Cardinal): Integer;
    function getCharSet(status: IStatus; index: Cardinal): Cardinal;
    function getOffset(status: IStatus; index: Cardinal): Cardinal;
    function getNullOffset(status: IStatus; index: Cardinal): Cardinal;
    function getBuilder(status: IStatus): IMetadataBuilder;
    function getMessageLength(status: IStatus): Cardinal;
    function getAlignment(status: IStatus): Cardinal;
    function getAlignedLength(status: IStatus): Cardinal;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IMessageMetadataImpl = class(IReferenceCountedImpl)
  public
    function AsIMessageMetadata: IMessageMetadata; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IMessageMetadataImpl = class(IMessageMetadata)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getCount(status: IStatus): Cardinal; virtual; abstract;
    function getField(status: IStatus; index: Cardinal): PAnsiChar; virtual; abstract;
    function getRelation(status: IStatus; index: Cardinal): PAnsiChar; virtual; abstract;
    function getOwner(status: IStatus; index: Cardinal): PAnsiChar; virtual; abstract;
    function getAlias(status: IStatus; index: Cardinal): PAnsiChar; virtual; abstract;
    function getType(status: IStatus; index: Cardinal): Cardinal; virtual; abstract;
    function isNullable(status: IStatus; index: Cardinal): Boolean; virtual; abstract;
    function getSubType(status: IStatus; index: Cardinal): Integer; virtual; abstract;
    function getLength(status: IStatus; index: Cardinal): Cardinal; virtual; abstract;
    function getScale(status: IStatus; index: Cardinal): Integer; virtual; abstract;
    function getCharSet(status: IStatus; index: Cardinal): Cardinal; virtual; abstract;
    function getOffset(status: IStatus; index: Cardinal): Cardinal; virtual; abstract;
    function getNullOffset(status: IStatus; index: Cardinal): Cardinal; virtual; abstract;
    function getBuilder(status: IStatus): IMetadataBuilder; virtual; abstract;
    function getMessageLength(status: IStatus): Cardinal; virtual; abstract;
    function getAlignment(status: IStatus): Cardinal; virtual; abstract;
    function getAlignedLength(status: IStatus): Cardinal; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PMetadataBuilderVTable = ^TMetadataBuilderVTable;
  TMetadataBuilderVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TMetadataBuilderVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setType: IMetadataBuilder_setTypePtr;
    setSubType: IMetadataBuilder_setSubTypePtr;
    setLength: IMetadataBuilder_setLengthPtr;
    setCharSet: IMetadataBuilder_setCharSetPtr;
    setScale: IMetadataBuilder_setScalePtr;
    truncate: IMetadataBuilder_truncatePtr;
    moveNameToIndex: IMetadataBuilder_moveNameToIndexPtr;
    remove: IMetadataBuilder_removePtr;
    addField: IMetadataBuilder_addFieldPtr;
    getMetadata: IMetadataBuilder_getMetadataPtr;
    setField: IMetadataBuilder_setFieldPtr;
    setRelation: IMetadataBuilder_setRelationPtr;
    setOwner: IMetadataBuilder_setOwnerPtr;
    setAlias: IMetadataBuilder_setAliasPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TMetadataBuilder = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilder = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setType(status: IStatus; index: Cardinal; type_: Cardinal);
    procedure setSubType(status: IStatus; index: Cardinal; subType: Integer);
    procedure setLength(status: IStatus; index: Cardinal; length: Cardinal);
    procedure setCharSet(status: IStatus; index: Cardinal; charSet: Cardinal);
    procedure setScale(status: IStatus; index: Cardinal; scale: Integer);
    procedure truncate(status: IStatus; count: Cardinal);
    procedure moveNameToIndex(status: IStatus; name: PAnsiChar; index: Cardinal);
    procedure remove(status: IStatus; index: Cardinal);
    function addField(status: IStatus): Cardinal;
    function getMetadata(status: IStatus): IMessageMetadata;
    procedure setField(status: IStatus; index: Cardinal; field: PAnsiChar);
    procedure setRelation(status: IStatus; index: Cardinal; relation: PAnsiChar);
    procedure setOwner(status: IStatus; index: Cardinal; owner: PAnsiChar);
    procedure setAlias(status: IStatus; index: Cardinal; alias: PAnsiChar);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl = class(IReferenceCountedImpl)
  public
    function AsIMetadataBuilder: IMetadataBuilder; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl = class(IMetadataBuilder)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setType(status: IStatus; index: Cardinal; type_: Cardinal); virtual; abstract;
    procedure setSubType(status: IStatus; index: Cardinal; subType: Integer); virtual; abstract;
    procedure setLength(status: IStatus; index: Cardinal; length: Cardinal); virtual; abstract;
    procedure setCharSet(status: IStatus; index: Cardinal; charSet: Cardinal); virtual; abstract;
    procedure setScale(status: IStatus; index: Cardinal; scale: Integer); virtual; abstract;
    procedure truncate(status: IStatus; count: Cardinal); virtual; abstract;
    procedure moveNameToIndex(status: IStatus; name: PAnsiChar; index: Cardinal); virtual; abstract;
    procedure remove(status: IStatus; index: Cardinal); virtual; abstract;
    function addField(status: IStatus): Cardinal; virtual; abstract;
    function getMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    procedure setField(status: IStatus; index: Cardinal; field: PAnsiChar); virtual; abstract;
    procedure setRelation(status: IStatus; index: Cardinal; relation: PAnsiChar); virtual; abstract;
    procedure setOwner(status: IStatus; index: Cardinal; owner: PAnsiChar); virtual; abstract;
    procedure setAlias(status: IStatus; index: Cardinal; alias: PAnsiChar); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PResultSetVTable = ^TResultSetVTable;
  TResultSetVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TResultSetVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    fetchNext: IResultSet_fetchNextPtr;
    fetchPrior: IResultSet_fetchPriorPtr;
    fetchFirst: IResultSet_fetchFirstPtr;
    fetchLast: IResultSet_fetchLastPtr;
    fetchAbsolute: IResultSet_fetchAbsolutePtr;
    fetchRelative: IResultSet_fetchRelativePtr;
    isEof: IResultSet_isEofPtr;
    isBof: IResultSet_isBofPtr;
    getMetadata: IResultSet_getMetadataPtr;
    deprecatedClose: IResultSet_deprecatedClosePtr;
    setDelayedOutputFormat: IResultSet_setDelayedOutputFormatPtr;
    close: IResultSet_closePtr;
    getInfo: IResultSet_getInfoPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TResultSet = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IResultSet = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function fetchNext(status: IStatus; message: Pointer): Integer;
    function fetchPrior(status: IStatus; message: Pointer): Integer;
    function fetchFirst(status: IStatus; message: Pointer): Integer;
    function fetchLast(status: IStatus; message: Pointer): Integer;
    function fetchAbsolute(status: IStatus; position: Integer; message: Pointer): Integer;
    function fetchRelative(status: IStatus; offset: Integer; message: Pointer): Integer;
    function isEof(status: IStatus): Boolean;
    function isBof(status: IStatus): Boolean;
    function getMetadata(status: IStatus): IMessageMetadata;
    procedure deprecatedClose(status: IStatus);
    procedure setDelayedOutputFormat(status: IStatus; format: IMessageMetadata);
    procedure close(status: IStatus);
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IResultSetImpl = class(IReferenceCountedImpl)
  public
    function AsIResultSet: IResultSet; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IResultSetImpl = class(IResultSet)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function fetchNext(status: IStatus; message: Pointer): Integer; virtual; abstract;
    function fetchPrior(status: IStatus; message: Pointer): Integer; virtual; abstract;
    function fetchFirst(status: IStatus; message: Pointer): Integer; virtual; abstract;
    function fetchLast(status: IStatus; message: Pointer): Integer; virtual; abstract;
    function fetchAbsolute(status: IStatus; position: Integer; message: Pointer): Integer; virtual; abstract;
    function fetchRelative(status: IStatus; offset: Integer; message: Pointer): Integer; virtual; abstract;
    function isEof(status: IStatus): Boolean; virtual; abstract;
    function isBof(status: IStatus): Boolean; virtual; abstract;
    function getMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    procedure deprecatedClose(status: IStatus); virtual; abstract;
    procedure setDelayedOutputFormat(status: IStatus; format: IMessageMetadata); virtual; abstract;
    procedure close(status: IStatus); virtual; abstract;
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PStatementVTable = ^TStatementVTable;
  TStatementVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TStatementVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getInfo: IStatement_getInfoPtr;
    getType: IStatement_getTypePtr;
    getPlan: IStatement_getPlanPtr;
    getAffectedRecords: IStatement_getAffectedRecordsPtr;
    getInputMetadata: IStatement_getInputMetadataPtr;
    getOutputMetadata: IStatement_getOutputMetadataPtr;
    execute: IStatement_executePtr;
    openCursor: IStatement_openCursorPtr;
    setCursorName: IStatement_setCursorNamePtr;
    deprecatedFree: IStatement_deprecatedFreePtr;
    getFlags: IStatement_getFlagsPtr;
    getTimeout: IStatement_getTimeoutPtr;
    setTimeout: IStatement_setTimeoutPtr;
    createBatch: IStatement_createBatchPtr;
    free: IStatement_freePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TStatement = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IStatement = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
    function getType(status: IStatus): Cardinal;
    function getPlan(status: IStatus; detailed: Boolean): PAnsiChar;
    function getAffectedRecords(status: IStatus): UInt64;
    function getInputMetadata(status: IStatus): IMessageMetadata;
    function getOutputMetadata(status: IStatus): IMessageMetadata;
    function execute(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction;
    function openCursor(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; flags: Cardinal): IResultSet;
    procedure setCursorName(status: IStatus; name: PAnsiChar);
    procedure deprecatedFree(status: IStatus);
    function getFlags(status: IStatus): Cardinal;
    function getTimeout(status: IStatus): Cardinal;
    procedure setTimeout(status: IStatus; timeOut: Cardinal);
    function createBatch(status: IStatus; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch;
    procedure free(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IStatementImpl = class(IReferenceCountedImpl)
  public
    function AsIStatement: IStatement; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IStatementImpl = class(IStatement)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
    function getType(status: IStatus): Cardinal; virtual; abstract;
    function getPlan(status: IStatus; detailed: Boolean): PAnsiChar; virtual; abstract;
    function getAffectedRecords(status: IStatus): UInt64; virtual; abstract;
    function getInputMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    function getOutputMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    function execute(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction; virtual; abstract;
    function openCursor(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; flags: Cardinal): IResultSet; virtual; abstract;
    procedure setCursorName(status: IStatus; name: PAnsiChar); virtual; abstract;
    procedure deprecatedFree(status: IStatus); virtual; abstract;
    function getFlags(status: IStatus): Cardinal; virtual; abstract;
    function getTimeout(status: IStatus): Cardinal; virtual; abstract;
    procedure setTimeout(status: IStatus; timeOut: Cardinal); virtual; abstract;
    function createBatch(status: IStatus; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch; virtual; abstract;
    procedure free(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PBatchVTable = ^TBatchVTable;
  TBatchVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TBatchVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    add: IBatch_addPtr;
    addBlob: IBatch_addBlobPtr;
    appendBlobData: IBatch_appendBlobDataPtr;
    addBlobStream: IBatch_addBlobStreamPtr;
    registerBlob: IBatch_registerBlobPtr;
    execute: IBatch_executePtr;
    cancel: IBatch_cancelPtr;
    getBlobAlignment: IBatch_getBlobAlignmentPtr;
    getMetadata: IBatch_getMetadataPtr;
    setDefaultBpb: IBatch_setDefaultBpbPtr;
    deprecatedClose: IBatch_deprecatedClosePtr;
    close: IBatch_closePtr;
    getInfo: IBatch_getInfoPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TBatch = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IBatch = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure add(status: IStatus; count: Cardinal; inBuffer: Pointer);
    procedure addBlob(status: IStatus; length: Cardinal; inBuffer: Pointer; blobId: PISC_QUAD; parLength: Cardinal; par: PByte);
    procedure appendBlobData(status: IStatus; length: Cardinal; inBuffer: Pointer);
    procedure addBlobStream(status: IStatus; length: Cardinal; inBuffer: Pointer);
    procedure registerBlob(status: IStatus; existingBlob: PISC_QUAD; blobId: PISC_QUAD);
    function execute(status: IStatus; transaction: ITransaction): IBatchCompletionState;
    procedure cancel(status: IStatus);
    function getBlobAlignment(status: IStatus): Cardinal;
    function getMetadata(status: IStatus): IMessageMetadata;
    procedure setDefaultBpb(status: IStatus; parLength: Cardinal; par: PByte);
    procedure deprecatedClose(status: IStatus);
    procedure close(status: IStatus);
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IBatchImpl = class(IReferenceCountedImpl)
  public
    function AsIBatch: IBatch; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IBatchImpl = class(IBatch)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure add(status: IStatus; count: Cardinal; inBuffer: Pointer); virtual; abstract;
    procedure addBlob(status: IStatus; length: Cardinal; inBuffer: Pointer; blobId: PISC_QUAD; parLength: Cardinal; par: PByte); virtual; abstract;
    procedure appendBlobData(status: IStatus; length: Cardinal; inBuffer: Pointer); virtual; abstract;
    procedure addBlobStream(status: IStatus; length: Cardinal; inBuffer: Pointer); virtual; abstract;
    procedure registerBlob(status: IStatus; existingBlob: PISC_QUAD; blobId: PISC_QUAD); virtual; abstract;
    function execute(status: IStatus; transaction: ITransaction): IBatchCompletionState; virtual; abstract;
    procedure cancel(status: IStatus); virtual; abstract;
    function getBlobAlignment(status: IStatus): Cardinal; virtual; abstract;
    function getMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    procedure setDefaultBpb(status: IStatus; parLength: Cardinal; par: PByte); virtual; abstract;
    procedure deprecatedClose(status: IStatus); virtual; abstract;
    procedure close(status: IStatus); virtual; abstract;
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PBatchCompletionStateVTable = ^TBatchCompletionStateVTable;
  TBatchCompletionStateVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TBatchCompletionStateVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getSize: IBatchCompletionState_getSizePtr;
    getState: IBatchCompletionState_getStatePtr;
    findError: IBatchCompletionState_findErrorPtr;
    getStatus: IBatchCompletionState_getStatusPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TBatchCompletionState = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IBatchCompletionState = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getSize(status: IStatus): Cardinal;
    function getState(status: IStatus; pos: Cardinal): Integer;
    function findError(status: IStatus; pos: Cardinal): Cardinal;
    procedure getStatus(status: IStatus; to_: IStatus; pos: Cardinal);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IBatchCompletionStateImpl = class(IDisposableImpl)
  public
    function AsIBatchCompletionState: IBatchCompletionState; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IBatchCompletionStateImpl = class(IBatchCompletionState)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getSize(status: IStatus): Cardinal; virtual; abstract;
    function getState(status: IStatus; pos: Cardinal): Integer; virtual; abstract;
    function findError(status: IStatus; pos: Cardinal): Cardinal; virtual; abstract;
    procedure getStatus(status: IStatus; to_: IStatus; pos: Cardinal); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PReplicatorVTable = ^TReplicatorVTable;
  TReplicatorVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TReplicatorVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    process: IReplicator_processPtr;
    deprecatedClose: IReplicator_deprecatedClosePtr;
    close: IReplicator_closePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TReplicator = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IReplicator = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure process(status: IStatus; length: Cardinal; data: PByte);
    procedure deprecatedClose(status: IStatus);
    procedure close(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IReplicatorImpl = class(IReferenceCountedImpl)
  public
    function AsIReplicator: IReplicator; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatorImpl = class(IReplicator)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure process(status: IStatus; length: Cardinal; data: PByte); virtual; abstract;
    procedure deprecatedClose(status: IStatus); virtual; abstract;
    procedure close(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PRequestVTable = ^TRequestVTable;
  TRequestVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TRequestVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    receive: IRequest_receivePtr;
    send: IRequest_sendPtr;
    getInfo: IRequest_getInfoPtr;
    start: IRequest_startPtr;
    startAndSend: IRequest_startAndSendPtr;
    unwind: IRequest_unwindPtr;
    deprecatedFree: IRequest_deprecatedFreePtr;
    free: IRequest_freePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TRequest = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IRequest = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure receive(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
    procedure send(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
    procedure getInfo(status: IStatus; level: Integer; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
    procedure start(status: IStatus; tra: ITransaction; level: Integer);
    procedure startAndSend(status: IStatus; tra: ITransaction; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
    procedure unwind(status: IStatus; level: Integer);
    procedure deprecatedFree(status: IStatus);
    procedure free(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IRequestImpl = class(IReferenceCountedImpl)
  public
    function AsIRequest: IRequest; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IRequestImpl = class(IRequest)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure receive(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); virtual; abstract;
    procedure send(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); virtual; abstract;
    procedure getInfo(status: IStatus; level: Integer; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
    procedure start(status: IStatus; tra: ITransaction; level: Integer); virtual; abstract;
    procedure startAndSend(status: IStatus; tra: ITransaction; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); virtual; abstract;
    procedure unwind(status: IStatus; level: Integer); virtual; abstract;
    procedure deprecatedFree(status: IStatus); virtual; abstract;
    procedure free(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PEventsVTable = ^TEventsVTable;
  TEventsVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TEventsVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    deprecatedCancel: IEvents_deprecatedCancelPtr;
    cancel: IEvents_cancelPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TEvents = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IEvents = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure deprecatedCancel(status: IStatus);
    procedure cancel(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IEventsImpl = class(IReferenceCountedImpl)
  public
    function AsIEvents: IEvents; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IEventsImpl = class(IEvents)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure deprecatedCancel(status: IStatus); virtual; abstract;
    procedure cancel(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PAttachmentVTable = ^TAttachmentVTable;
  TAttachmentVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TAttachmentVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getInfo: IAttachment_getInfoPtr;
    startTransaction: IAttachment_startTransactionPtr;
    reconnectTransaction: IAttachment_reconnectTransactionPtr;
    compileRequest: IAttachment_compileRequestPtr;
    transactRequest: IAttachment_transactRequestPtr;
    createBlob: IAttachment_createBlobPtr;
    openBlob: IAttachment_openBlobPtr;
    getSlice: IAttachment_getSlicePtr;
    putSlice: IAttachment_putSlicePtr;
    executeDyn: IAttachment_executeDynPtr;
    prepare: IAttachment_preparePtr;
    execute: IAttachment_executePtr;
    openCursor: IAttachment_openCursorPtr;
    queEvents: IAttachment_queEventsPtr;
    cancelOperation: IAttachment_cancelOperationPtr;
    ping: IAttachment_pingPtr;
    deprecatedDetach: IAttachment_deprecatedDetachPtr;
    deprecatedDropDatabase: IAttachment_deprecatedDropDatabasePtr;
    getIdleTimeout: IAttachment_getIdleTimeoutPtr;
    setIdleTimeout: IAttachment_setIdleTimeoutPtr;
    getStatementTimeout: IAttachment_getStatementTimeoutPtr;
    setStatementTimeout: IAttachment_setStatementTimeoutPtr;
    createBatch: IAttachment_createBatchPtr;
    createReplicator: IAttachment_createReplicatorPtr;
    detach: IAttachment_detachPtr;
    dropDatabase: IAttachment_dropDatabasePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TAttachment = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IAttachment = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
    function startTransaction(status: IStatus; tpbLength: Cardinal; tpb: PByte): ITransaction;
    function reconnectTransaction(status: IStatus; length: Cardinal; id: PByte): ITransaction;
    function compileRequest(status: IStatus; blrLength: Cardinal; blr: PByte): IRequest;
    procedure transactRequest(status: IStatus; transaction: ITransaction; blrLength: Cardinal; blr: PByte; inMsgLength: Cardinal; inMsg: PByte; outMsgLength: Cardinal; outMsg: PByte);
    function createBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob;
    function openBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob;
    function getSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte): Integer;
    procedure putSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte);
    procedure executeDyn(status: IStatus; transaction: ITransaction; length: Cardinal; dyn: PByte);
    function prepare(status: IStatus; tra: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): IStatement;
    function execute(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction;
    function openCursor(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): IResultSet;
    function queEvents(status: IStatus; callback: IEventCallback; length: Cardinal; events: PByte): IEvents;
    procedure cancelOperation(status: IStatus; option: Integer);
    procedure ping(status: IStatus);
    procedure deprecatedDetach(status: IStatus);
    procedure deprecatedDropDatabase(status: IStatus);
    function getIdleTimeout(status: IStatus): Cardinal;
    procedure setIdleTimeout(status: IStatus; timeOut: Cardinal);
    function getStatementTimeout(status: IStatus): Cardinal;
    procedure setStatementTimeout(status: IStatus; timeOut: Cardinal);
    function createBatch(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch;
    function createReplicator(status: IStatus): IReplicator;
    procedure detach(status: IStatus);
    procedure dropDatabase(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl = class(IReferenceCountedImpl)
  public
    function AsIAttachment: IAttachment; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl = class(IAttachment)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
    function startTransaction(status: IStatus; tpbLength: Cardinal; tpb: PByte): ITransaction; virtual; abstract;
    function reconnectTransaction(status: IStatus; length: Cardinal; id: PByte): ITransaction; virtual; abstract;
    function compileRequest(status: IStatus; blrLength: Cardinal; blr: PByte): IRequest; virtual; abstract;
    procedure transactRequest(status: IStatus; transaction: ITransaction; blrLength: Cardinal; blr: PByte; inMsgLength: Cardinal; inMsg: PByte; outMsgLength: Cardinal; outMsg: PByte); virtual; abstract;
    function createBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob; virtual; abstract;
    function openBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob; virtual; abstract;
    function getSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte): Integer; virtual; abstract;
    procedure putSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte); virtual; abstract;
    procedure executeDyn(status: IStatus; transaction: ITransaction; length: Cardinal; dyn: PByte); virtual; abstract;
    function prepare(status: IStatus; tra: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): IStatement; virtual; abstract;
    function execute(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction; virtual; abstract;
    function openCursor(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): IResultSet; virtual; abstract;
    function queEvents(status: IStatus; callback: IEventCallback; length: Cardinal; events: PByte): IEvents; virtual; abstract;
    procedure cancelOperation(status: IStatus; option: Integer); virtual; abstract;
    procedure ping(status: IStatus); virtual; abstract;
    procedure deprecatedDetach(status: IStatus); virtual; abstract;
    procedure deprecatedDropDatabase(status: IStatus); virtual; abstract;
    function getIdleTimeout(status: IStatus): Cardinal; virtual; abstract;
    procedure setIdleTimeout(status: IStatus; timeOut: Cardinal); virtual; abstract;
    function getStatementTimeout(status: IStatus): Cardinal; virtual; abstract;
    procedure setStatementTimeout(status: IStatus; timeOut: Cardinal); virtual; abstract;
    function createBatch(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch; virtual; abstract;
    function createReplicator(status: IStatus): IReplicator; virtual; abstract;
    procedure detach(status: IStatus); virtual; abstract;
    procedure dropDatabase(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PServiceVTable = ^TServiceVTable;
  TServiceVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TServiceVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    deprecatedDetach: IService_deprecatedDetachPtr;
    query: IService_queryPtr;
    start: IService_startPtr;
    detach: IService_detachPtr;
    cancel: IService_cancelPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TService = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IService = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure deprecatedDetach(status: IStatus);
    procedure query(status: IStatus; sendLength: Cardinal; sendItems: PByte; receiveLength: Cardinal; receiveItems: PByte; bufferLength: Cardinal; buffer: PByte);
    procedure start(status: IStatus; spbLength: Cardinal; spb: PByte);
    procedure detach(status: IStatus);
    procedure cancel(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IServiceImpl = class(IReferenceCountedImpl)
  public
    function AsIService: IService; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IServiceImpl = class(IService)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure deprecatedDetach(status: IStatus); virtual; abstract;
    procedure query(status: IStatus; sendLength: Cardinal; sendItems: PByte; receiveLength: Cardinal; receiveItems: PByte; bufferLength: Cardinal; buffer: PByte); virtual; abstract;
    procedure start(status: IStatus; spbLength: Cardinal; spb: PByte); virtual; abstract;
    procedure detach(status: IStatus); virtual; abstract;
    procedure cancel(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PProviderVTable = ^TProviderVTable;
  TProviderVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TProviderVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    attachDatabase: IProvider_attachDatabasePtr;
    createDatabase: IProvider_createDatabasePtr;
    attachServiceManager: IProvider_attachServiceManagerPtr;
    shutdown: IProvider_shutdownPtr;
    setDbCryptCallback: IProvider_setDbCryptCallbackPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TProvider = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IProvider = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function attachDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment;
    function createDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment;
    function attachServiceManager(status: IStatus; service: PAnsiChar; spbLength: Cardinal; spb: PByte): IService;
    procedure shutdown(status: IStatus; timeout: Cardinal; reason: Integer);
    procedure setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IProviderImpl = class(IPluginBaseImpl)
  public
    function AsIProvider: IProvider; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IProviderImpl = class(IProvider)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function attachDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment; virtual; abstract;
    function createDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment; virtual; abstract;
    function attachServiceManager(status: IStatus; service: PAnsiChar; spbLength: Cardinal; spb: PByte): IService; virtual; abstract;
    procedure shutdown(status: IStatus; timeout: Cardinal; reason: Integer); virtual; abstract;
    procedure setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PDtcStartVTable = ^TDtcStartVTable;
  TDtcStartVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TDtcStartVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    addAttachment: IDtcStart_addAttachmentPtr;
    addWithTpb: IDtcStart_addWithTpbPtr;
    start: IDtcStart_startPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TDtcStart = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IDtcStart = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure addAttachment(status: IStatus; att: IAttachment);
    procedure addWithTpb(status: IStatus; att: IAttachment; length: Cardinal; tpb: PByte);
    function start(status: IStatus): ITransaction;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IDtcStartImpl = class(IDisposableImpl)
  public
    function AsIDtcStart: IDtcStart; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IDtcStartImpl = class(IDtcStart)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure addAttachment(status: IStatus; att: IAttachment); virtual; abstract;
    procedure addWithTpb(status: IStatus; att: IAttachment; length: Cardinal; tpb: PByte); virtual; abstract;
    function start(status: IStatus): ITransaction; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PDtcVTable = ^TDtcVTable;
  TDtcVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TDtcVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    join: IDtc_joinPtr;
    startBuilder: IDtc_startBuilderPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TDtc = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IDtc = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function join(status: IStatus; one: ITransaction; two: ITransaction): ITransaction;
    function startBuilder(status: IStatus): IDtcStart;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IDtcImpl = class(IVersionedImpl)
  public
    function AsIDtc: IDtc; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IDtcImpl = class(IDtc)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function join(status: IStatus; one: ITransaction; two: ITransaction): ITransaction; virtual; abstract;
    function startBuilder(status: IStatus): IDtcStart; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PAuthVTable = ^TAuthVTable;
  TAuthVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TAuthVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TAuth = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IAuth = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IAuthImpl = class(IPluginBaseImpl)
  public
    function AsIAuth: IAuth; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IAuthImpl = class(IAuth)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PWriterVTable = ^TWriterVTable;
  TWriterVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TWriterVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    reset: IWriter_resetPtr;
    add: IWriter_addPtr;
    setType: IWriter_setTypePtr;
    setDb: IWriter_setDbPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TWriter = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IWriter = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure reset();
    procedure add(status: IStatus; name: PAnsiChar);
    procedure setType(status: IStatus; value: PAnsiChar);
    procedure setDb(status: IStatus; value: PAnsiChar);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IWriterImpl = class(IVersionedImpl)
  public
    function AsIWriter: IWriter; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IWriterImpl = class(IWriter)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure reset(); virtual; abstract;
    procedure add(status: IStatus; name: PAnsiChar); virtual; abstract;
    procedure setType(status: IStatus; value: PAnsiChar); virtual; abstract;
    procedure setDb(status: IStatus; value: PAnsiChar); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PServerBlockVTable = ^TServerBlockVTable;
  TServerBlockVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TServerBlockVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getLogin: IServerBlock_getLoginPtr;
    getData: IServerBlock_getDataPtr;
    putData: IServerBlock_putDataPtr;
    newKey: IServerBlock_newKeyPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TServerBlock = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IServerBlock = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getLogin(): PAnsiChar;
    function getData(length: PCardinal): PByte;
    procedure putData(status: IStatus; length: Cardinal; data: Pointer);
    function newKey(status: IStatus): ICryptKey;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IServerBlockImpl = class(IVersionedImpl)
  public
    function AsIServerBlock: IServerBlock; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IServerBlockImpl = class(IServerBlock)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getLogin(): PAnsiChar; virtual; abstract;
    function getData(length: PCardinal): PByte; virtual; abstract;
    procedure putData(status: IStatus; length: Cardinal; data: Pointer); virtual; abstract;
    function newKey(status: IStatus): ICryptKey; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PClientBlockVTable = ^TClientBlockVTable;
  TClientBlockVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TClientBlockVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getLogin: IClientBlock_getLoginPtr;
    getPassword: IClientBlock_getPasswordPtr;
    getData: IClientBlock_getDataPtr;
    putData: IClientBlock_putDataPtr;
    newKey: IClientBlock_newKeyPtr;
    getAuthBlock: IClientBlock_getAuthBlockPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TClientBlock = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IClientBlock = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getLogin(): PAnsiChar;
    function getPassword(): PAnsiChar;
    function getData(length: PCardinal): PByte;
    procedure putData(status: IStatus; length: Cardinal; data: Pointer);
    function newKey(status: IStatus): ICryptKey;
    function getAuthBlock(status: IStatus): IAuthBlock;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IClientBlockImpl = class(IReferenceCountedImpl)
  public
    function AsIClientBlock: IClientBlock; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IClientBlockImpl = class(IClientBlock)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getLogin(): PAnsiChar; virtual; abstract;
    function getPassword(): PAnsiChar; virtual; abstract;
    function getData(length: PCardinal): PByte; virtual; abstract;
    procedure putData(status: IStatus; length: Cardinal; data: Pointer); virtual; abstract;
    function newKey(status: IStatus): ICryptKey; virtual; abstract;
    function getAuthBlock(status: IStatus): IAuthBlock; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PServerVTable = ^TServerVTable;
  TServerVTable = record
    AuthVTable: TAuthVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TServerVTable = class(TAuthVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    authenticate: IServer_authenticatePtr;
    setDbCryptCallback: IServer_setDbCryptCallbackPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TServer = record
    Auth: TAuth;
  {$ELSE !WITH_RECORD_METHODS}
  IServer = class(IAuth)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function authenticate(status: IStatus; sBlock: IServerBlock; writerInterface: IWriter): Integer;
    procedure setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IServerImpl = class(IAuthImpl)
  public
    function AsIServer: IServer; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IServerImpl = class(IServer)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function authenticate(status: IStatus; sBlock: IServerBlock; writerInterface: IWriter): Integer; virtual; abstract;
    procedure setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PClientVTable = ^TClientVTable;
  TClientVTable = record
    AuthVTable: TAuthVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TClientVTable = class(TAuthVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    authenticate: IClient_authenticatePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TClient = record
    Auth: TAuth;
  {$ELSE !WITH_RECORD_METHODS}
  IClient = class(IAuth)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function authenticate(status: IStatus; cBlock: IClientBlock): Integer;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IClientImpl = class(IAuthImpl)
  public
    function AsIClient: IClient; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IClientImpl = class(IClient)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function authenticate(status: IStatus; cBlock: IClientBlock): Integer; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PUserFieldVTable = ^TUserFieldVTable;
  TUserFieldVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TUserFieldVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    entered: IUserField_enteredPtr;
    specified: IUserField_specifiedPtr;
    setEntered: IUserField_setEnteredPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TUserField = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IUserField = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function entered(): Integer;
    function specified(): Integer;
    procedure setEntered(status: IStatus; newValue: Integer);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IUserFieldImpl = class(IVersionedImpl)
  public
    function AsIUserField: IUserField; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IUserFieldImpl = class(IUserField)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function entered(): Integer; virtual; abstract;
    function specified(): Integer; virtual; abstract;
    procedure setEntered(status: IStatus; newValue: Integer); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PCharUserFieldVTable = ^TCharUserFieldVTable;
  TCharUserFieldVTable = record
    UserFieldVTable: TUserFieldVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TCharUserFieldVTable = class(TUserFieldVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    get: ICharUserField_getPtr;
    set_: ICharUserField_set_Ptr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TCharUserField = record
    UserField: TUserField;
  {$ELSE !WITH_RECORD_METHODS}
  ICharUserField = class(IUserField)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function get(): PAnsiChar;
    procedure set_(status: IStatus; newValue: PAnsiChar);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ICharUserFieldImpl = class(IUserFieldImpl)
  public
    function AsICharUserField: ICharUserField; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ICharUserFieldImpl = class(ICharUserField)
  public
    function entered(): Integer; virtual; abstract;
    function specified(): Integer; virtual; abstract;
    procedure setEntered(status: IStatus; newValue: Integer); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function get(): PAnsiChar; virtual; abstract;
    procedure set_(status: IStatus; newValue: PAnsiChar); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PIntUserFieldVTable = ^TIntUserFieldVTable;
  TIntUserFieldVTable = record
    UserFieldVTable: TUserFieldVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TIntUserFieldVTable = class(TUserFieldVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    get: IIntUserField_getPtr;
    set_: IIntUserField_set_Ptr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TIntUserField = record
    UserField: TUserField;
  {$ELSE !WITH_RECORD_METHODS}
  IIntUserField = class(IUserField)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function get(): Integer;
    procedure set_(status: IStatus; newValue: Integer);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IIntUserFieldImpl = class(IUserFieldImpl)
  public
    function AsIIntUserField: IIntUserField; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IIntUserFieldImpl = class(IIntUserField)
  public
    function entered(): Integer; virtual; abstract;
    function specified(): Integer; virtual; abstract;
    procedure setEntered(status: IStatus; newValue: Integer); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function get(): Integer; virtual; abstract;
    procedure set_(status: IStatus; newValue: Integer); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PUserVTable = ^TUserVTable;
  TUserVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TUserVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    operation: IUser_operationPtr;
    userName: IUser_userNamePtr;
    password: IUser_passwordPtr;
    firstName: IUser_firstNamePtr;
    lastName: IUser_lastNamePtr;
    middleName: IUser_middleNamePtr;
    comment: IUser_commentPtr;
    attributes: IUser_attributesPtr;
    active: IUser_activePtr;
    admin: IUser_adminPtr;
    clear: IUser_clearPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TUser = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IUser = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function operation(): Cardinal;
    function userName(): ICharUserField;
    function password(): ICharUserField;
    function firstName(): ICharUserField;
    function lastName(): ICharUserField;
    function middleName(): ICharUserField;
    function comment(): ICharUserField;
    function attributes(): ICharUserField;
    function active(): IIntUserField;
    function admin(): IIntUserField;
    procedure clear(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IUserImpl = class(IVersionedImpl)
  public
    function AsIUser: IUser; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IUserImpl = class(IUser)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function operation(): Cardinal; virtual; abstract;
    function userName(): ICharUserField; virtual; abstract;
    function password(): ICharUserField; virtual; abstract;
    function firstName(): ICharUserField; virtual; abstract;
    function lastName(): ICharUserField; virtual; abstract;
    function middleName(): ICharUserField; virtual; abstract;
    function comment(): ICharUserField; virtual; abstract;
    function attributes(): ICharUserField; virtual; abstract;
    function active(): IIntUserField; virtual; abstract;
    function admin(): IIntUserField; virtual; abstract;
    procedure clear(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PListUsersVTable = ^TListUsersVTable;
  TListUsersVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TListUsersVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    list: IListUsers_listPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TListUsers = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IListUsers = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure list(status: IStatus; user: IUser);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IListUsersImpl = class(IVersionedImpl)
  public
    function AsIListUsers: IListUsers; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IListUsersImpl = class(IListUsers)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure list(status: IStatus; user: IUser); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PLogonInfoVTable = ^TLogonInfoVTable;
  TLogonInfoVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TLogonInfoVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    name: ILogonInfo_namePtr;
    role: ILogonInfo_rolePtr;
    networkProtocol: ILogonInfo_networkProtocolPtr;
    remoteAddress: ILogonInfo_remoteAddressPtr;
    authBlock: ILogonInfo_authBlockPtr;
    attachment: ILogonInfo_attachmentPtr;
    transaction: ILogonInfo_transactionPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TLogonInfo = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ILogonInfo = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function name(): PAnsiChar;
    function role(): PAnsiChar;
    function networkProtocol(): PAnsiChar;
    function remoteAddress(): PAnsiChar;
    function authBlock(length: PCardinal): PByte;
    function attachment(status: IStatus): IAttachment;
    function transaction(status: IStatus): ITransaction;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ILogonInfoImpl = class(IVersionedImpl)
  public
    function AsILogonInfo: ILogonInfo; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ILogonInfoImpl = class(ILogonInfo)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function name(): PAnsiChar; virtual; abstract;
    function role(): PAnsiChar; virtual; abstract;
    function networkProtocol(): PAnsiChar; virtual; abstract;
    function remoteAddress(): PAnsiChar; virtual; abstract;
    function authBlock(length: PCardinal): PByte; virtual; abstract;
    function attachment(status: IStatus): IAttachment; virtual; abstract;
    function transaction(status: IStatus): ITransaction; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PManagementVTable = ^TManagementVTable;
  TManagementVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TManagementVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    start: IManagement_startPtr;
    execute: IManagement_executePtr;
    commit: IManagement_commitPtr;
    rollback: IManagement_rollbackPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TManagement = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IManagement = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure start(status: IStatus; logonInfo: ILogonInfo);
    function execute(status: IStatus; user: IUser; callback: IListUsers): Integer;
    procedure commit(status: IStatus);
    procedure rollback(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IManagementImpl = class(IPluginBaseImpl)
  public
    function AsIManagement: IManagement; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IManagementImpl = class(IManagement)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure start(status: IStatus; logonInfo: ILogonInfo); virtual; abstract;
    function execute(status: IStatus; user: IUser; callback: IListUsers): Integer; virtual; abstract;
    procedure commit(status: IStatus); virtual; abstract;
    procedure rollback(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PAuthBlockVTable = ^TAuthBlockVTable;
  TAuthBlockVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TAuthBlockVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getType: IAuthBlock_getTypePtr;
    getName: IAuthBlock_getNamePtr;
    getPlugin: IAuthBlock_getPluginPtr;
    getSecurityDb: IAuthBlock_getSecurityDbPtr;
    getOriginalPlugin: IAuthBlock_getOriginalPluginPtr;
    next: IAuthBlock_nextPtr;
    first: IAuthBlock_firstPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TAuthBlock = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IAuthBlock = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getType(): PAnsiChar;
    function getName(): PAnsiChar;
    function getPlugin(): PAnsiChar;
    function getSecurityDb(): PAnsiChar;
    function getOriginalPlugin(): PAnsiChar;
    function next(status: IStatus): Boolean;
    function first(status: IStatus): Boolean;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IAuthBlockImpl = class(IVersionedImpl)
  public
    function AsIAuthBlock: IAuthBlock; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IAuthBlockImpl = class(IAuthBlock)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getType(): PAnsiChar; virtual; abstract;
    function getName(): PAnsiChar; virtual; abstract;
    function getPlugin(): PAnsiChar; virtual; abstract;
    function getSecurityDb(): PAnsiChar; virtual; abstract;
    function getOriginalPlugin(): PAnsiChar; virtual; abstract;
    function next(status: IStatus): Boolean; virtual; abstract;
    function first(status: IStatus): Boolean; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PWireCryptPluginVTable = ^TWireCryptPluginVTable;
  TWireCryptPluginVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TWireCryptPluginVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getKnownTypes: IWireCryptPlugin_getKnownTypesPtr;
    setKey: IWireCryptPlugin_setKeyPtr;
    encrypt: IWireCryptPlugin_encryptPtr;
    decrypt: IWireCryptPlugin_decryptPtr;
    getSpecificData: IWireCryptPlugin_getSpecificDataPtr;
    setSpecificData: IWireCryptPlugin_setSpecificDataPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TWireCryptPlugin = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IWireCryptPlugin = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getKnownTypes(status: IStatus): PAnsiChar;
    procedure setKey(status: IStatus; key: ICryptKey);
    procedure encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
    procedure decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
    function getSpecificData(status: IStatus; keyType: PAnsiChar; length: PCardinal): PByte;
    procedure setSpecificData(status: IStatus; keyType: PAnsiChar; length: Cardinal; data: PByte);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl = class(IPluginBaseImpl)
  public
    function AsIWireCryptPlugin: IWireCryptPlugin; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl = class(IWireCryptPlugin)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getKnownTypes(status: IStatus): PAnsiChar; virtual; abstract;
    procedure setKey(status: IStatus; key: ICryptKey); virtual; abstract;
    procedure encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
    procedure decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
    function getSpecificData(status: IStatus; keyType: PAnsiChar; length: PCardinal): PByte; virtual; abstract;
    procedure setSpecificData(status: IStatus; keyType: PAnsiChar; length: Cardinal; data: PByte); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PCryptKeyCallbackVTable = ^TCryptKeyCallbackVTable;
  TCryptKeyCallbackVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TCryptKeyCallbackVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    callback: ICryptKeyCallback_callbackPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TCryptKeyCallback = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ICryptKeyCallback = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function callback(dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ICryptKeyCallbackImpl = class(IVersionedImpl)
  public
    function AsICryptKeyCallback: ICryptKeyCallback; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ICryptKeyCallbackImpl = class(ICryptKeyCallback)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function callback(dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PKeyHolderPluginVTable = ^TKeyHolderPluginVTable;
  TKeyHolderPluginVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TKeyHolderPluginVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    keyCallback: IKeyHolderPlugin_keyCallbackPtr;
    keyHandle: IKeyHolderPlugin_keyHandlePtr;
    useOnlyOwnKeys: IKeyHolderPlugin_useOnlyOwnKeysPtr;
    chainHandle: IKeyHolderPlugin_chainHandlePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TKeyHolderPlugin = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IKeyHolderPlugin = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function keyCallback(status: IStatus; callback: ICryptKeyCallback): Integer;
    function keyHandle(status: IStatus; keyName: PAnsiChar): ICryptKeyCallback;
    function useOnlyOwnKeys(status: IStatus): Boolean;
    function chainHandle(status: IStatus): ICryptKeyCallback;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IKeyHolderPluginImpl = class(IPluginBaseImpl)
  public
    function AsIKeyHolderPlugin: IKeyHolderPlugin; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IKeyHolderPluginImpl = class(IKeyHolderPlugin)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function keyCallback(status: IStatus; callback: ICryptKeyCallback): Integer; virtual; abstract;
    function keyHandle(status: IStatus; keyName: PAnsiChar): ICryptKeyCallback; virtual; abstract;
    function useOnlyOwnKeys(status: IStatus): Boolean; virtual; abstract;
    function chainHandle(status: IStatus): ICryptKeyCallback; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PDbCryptInfoVTable = ^TDbCryptInfoVTable;
  TDbCryptInfoVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TDbCryptInfoVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getDatabaseFullPath: IDbCryptInfo_getDatabaseFullPathPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TDbCryptInfo = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  IDbCryptInfo = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getDatabaseFullPath(status: IStatus): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IDbCryptInfoImpl = class(IReferenceCountedImpl)
  public
    function AsIDbCryptInfo: IDbCryptInfo; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IDbCryptInfoImpl = class(IDbCryptInfo)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getDatabaseFullPath(status: IStatus): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PDbCryptPluginVTable = ^TDbCryptPluginVTable;
  TDbCryptPluginVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TDbCryptPluginVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setKey: IDbCryptPlugin_setKeyPtr;
    encrypt: IDbCryptPlugin_encryptPtr;
    decrypt: IDbCryptPlugin_decryptPtr;
    setInfo: IDbCryptPlugin_setInfoPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TDbCryptPlugin = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IDbCryptPlugin = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setKey(status: IStatus; length: Cardinal; sources: PIKeyHolderPlugin; keyName: PAnsiChar);
    procedure encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
    procedure decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
    procedure setInfo(status: IStatus; info: IDbCryptInfo);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl = class(IPluginBaseImpl)
  public
    function AsIDbCryptPlugin: IDbCryptPlugin; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl = class(IDbCryptPlugin)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setKey(status: IStatus; length: Cardinal; sources: PIKeyHolderPlugin; keyName: PAnsiChar); virtual; abstract;
    procedure encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
    procedure decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
    procedure setInfo(status: IStatus; info: IDbCryptInfo); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PExternalContextVTable = ^TExternalContextVTable;
  TExternalContextVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TExternalContextVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getMaster: IExternalContext_getMasterPtr;
    getEngine: IExternalContext_getEnginePtr;
    getAttachment: IExternalContext_getAttachmentPtr;
    getTransaction: IExternalContext_getTransactionPtr;
    getUserName: IExternalContext_getUserNamePtr;
    getDatabaseName: IExternalContext_getDatabaseNamePtr;
    getClientCharSet: IExternalContext_getClientCharSetPtr;
    obtainInfoCode: IExternalContext_obtainInfoCodePtr;
    getInfo: IExternalContext_getInfoPtr;
    setInfo: IExternalContext_setInfoPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TExternalContext = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IExternalContext = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getMaster(): IMaster;
    function getEngine(status: IStatus): IExternalEngine;
    function getAttachment(status: IStatus): IAttachment;
    function getTransaction(status: IStatus): ITransaction;
    function getUserName(): PAnsiChar;
    function getDatabaseName(): PAnsiChar;
    function getClientCharSet(): PAnsiChar;
    function obtainInfoCode(): Integer;
    function getInfo(code: Integer): Pointer;
    function setInfo(code: Integer; value: Pointer): Pointer;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IExternalContextImpl = class(IVersionedImpl)
  public
    function AsIExternalContext: IExternalContext; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IExternalContextImpl = class(IExternalContext)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getMaster(): IMaster; virtual; abstract;
    function getEngine(status: IStatus): IExternalEngine; virtual; abstract;
    function getAttachment(status: IStatus): IAttachment; virtual; abstract;
    function getTransaction(status: IStatus): ITransaction; virtual; abstract;
    function getUserName(): PAnsiChar; virtual; abstract;
    function getDatabaseName(): PAnsiChar; virtual; abstract;
    function getClientCharSet(): PAnsiChar; virtual; abstract;
    function obtainInfoCode(): Integer; virtual; abstract;
    function getInfo(code: Integer): Pointer; virtual; abstract;
    function setInfo(code: Integer; value: Pointer): Pointer; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PExternalResultSetVTable = ^TExternalResultSetVTable;
  TExternalResultSetVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TExternalResultSetVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    fetch: IExternalResultSet_fetchPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TExternalResultSet = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IExternalResultSet = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function fetch(status: IStatus): Boolean;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IExternalResultSetImpl = class(IDisposableImpl)
  public
    function AsIExternalResultSet: IExternalResultSet; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IExternalResultSetImpl = class(IExternalResultSet)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function fetch(status: IStatus): Boolean; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PExternalFunctionVTable = ^TExternalFunctionVTable;
  TExternalFunctionVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TExternalFunctionVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getCharSet: IExternalFunction_getCharSetPtr;
    execute: IExternalFunction_executePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TExternalFunction = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IExternalFunction = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
    procedure execute(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IExternalFunctionImpl = class(IDisposableImpl)
  public
    function AsIExternalFunction: IExternalFunction; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IExternalFunctionImpl = class(IExternalFunction)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); virtual; abstract;
    procedure execute(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PExternalProcedureVTable = ^TExternalProcedureVTable;
  TExternalProcedureVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TExternalProcedureVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getCharSet: IExternalProcedure_getCharSetPtr;
    open: IExternalProcedure_openPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TExternalProcedure = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IExternalProcedure = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
    function open(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer): IExternalResultSet;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IExternalProcedureImpl = class(IDisposableImpl)
  public
    function AsIExternalProcedure: IExternalProcedure; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IExternalProcedureImpl = class(IExternalProcedure)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); virtual; abstract;
    function open(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer): IExternalResultSet; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PExternalTriggerVTable = ^TExternalTriggerVTable;
  TExternalTriggerVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TExternalTriggerVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getCharSet: IExternalTrigger_getCharSetPtr;
    execute: IExternalTrigger_executePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TExternalTrigger = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IExternalTrigger = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
    procedure execute(status: IStatus; context: IExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IExternalTriggerImpl = class(IDisposableImpl)
  public
    function AsIExternalTrigger: IExternalTrigger; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IExternalTriggerImpl = class(IExternalTrigger)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); virtual; abstract;
    procedure execute(status: IStatus; context: IExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PRoutineMetadataVTable = ^TRoutineMetadataVTable;
  TRoutineMetadataVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TRoutineMetadataVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getPackage: IRoutineMetadata_getPackagePtr;
    getName: IRoutineMetadata_getNamePtr;
    getEntryPoint: IRoutineMetadata_getEntryPointPtr;
    getBody: IRoutineMetadata_getBodyPtr;
    getInputMetadata: IRoutineMetadata_getInputMetadataPtr;
    getOutputMetadata: IRoutineMetadata_getOutputMetadataPtr;
    getTriggerMetadata: IRoutineMetadata_getTriggerMetadataPtr;
    getTriggerTable: IRoutineMetadata_getTriggerTablePtr;
    getTriggerType: IRoutineMetadata_getTriggerTypePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TRoutineMetadata = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IRoutineMetadata = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getPackage(status: IStatus): PAnsiChar;
    function getName(status: IStatus): PAnsiChar;
    function getEntryPoint(status: IStatus): PAnsiChar;
    function getBody(status: IStatus): PAnsiChar;
    function getInputMetadata(status: IStatus): IMessageMetadata;
    function getOutputMetadata(status: IStatus): IMessageMetadata;
    function getTriggerMetadata(status: IStatus): IMessageMetadata;
    function getTriggerTable(status: IStatus): PAnsiChar;
    function getTriggerType(status: IStatus): Cardinal;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IRoutineMetadataImpl = class(IVersionedImpl)
  public
    function AsIRoutineMetadata: IRoutineMetadata; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IRoutineMetadataImpl = class(IRoutineMetadata)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getPackage(status: IStatus): PAnsiChar; virtual; abstract;
    function getName(status: IStatus): PAnsiChar; virtual; abstract;
    function getEntryPoint(status: IStatus): PAnsiChar; virtual; abstract;
    function getBody(status: IStatus): PAnsiChar; virtual; abstract;
    function getInputMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    function getOutputMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    function getTriggerMetadata(status: IStatus): IMessageMetadata; virtual; abstract;
    function getTriggerTable(status: IStatus): PAnsiChar; virtual; abstract;
    function getTriggerType(status: IStatus): Cardinal; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PExternalEngineVTable = ^TExternalEngineVTable;
  TExternalEngineVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TExternalEngineVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    open: IExternalEngine_openPtr;
    openAttachment: IExternalEngine_openAttachmentPtr;
    closeAttachment: IExternalEngine_closeAttachmentPtr;
    makeFunction: IExternalEngine_makeFunctionPtr;
    makeProcedure: IExternalEngine_makeProcedurePtr;
    makeTrigger: IExternalEngine_makeTriggerPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TExternalEngine = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IExternalEngine = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure open(status: IStatus; context: IExternalContext; charSet: PAnsiChar; charSetSize: Cardinal);
    procedure openAttachment(status: IStatus; context: IExternalContext);
    procedure closeAttachment(status: IStatus; context: IExternalContext);
    function makeFunction(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalFunction;
    function makeProcedure(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalProcedure;
    function makeTrigger(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder): IExternalTrigger;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IExternalEngineImpl = class(IPluginBaseImpl)
  public
    function AsIExternalEngine: IExternalEngine; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IExternalEngineImpl = class(IExternalEngine)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure open(status: IStatus; context: IExternalContext; charSet: PAnsiChar; charSetSize: Cardinal); virtual; abstract;
    procedure openAttachment(status: IStatus; context: IExternalContext); virtual; abstract;
    procedure closeAttachment(status: IStatus; context: IExternalContext); virtual; abstract;
    function makeFunction(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalFunction; virtual; abstract;
    function makeProcedure(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalProcedure; virtual; abstract;
    function makeTrigger(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder): IExternalTrigger; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTimerVTable = ^TTimerVTable;
  TTimerVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTimerVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    handler: ITimer_handlerPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTimer = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  ITimer = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure handler();
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITimerImpl = class(IReferenceCountedImpl)
  public
    function AsITimer: ITimer; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITimerImpl = class(ITimer)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure handler(); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTimerControlVTable = ^TTimerControlVTable;
  TTimerControlVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTimerControlVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    start: ITimerControl_startPtr;
    stop: ITimerControl_stopPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTimerControl = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITimerControl = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure start(status: IStatus; timer: ITimer; microSeconds: UInt64);
    procedure stop(status: IStatus; timer: ITimer);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITimerControlImpl = class(IVersionedImpl)
  public
    function AsITimerControl: ITimerControl; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITimerControlImpl = class(ITimerControl)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure start(status: IStatus; timer: ITimer; microSeconds: UInt64); virtual; abstract;
    procedure stop(status: IStatus; timer: ITimer); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PVersionCallbackVTable = ^TVersionCallbackVTable;
  TVersionCallbackVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TVersionCallbackVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    callback: IVersionCallback_callbackPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TVersionCallback = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IVersionCallback = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure callback(status: IStatus; text: PAnsiChar);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IVersionCallbackImpl = class(IVersionedImpl)
  public
    function AsIVersionCallback: IVersionCallback; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IVersionCallbackImpl = class(IVersionCallback)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure callback(status: IStatus; text: PAnsiChar); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PUtilVTable = ^TUtilVTable;
  TUtilVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TUtilVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getFbVersion: IUtil_getFbVersionPtr;
    loadBlob: IUtil_loadBlobPtr;
    dumpBlob: IUtil_dumpBlobPtr;
    getPerfCounters: IUtil_getPerfCountersPtr;
    executeCreateDatabase: IUtil_executeCreateDatabasePtr;
    decodeDate: IUtil_decodeDatePtr;
    decodeTime: IUtil_decodeTimePtr;
    encodeDate: IUtil_encodeDatePtr;
    encodeTime: IUtil_encodeTimePtr;
    formatStatus: IUtil_formatStatusPtr;
    getClientVersion: IUtil_getClientVersionPtr;
    getXpbBuilder: IUtil_getXpbBuilderPtr;
    setOffsets: IUtil_setOffsetsPtr;
    getDecFloat16: IUtil_getDecFloat16Ptr;
    getDecFloat34: IUtil_getDecFloat34Ptr;
    decodeTimeTz: IUtil_decodeTimeTzPtr;
    decodeTimeStampTz: IUtil_decodeTimeStampTzPtr;
    encodeTimeTz: IUtil_encodeTimeTzPtr;
    encodeTimeStampTz: IUtil_encodeTimeStampTzPtr;
    getInt128: IUtil_getInt128Ptr;
    decodeTimeTzEx: IUtil_decodeTimeTzExPtr;
    decodeTimeStampTzEx: IUtil_decodeTimeStampTzExPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TUtil = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IUtil = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getFbVersion(status: IStatus; att: IAttachment; callback: IVersionCallback);
    procedure loadBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean);
    procedure dumpBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean);
    procedure getPerfCounters(status: IStatus; att: IAttachment; countersSet: PAnsiChar; counters: PInt64);
    function executeCreateDatabase(status: IStatus; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: PBoolean): IAttachment;
    procedure decodeDate(date: TISC_DATE; year: PCardinal; month: PCardinal; day: PCardinal);
    procedure decodeTime(time: TISC_TIME; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal);
    function encodeDate(year: Cardinal; month: Cardinal; day: Cardinal): TISC_DATE;
    function encodeTime(hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): TISC_TIME;
    function formatStatus(buffer: PAnsiChar; bufferSize: Cardinal; status: IStatus): Cardinal;
    function getClientVersion(): Cardinal;
    function getXpbBuilder(status: IStatus; kind: Cardinal; buf: PByte; len: Cardinal): IXpbBuilder;
    function setOffsets(status: IStatus; metadata: IMessageMetadata; callback: IOffsetsCallback): Cardinal;
    function getDecFloat16(status: IStatus): IDecFloat16;
    function getDecFloat34(status: IStatus): IDecFloat34;
    procedure decodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
    procedure decodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
    procedure encodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar);
    procedure encodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: Cardinal; month: Cardinal; day: Cardinal; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar);
    function getInt128(status: IStatus): IInt128;
    procedure decodeTimeTzEx(status: IStatus; timeTz: PISC_TIME_TZ_EX; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
    procedure decodeTimeStampTzEx(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ_EX; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IUtilImpl = class(IVersionedImpl)
  public
    function AsIUtil: IUtil; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IUtilImpl = class(IUtil)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure getFbVersion(status: IStatus; att: IAttachment; callback: IVersionCallback); virtual; abstract;
    procedure loadBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean); virtual; abstract;
    procedure dumpBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean); virtual; abstract;
    procedure getPerfCounters(status: IStatus; att: IAttachment; countersSet: PAnsiChar; counters: PInt64); virtual; abstract;
    function executeCreateDatabase(status: IStatus; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: PBoolean): IAttachment; virtual; abstract;
    procedure decodeDate(date: TISC_DATE; year: PCardinal; month: PCardinal; day: PCardinal); virtual; abstract;
    procedure decodeTime(time: TISC_TIME; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal); virtual; abstract;
    function encodeDate(year: Cardinal; month: Cardinal; day: Cardinal): TISC_DATE; virtual; abstract;
    function encodeTime(hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): TISC_TIME; virtual; abstract;
    function formatStatus(buffer: PAnsiChar; bufferSize: Cardinal; status: IStatus): Cardinal; virtual; abstract;
    function getClientVersion(): Cardinal; virtual; abstract;
    function getXpbBuilder(status: IStatus; kind: Cardinal; buf: PByte; len: Cardinal): IXpbBuilder; virtual; abstract;
    function setOffsets(status: IStatus; metadata: IMessageMetadata; callback: IOffsetsCallback): Cardinal; virtual; abstract;
    function getDecFloat16(status: IStatus): IDecFloat16; virtual; abstract;
    function getDecFloat34(status: IStatus): IDecFloat34; virtual; abstract;
    procedure decodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); virtual; abstract;
    procedure decodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); virtual; abstract;
    procedure encodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar); virtual; abstract;
    procedure encodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: Cardinal; month: Cardinal; day: Cardinal; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar); virtual; abstract;
    function getInt128(status: IStatus): IInt128; virtual; abstract;
    procedure decodeTimeTzEx(status: IStatus; timeTz: PISC_TIME_TZ_EX; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); virtual; abstract;
    procedure decodeTimeStampTzEx(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ_EX; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  POffsetsCallbackVTable = ^TOffsetsCallbackVTable;
  TOffsetsCallbackVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TOffsetsCallbackVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setOffset: IOffsetsCallback_setOffsetPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TOffsetsCallback = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IOffsetsCallback = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setOffset(status: IStatus; index: Cardinal; offset: Cardinal; nullOffset: Cardinal);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IOffsetsCallbackImpl = class(IVersionedImpl)
  public
    function AsIOffsetsCallback: IOffsetsCallback; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IOffsetsCallbackImpl = class(IOffsetsCallback)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setOffset(status: IStatus; index: Cardinal; offset: Cardinal; nullOffset: Cardinal); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PXpbBuilderVTable = ^TXpbBuilderVTable;
  TXpbBuilderVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TXpbBuilderVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    clear: IXpbBuilder_clearPtr;
    removeCurrent: IXpbBuilder_removeCurrentPtr;
    insertInt: IXpbBuilder_insertIntPtr;
    insertBigInt: IXpbBuilder_insertBigIntPtr;
    insertBytes: IXpbBuilder_insertBytesPtr;
    insertString: IXpbBuilder_insertStringPtr;
    insertTag: IXpbBuilder_insertTagPtr;
    isEof: IXpbBuilder_isEofPtr;
    moveNext: IXpbBuilder_moveNextPtr;
    rewind: IXpbBuilder_rewindPtr;
    findFirst: IXpbBuilder_findFirstPtr;
    findNext: IXpbBuilder_findNextPtr;
    getTag: IXpbBuilder_getTagPtr;
    getLength: IXpbBuilder_getLengthPtr;
    getInt: IXpbBuilder_getIntPtr;
    getBigInt: IXpbBuilder_getBigIntPtr;
    getString: IXpbBuilder_getStringPtr;
    getBytes: IXpbBuilder_getBytesPtr;
    getBufferLength: IXpbBuilder_getBufferLengthPtr;
    getBuffer: IXpbBuilder_getBufferPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TXpbBuilder = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IXpbBuilder = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure clear(status: IStatus);
    procedure removeCurrent(status: IStatus);
    procedure insertInt(status: IStatus; tag: Byte; value: Integer);
    procedure insertBigInt(status: IStatus; tag: Byte; value: Int64);
    procedure insertBytes(status: IStatus; tag: Byte; bytes: Pointer; length: Cardinal);
    procedure insertString(status: IStatus; tag: Byte; str: PAnsiChar);
    procedure insertTag(status: IStatus; tag: Byte);
    function isEof(status: IStatus): Boolean;
    procedure moveNext(status: IStatus);
    procedure rewind(status: IStatus);
    function findFirst(status: IStatus; tag: Byte): Boolean;
    function findNext(status: IStatus): Boolean;
    function getTag(status: IStatus): Byte;
    function getLength(status: IStatus): Cardinal;
    function getInt(status: IStatus): Integer;
    function getBigInt(status: IStatus): Int64;
    function getString(status: IStatus): PAnsiChar;
    function getBytes(status: IStatus): PByte;
    function getBufferLength(status: IStatus): Cardinal;
    function getBuffer(status: IStatus): PByte;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl = class(IDisposableImpl)
  public
    function AsIXpbBuilder: IXpbBuilder; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl = class(IXpbBuilder)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure clear(status: IStatus); virtual; abstract;
    procedure removeCurrent(status: IStatus); virtual; abstract;
    procedure insertInt(status: IStatus; tag: Byte; value: Integer); virtual; abstract;
    procedure insertBigInt(status: IStatus; tag: Byte; value: Int64); virtual; abstract;
    procedure insertBytes(status: IStatus; tag: Byte; bytes: Pointer; length: Cardinal); virtual; abstract;
    procedure insertString(status: IStatus; tag: Byte; str: PAnsiChar); virtual; abstract;
    procedure insertTag(status: IStatus; tag: Byte); virtual; abstract;
    function isEof(status: IStatus): Boolean; virtual; abstract;
    procedure moveNext(status: IStatus); virtual; abstract;
    procedure rewind(status: IStatus); virtual; abstract;
    function findFirst(status: IStatus; tag: Byte): Boolean; virtual; abstract;
    function findNext(status: IStatus): Boolean; virtual; abstract;
    function getTag(status: IStatus): Byte; virtual; abstract;
    function getLength(status: IStatus): Cardinal; virtual; abstract;
    function getInt(status: IStatus): Integer; virtual; abstract;
    function getBigInt(status: IStatus): Int64; virtual; abstract;
    function getString(status: IStatus): PAnsiChar; virtual; abstract;
    function getBytes(status: IStatus): PByte; virtual; abstract;
    function getBufferLength(status: IStatus): Cardinal; virtual; abstract;
    function getBuffer(status: IStatus): PByte; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceConnectionVTable = ^TTraceConnectionVTable;
  TTraceConnectionVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceConnectionVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getKind: ITraceConnection_getKindPtr;
    getProcessID: ITraceConnection_getProcessIDPtr;
    getUserName: ITraceConnection_getUserNamePtr;
    getRoleName: ITraceConnection_getRoleNamePtr;
    getCharSet: ITraceConnection_getCharSetPtr;
    getRemoteProtocol: ITraceConnection_getRemoteProtocolPtr;
    getRemoteAddress: ITraceConnection_getRemoteAddressPtr;
    getRemoteProcessID: ITraceConnection_getRemoteProcessIDPtr;
    getRemoteProcessName: ITraceConnection_getRemoteProcessNamePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceConnection = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceConnection = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getKind(): Cardinal;
    function getProcessID(): Integer;
    function getUserName(): PAnsiChar;
    function getRoleName(): PAnsiChar;
    function getCharSet(): PAnsiChar;
    function getRemoteProtocol(): PAnsiChar;
    function getRemoteAddress(): PAnsiChar;
    function getRemoteProcessID(): Integer;
    function getRemoteProcessName(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceConnectionImpl = class(IVersionedImpl)
  public
    function AsITraceConnection: ITraceConnection; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceConnectionImpl = class(ITraceConnection)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getKind(): Cardinal; virtual; abstract;
    function getProcessID(): Integer; virtual; abstract;
    function getUserName(): PAnsiChar; virtual; abstract;
    function getRoleName(): PAnsiChar; virtual; abstract;
    function getCharSet(): PAnsiChar; virtual; abstract;
    function getRemoteProtocol(): PAnsiChar; virtual; abstract;
    function getRemoteAddress(): PAnsiChar; virtual; abstract;
    function getRemoteProcessID(): Integer; virtual; abstract;
    function getRemoteProcessName(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceDatabaseConnectionVTable = ^TTraceDatabaseConnectionVTable;
  TTraceDatabaseConnectionVTable = record
    TraceConnectionVTable: TTraceConnectionVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceDatabaseConnectionVTable = class(TTraceConnectionVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getConnectionID: ITraceDatabaseConnection_getConnectionIDPtr;
    getDatabaseName: ITraceDatabaseConnection_getDatabaseNamePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceDatabaseConnection = record
    TraceConnection: TTraceConnection;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceDatabaseConnection = class(ITraceConnection)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getConnectionID(): Int64;
    function getDatabaseName(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceDatabaseConnectionImpl = class(ITraceConnectionImpl)
  public
    function AsITraceDatabaseConnection: ITraceDatabaseConnection; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceDatabaseConnectionImpl = class(ITraceDatabaseConnection)
  public
    function getKind(): Cardinal; virtual; abstract;
    function getProcessID(): Integer; virtual; abstract;
    function getUserName(): PAnsiChar; virtual; abstract;
    function getRoleName(): PAnsiChar; virtual; abstract;
    function getCharSet(): PAnsiChar; virtual; abstract;
    function getRemoteProtocol(): PAnsiChar; virtual; abstract;
    function getRemoteAddress(): PAnsiChar; virtual; abstract;
    function getRemoteProcessID(): Integer; virtual; abstract;
    function getRemoteProcessName(): PAnsiChar; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getConnectionID(): Int64; virtual; abstract;
    function getDatabaseName(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceTransactionVTable = ^TTraceTransactionVTable;
  TTraceTransactionVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceTransactionVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getTransactionID: ITraceTransaction_getTransactionIDPtr;
    getReadOnly: ITraceTransaction_getReadOnlyPtr;
    getWait: ITraceTransaction_getWaitPtr;
    getIsolation: ITraceTransaction_getIsolationPtr;
    getPerf: ITraceTransaction_getPerfPtr;
    getInitialID: ITraceTransaction_getInitialIDPtr;
    getPreviousID: ITraceTransaction_getPreviousIDPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceTransaction = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceTransaction = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getTransactionID(): Int64;
    function getReadOnly(): Boolean;
    function getWait(): Integer;
    function getIsolation(): Cardinal;
    function getPerf(): PPerformanceInfo;
    function getInitialID(): Int64;
    function getPreviousID(): Int64;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceTransactionImpl = class(IVersionedImpl)
  public
    function AsITraceTransaction: ITraceTransaction; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceTransactionImpl = class(ITraceTransaction)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getTransactionID(): Int64; virtual; abstract;
    function getReadOnly(): Boolean; virtual; abstract;
    function getWait(): Integer; virtual; abstract;
    function getIsolation(): Cardinal; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
    function getInitialID(): Int64; virtual; abstract;
    function getPreviousID(): Int64; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceParamsVTable = ^TTraceParamsVTable;
  TTraceParamsVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceParamsVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getCount: ITraceParams_getCountPtr;
    getParam: ITraceParams_getParamPtr;
    getTextUTF8: ITraceParams_getTextUTF8Ptr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceParams = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceParams = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getCount(): Cardinal;
    function getParam(idx: Cardinal): Pdsc;
    function getTextUTF8(status: IStatus; idx: Cardinal): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceParamsImpl = class(IVersionedImpl)
  public
    function AsITraceParams: ITraceParams; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceParamsImpl = class(ITraceParams)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getCount(): Cardinal; virtual; abstract;
    function getParam(idx: Cardinal): Pdsc; virtual; abstract;
    function getTextUTF8(status: IStatus; idx: Cardinal): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceStatementVTable = ^TTraceStatementVTable;
  TTraceStatementVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceStatementVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getStmtID: ITraceStatement_getStmtIDPtr;
    getPerf: ITraceStatement_getPerfPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceStatement = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceStatement = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getStmtID(): Int64;
    function getPerf(): PPerformanceInfo;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceStatementImpl = class(IVersionedImpl)
  public
    function AsITraceStatement: ITraceStatement; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceStatementImpl = class(ITraceStatement)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getStmtID(): Int64; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceSQLStatementVTable = ^TTraceSQLStatementVTable;
  TTraceSQLStatementVTable = record
    TraceStatementVTable: TTraceStatementVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceSQLStatementVTable = class(TTraceStatementVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getText: ITraceSQLStatement_getTextPtr;
    getPlan: ITraceSQLStatement_getPlanPtr;
    getInputs: ITraceSQLStatement_getInputsPtr;
    getTextUTF8: ITraceSQLStatement_getTextUTF8Ptr;
    getExplainedPlan: ITraceSQLStatement_getExplainedPlanPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceSQLStatement = record
    TraceStatement: TTraceStatement;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceSQLStatement = class(ITraceStatement)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getText(): PAnsiChar;
    function getPlan(): PAnsiChar;
    function getInputs(): ITraceParams;
    function getTextUTF8(): PAnsiChar;
    function getExplainedPlan(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceSQLStatementImpl = class(ITraceStatementImpl)
  public
    function AsITraceSQLStatement: ITraceSQLStatement; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceSQLStatementImpl = class(ITraceSQLStatement)
  public
    function getStmtID(): Int64; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getText(): PAnsiChar; virtual; abstract;
    function getPlan(): PAnsiChar; virtual; abstract;
    function getInputs(): ITraceParams; virtual; abstract;
    function getTextUTF8(): PAnsiChar; virtual; abstract;
    function getExplainedPlan(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceBLRStatementVTable = ^TTraceBLRStatementVTable;
  TTraceBLRStatementVTable = record
    TraceStatementVTable: TTraceStatementVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceBLRStatementVTable = class(TTraceStatementVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getData: ITraceBLRStatement_getDataPtr;
    getDataLength: ITraceBLRStatement_getDataLengthPtr;
    getText: ITraceBLRStatement_getTextPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceBLRStatement = record
    TraceStatement: TTraceStatement;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceBLRStatement = class(ITraceStatement)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getData(): PByte;
    function getDataLength(): Cardinal;
    function getText(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceBLRStatementImpl = class(ITraceStatementImpl)
  public
    function AsITraceBLRStatement: ITraceBLRStatement; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceBLRStatementImpl = class(ITraceBLRStatement)
  public
    function getStmtID(): Int64; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getData(): PByte; virtual; abstract;
    function getDataLength(): Cardinal; virtual; abstract;
    function getText(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceDYNRequestVTable = ^TTraceDYNRequestVTable;
  TTraceDYNRequestVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceDYNRequestVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getData: ITraceDYNRequest_getDataPtr;
    getDataLength: ITraceDYNRequest_getDataLengthPtr;
    getText: ITraceDYNRequest_getTextPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceDYNRequest = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceDYNRequest = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getData(): PByte;
    function getDataLength(): Cardinal;
    function getText(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceDYNRequestImpl = class(IVersionedImpl)
  public
    function AsITraceDYNRequest: ITraceDYNRequest; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceDYNRequestImpl = class(ITraceDYNRequest)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getData(): PByte; virtual; abstract;
    function getDataLength(): Cardinal; virtual; abstract;
    function getText(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceContextVariableVTable = ^TTraceContextVariableVTable;
  TTraceContextVariableVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceContextVariableVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getNameSpace: ITraceContextVariable_getNameSpacePtr;
    getVarName: ITraceContextVariable_getVarNamePtr;
    getVarValue: ITraceContextVariable_getVarValuePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceContextVariable = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceContextVariable = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getNameSpace(): PAnsiChar;
    function getVarName(): PAnsiChar;
    function getVarValue(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceContextVariableImpl = class(IVersionedImpl)
  public
    function AsITraceContextVariable: ITraceContextVariable; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceContextVariableImpl = class(ITraceContextVariable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getNameSpace(): PAnsiChar; virtual; abstract;
    function getVarName(): PAnsiChar; virtual; abstract;
    function getVarValue(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceProcedureVTable = ^TTraceProcedureVTable;
  TTraceProcedureVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceProcedureVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getProcName: ITraceProcedure_getProcNamePtr;
    getInputs: ITraceProcedure_getInputsPtr;
    getPerf: ITraceProcedure_getPerfPtr;
    getStmtID: ITraceProcedure_getStmtIDPtr;
    getPlan: ITraceProcedure_getPlanPtr;
    getExplainedPlan: ITraceProcedure_getExplainedPlanPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceProcedure = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceProcedure = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getProcName(): PAnsiChar;
    function getInputs(): ITraceParams;
    function getPerf(): PPerformanceInfo;
    function getStmtID(): Int64;
    function getPlan(): PAnsiChar;
    function getExplainedPlan(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceProcedureImpl = class(IVersionedImpl)
  public
    function AsITraceProcedure: ITraceProcedure; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceProcedureImpl = class(ITraceProcedure)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getProcName(): PAnsiChar; virtual; abstract;
    function getInputs(): ITraceParams; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
    function getStmtID(): Int64; virtual; abstract;
    function getPlan(): PAnsiChar; virtual; abstract;
    function getExplainedPlan(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceFunctionVTable = ^TTraceFunctionVTable;
  TTraceFunctionVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceFunctionVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getFuncName: ITraceFunction_getFuncNamePtr;
    getInputs: ITraceFunction_getInputsPtr;
    getResult: ITraceFunction_getResultPtr;
    getPerf: ITraceFunction_getPerfPtr;
    getStmtID: ITraceFunction_getStmtIDPtr;
    getPlan: ITraceFunction_getPlanPtr;
    getExplainedPlan: ITraceFunction_getExplainedPlanPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceFunction = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceFunction = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getFuncName(): PAnsiChar;
    function getInputs(): ITraceParams;
    function getResult(): ITraceParams;
    function getPerf(): PPerformanceInfo;
    function getStmtID(): Int64;
    function getPlan(): PAnsiChar;
    function getExplainedPlan(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceFunctionImpl = class(IVersionedImpl)
  public
    function AsITraceFunction: ITraceFunction; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceFunctionImpl = class(ITraceFunction)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getFuncName(): PAnsiChar; virtual; abstract;
    function getInputs(): ITraceParams; virtual; abstract;
    function getResult(): ITraceParams; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
    function getStmtID(): Int64; virtual; abstract;
    function getPlan(): PAnsiChar; virtual; abstract;
    function getExplainedPlan(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceTriggerVTable = ^TTraceTriggerVTable;
  TTraceTriggerVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceTriggerVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getTriggerName: ITraceTrigger_getTriggerNamePtr;
    getRelationName: ITraceTrigger_getRelationNamePtr;
    getAction: ITraceTrigger_getActionPtr;
    getWhich: ITraceTrigger_getWhichPtr;
    getPerf: ITraceTrigger_getPerfPtr;
    getStmtID: ITraceTrigger_getStmtIDPtr;
    getPlan: ITraceTrigger_getPlanPtr;
    getExplainedPlan: ITraceTrigger_getExplainedPlanPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceTrigger = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceTrigger = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getTriggerName(): PAnsiChar;
    function getRelationName(): PAnsiChar;
    function getAction(): Integer;
    function getWhich(): Integer;
    function getPerf(): PPerformanceInfo;
    function getStmtID(): Int64;
    function getPlan(): PAnsiChar;
    function getExplainedPlan(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceTriggerImpl = class(IVersionedImpl)
  public
    function AsITraceTrigger: ITraceTrigger; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceTriggerImpl = class(ITraceTrigger)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getTriggerName(): PAnsiChar; virtual; abstract;
    function getRelationName(): PAnsiChar; virtual; abstract;
    function getAction(): Integer; virtual; abstract;
    function getWhich(): Integer; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
    function getStmtID(): Int64; virtual; abstract;
    function getPlan(): PAnsiChar; virtual; abstract;
    function getExplainedPlan(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceServiceConnectionVTable = ^TTraceServiceConnectionVTable;
  TTraceServiceConnectionVTable = record
    TraceConnectionVTable: TTraceConnectionVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceServiceConnectionVTable = class(TTraceConnectionVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getServiceID: ITraceServiceConnection_getServiceIDPtr;
    getServiceMgr: ITraceServiceConnection_getServiceMgrPtr;
    getServiceName: ITraceServiceConnection_getServiceNamePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceServiceConnection = record
    TraceConnection: TTraceConnection;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceServiceConnection = class(ITraceConnection)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getServiceID(): Pointer;
    function getServiceMgr(): PAnsiChar;
    function getServiceName(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceServiceConnectionImpl = class(ITraceConnectionImpl)
  public
    function AsITraceServiceConnection: ITraceServiceConnection; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceServiceConnectionImpl = class(ITraceServiceConnection)
  public
    function getKind(): Cardinal; virtual; abstract;
    function getProcessID(): Integer; virtual; abstract;
    function getUserName(): PAnsiChar; virtual; abstract;
    function getRoleName(): PAnsiChar; virtual; abstract;
    function getCharSet(): PAnsiChar; virtual; abstract;
    function getRemoteProtocol(): PAnsiChar; virtual; abstract;
    function getRemoteAddress(): PAnsiChar; virtual; abstract;
    function getRemoteProcessID(): Integer; virtual; abstract;
    function getRemoteProcessName(): PAnsiChar; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getServiceID(): Pointer; virtual; abstract;
    function getServiceMgr(): PAnsiChar; virtual; abstract;
    function getServiceName(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceStatusVectorVTable = ^TTraceStatusVectorVTable;
  TTraceStatusVectorVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceStatusVectorVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    hasError: ITraceStatusVector_hasErrorPtr;
    hasWarning: ITraceStatusVector_hasWarningPtr;
    getStatus: ITraceStatusVector_getStatusPtr;
    getText: ITraceStatusVector_getTextPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceStatusVector = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceStatusVector = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function hasError(): Boolean;
    function hasWarning(): Boolean;
    function getStatus(): IStatus;
    function getText(): PAnsiChar;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceStatusVectorImpl = class(IVersionedImpl)
  public
    function AsITraceStatusVector: ITraceStatusVector; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceStatusVectorImpl = class(ITraceStatusVector)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function hasError(): Boolean; virtual; abstract;
    function hasWarning(): Boolean; virtual; abstract;
    function getStatus(): IStatus; virtual; abstract;
    function getText(): PAnsiChar; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceSweepInfoVTable = ^TTraceSweepInfoVTable;
  TTraceSweepInfoVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceSweepInfoVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getOIT: ITraceSweepInfo_getOITPtr;
    getOST: ITraceSweepInfo_getOSTPtr;
    getOAT: ITraceSweepInfo_getOATPtr;
    getNext: ITraceSweepInfo_getNextPtr;
    getPerf: ITraceSweepInfo_getPerfPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceSweepInfo = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceSweepInfo = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getOIT(): Int64;
    function getOST(): Int64;
    function getOAT(): Int64;
    function getNext(): Int64;
    function getPerf(): PPerformanceInfo;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceSweepInfoImpl = class(IVersionedImpl)
  public
    function AsITraceSweepInfo: ITraceSweepInfo; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceSweepInfoImpl = class(ITraceSweepInfo)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getOIT(): Int64; virtual; abstract;
    function getOST(): Int64; virtual; abstract;
    function getOAT(): Int64; virtual; abstract;
    function getNext(): Int64; virtual; abstract;
    function getPerf(): PPerformanceInfo; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceLogWriterVTable = ^TTraceLogWriterVTable;
  TTraceLogWriterVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceLogWriterVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    write: ITraceLogWriter_writePtr;
    write_s: ITraceLogWriter_write_sPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceLogWriter = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceLogWriter = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function write(buf: Pointer; size: Cardinal): Cardinal;
    function write_s(status: IStatus; buf: Pointer; size: Cardinal): Cardinal;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceLogWriterImpl = class(IReferenceCountedImpl)
  public
    function AsITraceLogWriter: ITraceLogWriter; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceLogWriterImpl = class(ITraceLogWriter)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function write(buf: Pointer; size: Cardinal): Cardinal; virtual; abstract;
    function write_s(status: IStatus; buf: Pointer; size: Cardinal): Cardinal; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceInitInfoVTable = ^TTraceInitInfoVTable;
  TTraceInitInfoVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceInitInfoVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getConfigText: ITraceInitInfo_getConfigTextPtr;
    getTraceSessionID: ITraceInitInfo_getTraceSessionIDPtr;
    getTraceSessionName: ITraceInitInfo_getTraceSessionNamePtr;
    getFirebirdRootDirectory: ITraceInitInfo_getFirebirdRootDirectoryPtr;
    getDatabaseName: ITraceInitInfo_getDatabaseNamePtr;
    getConnection: ITraceInitInfo_getConnectionPtr;
    getLogWriter: ITraceInitInfo_getLogWriterPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceInitInfo = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceInitInfo = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getConfigText(): PAnsiChar;
    function getTraceSessionID(): Integer;
    function getTraceSessionName(): PAnsiChar;
    function getFirebirdRootDirectory(): PAnsiChar;
    function getDatabaseName(): PAnsiChar;
    function getConnection(): ITraceDatabaseConnection;
    function getLogWriter(): ITraceLogWriter;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceInitInfoImpl = class(IVersionedImpl)
  public
    function AsITraceInitInfo: ITraceInitInfo; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceInitInfoImpl = class(ITraceInitInfo)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getConfigText(): PAnsiChar; virtual; abstract;
    function getTraceSessionID(): Integer; virtual; abstract;
    function getTraceSessionName(): PAnsiChar; virtual; abstract;
    function getFirebirdRootDirectory(): PAnsiChar; virtual; abstract;
    function getDatabaseName(): PAnsiChar; virtual; abstract;
    function getConnection(): ITraceDatabaseConnection; virtual; abstract;
    function getLogWriter(): ITraceLogWriter; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTracePluginVTable = ^TTracePluginVTable;
  TTracePluginVTable = record
    ReferenceCountedVTable: TReferenceCountedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTracePluginVTable = class(TReferenceCountedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    trace_get_error: ITracePlugin_trace_get_errorPtr;
    trace_attach: ITracePlugin_trace_attachPtr;
    trace_detach: ITracePlugin_trace_detachPtr;
    trace_transaction_start: ITracePlugin_trace_transaction_startPtr;
    trace_transaction_end: ITracePlugin_trace_transaction_endPtr;
    trace_proc_execute: ITracePlugin_trace_proc_executePtr;
    trace_trigger_execute: ITracePlugin_trace_trigger_executePtr;
    trace_set_context: ITracePlugin_trace_set_contextPtr;
    trace_dsql_prepare: ITracePlugin_trace_dsql_preparePtr;
    trace_dsql_free: ITracePlugin_trace_dsql_freePtr;
    trace_dsql_execute: ITracePlugin_trace_dsql_executePtr;
    trace_blr_compile: ITracePlugin_trace_blr_compilePtr;
    trace_blr_execute: ITracePlugin_trace_blr_executePtr;
    trace_dyn_execute: ITracePlugin_trace_dyn_executePtr;
    trace_service_attach: ITracePlugin_trace_service_attachPtr;
    trace_service_start: ITracePlugin_trace_service_startPtr;
    trace_service_query: ITracePlugin_trace_service_queryPtr;
    trace_service_detach: ITracePlugin_trace_service_detachPtr;
    trace_event_error: ITracePlugin_trace_event_errorPtr;
    trace_event_sweep: ITracePlugin_trace_event_sweepPtr;
    trace_func_execute: ITracePlugin_trace_func_executePtr;
    trace_dsql_restart: ITracePlugin_trace_dsql_restartPtr;
    trace_proc_compile: ITracePlugin_trace_proc_compilePtr;
    trace_func_compile: ITracePlugin_trace_func_compilePtr;
    trace_trigger_compile: ITracePlugin_trace_trigger_compilePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTracePlugin = record
    ReferenceCounted: TReferenceCounted;
  {$ELSE !WITH_RECORD_METHODS}
  ITracePlugin = class(IReferenceCounted)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function trace_get_error(): PAnsiChar;
    function trace_attach(connection: ITraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean;
    function trace_detach(connection: ITraceDatabaseConnection; drop_db: Boolean): Boolean;
    function trace_transaction_start(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; tpb_length: Cardinal; tpb: PByte; tra_result: Cardinal): Boolean;
    function trace_transaction_end(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean;
    function trace_proc_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; procedure_: ITraceProcedure; started: Boolean; proc_result: Cardinal): Boolean;
    function trace_trigger_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; trigger: ITraceTrigger; started: Boolean; trig_result: Cardinal): Boolean;
    function trace_set_context(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; variable: ITraceContextVariable): Boolean;
    function trace_dsql_prepare(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean;
    function trace_dsql_free(connection: ITraceDatabaseConnection; statement: ITraceSQLStatement; option: Cardinal): Boolean;
    function trace_dsql_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean;
    function trace_blr_compile(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean;
    function trace_blr_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; req_result: Cardinal): Boolean;
    function trace_dyn_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; request: ITraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean;
    function trace_service_attach(service: ITraceServiceConnection; att_result: Cardinal): Boolean;
    function trace_service_start(service: ITraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean;
    function trace_service_query(service: ITraceServiceConnection; send_item_length: Cardinal; send_items: PByte; recv_item_length: Cardinal; recv_items: PByte; query_result: Cardinal): Boolean;
    function trace_service_detach(service: ITraceServiceConnection; detach_result: Cardinal): Boolean;
    function trace_event_error(connection: ITraceConnection; status: ITraceStatusVector; function_: PAnsiChar): Boolean;
    function trace_event_sweep(connection: ITraceDatabaseConnection; sweep: ITraceSweepInfo; sweep_state: Cardinal): Boolean;
    function trace_func_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; function_: ITraceFunction; started: Boolean; func_result: Cardinal): Boolean;
    function trace_dsql_restart(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; number: Cardinal): Boolean;
    function trace_proc_compile(connection: ITraceDatabaseConnection; procedure_: ITraceProcedure; time_millis: Int64; proc_result: Cardinal): Boolean;
    function trace_func_compile(connection: ITraceDatabaseConnection; function_: ITraceFunction; time_millis: Int64; func_result: Cardinal): Boolean;
    function trace_trigger_compile(connection: ITraceDatabaseConnection; trigger: ITraceTrigger; time_millis: Int64; trig_result: Cardinal): Boolean;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITracePluginImpl = class(IReferenceCountedImpl)
  public
    function AsITracePlugin: ITracePlugin; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITracePluginImpl = class(ITracePlugin)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function trace_get_error(): PAnsiChar; virtual; abstract;
    function trace_attach(connection: ITraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean; virtual; abstract;
    function trace_detach(connection: ITraceDatabaseConnection; drop_db: Boolean): Boolean; virtual; abstract;
    function trace_transaction_start(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; tpb_length: Cardinal; tpb: PByte; tra_result: Cardinal): Boolean; virtual; abstract;
    function trace_transaction_end(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean; virtual; abstract;
    function trace_proc_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; procedure_: ITraceProcedure; started: Boolean; proc_result: Cardinal): Boolean; virtual; abstract;
    function trace_trigger_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; trigger: ITraceTrigger; started: Boolean; trig_result: Cardinal): Boolean; virtual; abstract;
    function trace_set_context(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; variable: ITraceContextVariable): Boolean; virtual; abstract;
    function trace_dsql_prepare(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean; virtual; abstract;
    function trace_dsql_free(connection: ITraceDatabaseConnection; statement: ITraceSQLStatement; option: Cardinal): Boolean; virtual; abstract;
    function trace_dsql_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean; virtual; abstract;
    function trace_blr_compile(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean; virtual; abstract;
    function trace_blr_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; req_result: Cardinal): Boolean; virtual; abstract;
    function trace_dyn_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; request: ITraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean; virtual; abstract;
    function trace_service_attach(service: ITraceServiceConnection; att_result: Cardinal): Boolean; virtual; abstract;
    function trace_service_start(service: ITraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean; virtual; abstract;
    function trace_service_query(service: ITraceServiceConnection; send_item_length: Cardinal; send_items: PByte; recv_item_length: Cardinal; recv_items: PByte; query_result: Cardinal): Boolean; virtual; abstract;
    function trace_service_detach(service: ITraceServiceConnection; detach_result: Cardinal): Boolean; virtual; abstract;
    function trace_event_error(connection: ITraceConnection; status: ITraceStatusVector; function_: PAnsiChar): Boolean; virtual; abstract;
    function trace_event_sweep(connection: ITraceDatabaseConnection; sweep: ITraceSweepInfo; sweep_state: Cardinal): Boolean; virtual; abstract;
    function trace_func_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; function_: ITraceFunction; started: Boolean; func_result: Cardinal): Boolean; virtual; abstract;
    function trace_dsql_restart(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; number: Cardinal): Boolean; virtual; abstract;
    function trace_proc_compile(connection: ITraceDatabaseConnection; procedure_: ITraceProcedure; time_millis: Int64; proc_result: Cardinal): Boolean; virtual; abstract;
    function trace_func_compile(connection: ITraceDatabaseConnection; function_: ITraceFunction; time_millis: Int64; func_result: Cardinal): Boolean; virtual; abstract;
    function trace_trigger_compile(connection: ITraceDatabaseConnection; trigger: ITraceTrigger; time_millis: Int64; trig_result: Cardinal): Boolean; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PTraceFactoryVTable = ^TTraceFactoryVTable;
  TTraceFactoryVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TTraceFactoryVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    trace_needs: ITraceFactory_trace_needsPtr;
    trace_create: ITraceFactory_trace_createPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TTraceFactory = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  ITraceFactory = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function trace_needs(): UInt64;
    function trace_create(status: IStatus; init_info: ITraceInitInfo): ITracePlugin;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  ITraceFactoryImpl = class(IPluginBaseImpl)
  public
    function AsITraceFactory: ITraceFactory; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  ITraceFactoryImpl = class(ITraceFactory)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function trace_needs(): UInt64; virtual; abstract;
    function trace_create(status: IStatus; init_info: ITraceInitInfo): ITracePlugin; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PUdrFunctionFactoryVTable = ^TUdrFunctionFactoryVTable;
  TUdrFunctionFactoryVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TUdrFunctionFactoryVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setup: IUdrFunctionFactory_setupPtr;
    newItem: IUdrFunctionFactory_newItemPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TUdrFunctionFactory = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IUdrFunctionFactory = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder);
    function newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalFunction;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl = class(IDisposableImpl)
  public
    function AsIUdrFunctionFactory: IUdrFunctionFactory; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl = class(IUdrFunctionFactory)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder); virtual; abstract;
    function newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalFunction; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PUdrProcedureFactoryVTable = ^TUdrProcedureFactoryVTable;
  TUdrProcedureFactoryVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TUdrProcedureFactoryVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setup: IUdrProcedureFactory_setupPtr;
    newItem: IUdrProcedureFactory_newItemPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TUdrProcedureFactory = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IUdrProcedureFactory = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder);
    function newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalProcedure;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl = class(IDisposableImpl)
  public
    function AsIUdrProcedureFactory: IUdrProcedureFactory; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl = class(IUdrProcedureFactory)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder); virtual; abstract;
    function newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalProcedure; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PUdrTriggerFactoryVTable = ^TUdrTriggerFactoryVTable;
  TUdrTriggerFactoryVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TUdrTriggerFactoryVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    setup: IUdrTriggerFactory_setupPtr;
    newItem: IUdrTriggerFactory_newItemPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TUdrTriggerFactory = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IUdrTriggerFactory = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder);
    function newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalTrigger;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl = class(IDisposableImpl)
  public
    function AsIUdrTriggerFactory: IUdrTriggerFactory; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl = class(IUdrTriggerFactory)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder); virtual; abstract;
    function newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalTrigger; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PUdrPluginVTable = ^TUdrPluginVTable;
  TUdrPluginVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TUdrPluginVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getMaster: IUdrPlugin_getMasterPtr;
    registerFunction: IUdrPlugin_registerFunctionPtr;
    registerProcedure: IUdrPlugin_registerProcedurePtr;
    registerTrigger: IUdrPlugin_registerTriggerPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TUdrPlugin = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IUdrPlugin = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getMaster(): IMaster;
    procedure registerFunction(status: IStatus; name: PAnsiChar; factory: IUdrFunctionFactory);
    procedure registerProcedure(status: IStatus; name: PAnsiChar; factory: IUdrProcedureFactory);
    procedure registerTrigger(status: IStatus; name: PAnsiChar; factory: IUdrTriggerFactory);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IUdrPluginImpl = class(IVersionedImpl)
  public
    function AsIUdrPlugin: IUdrPlugin; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IUdrPluginImpl = class(IUdrPlugin)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getMaster(): IMaster; virtual; abstract;
    procedure registerFunction(status: IStatus; name: PAnsiChar; factory: IUdrFunctionFactory); virtual; abstract;
    procedure registerProcedure(status: IStatus; name: PAnsiChar; factory: IUdrProcedureFactory); virtual; abstract;
    procedure registerTrigger(status: IStatus; name: PAnsiChar; factory: IUdrTriggerFactory); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PDecFloat16VTable = ^TDecFloat16VTable;
  TDecFloat16VTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TDecFloat16VTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    toBcd: IDecFloat16_toBcdPtr;
    toString: IDecFloat16_toStringPtr;
    fromBcd: IDecFloat16_fromBcdPtr;
    fromString: IDecFloat16_fromStringPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TDecFloat16 = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IDecFloat16 = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure toBcd(from: PFB_DEC16; sign: PInteger; bcd: PByte; exp: PInteger);
    procedure toString(status: IStatus; from: PFB_DEC16; bufferLength: Cardinal; buffer: PAnsiChar);{$IFNDEF WITH_RECORD_METHODS} reintroduce; {$ENDIF WITH_RECORD_METHODS}
    procedure fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC16);
    procedure fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC16);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IDecFloat16Impl = class(IVersionedImpl)
  public
    function AsIDecFloat16: IDecFloat16; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IDecFloat16Impl = class(IDecFloat16)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure toBcd(from: PFB_DEC16; sign: PInteger; bcd: PByte; exp: PInteger); virtual; abstract;
    procedure toString(status: IStatus; from: PFB_DEC16; bufferLength: Cardinal; buffer: PAnsiChar); reintroduce; virtual; abstract;
    procedure fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC16); virtual; abstract;
    procedure fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC16); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PDecFloat34VTable = ^TDecFloat34VTable;
  TDecFloat34VTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TDecFloat34VTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    toBcd: IDecFloat34_toBcdPtr;
    toString: IDecFloat34_toStringPtr;
    fromBcd: IDecFloat34_fromBcdPtr;
    fromString: IDecFloat34_fromStringPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TDecFloat34 = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IDecFloat34 = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure toBcd(from: PFB_DEC34; sign: PInteger; bcd: PByte; exp: PInteger);
    procedure toString(status: IStatus; from: PFB_DEC34; bufferLength: Cardinal; buffer: PAnsiChar);{$IFNDEF WITH_RECORD_METHODS} reintroduce; {$ENDIF WITH_RECORD_METHODS}
    procedure fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC34);
    procedure fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC34);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IDecFloat34Impl = class(IVersionedImpl)
  public
    function AsIDecFloat34: IDecFloat34; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IDecFloat34Impl = class(IDecFloat34)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure toBcd(from: PFB_DEC34; sign: PInteger; bcd: PByte; exp: PInteger); virtual; abstract;
    procedure toString(status: IStatus; from: PFB_DEC34; bufferLength: Cardinal; buffer: PAnsiChar); reintroduce; virtual; abstract;
    procedure fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC34); virtual; abstract;
    procedure fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC34); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PInt128VTable = ^TInt128VTable;
  TInt128VTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TInt128VTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    toString: IInt128_toStringPtr;
    fromString: IInt128_fromStringPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TInt128 = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IInt128 = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure toString(status: IStatus; from: PFB_I128; scale: Integer; bufferLength: Cardinal; buffer: PAnsiChar);{$IFNDEF WITH_RECORD_METHODS} reintroduce; {$ENDIF WITH_RECORD_METHODS}
    procedure fromString(status: IStatus; scale: Integer; from: PAnsiChar; to_: PFB_I128);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IInt128Impl = class(IVersionedImpl)
  public
    function AsIInt128: IInt128; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IInt128Impl = class(IInt128)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure toString(status: IStatus; from: PFB_I128; scale: Integer; bufferLength: Cardinal; buffer: PAnsiChar); reintroduce; virtual; abstract;
    procedure fromString(status: IStatus; scale: Integer; from: PAnsiChar; to_: PFB_I128); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PReplicatedFieldVTable = ^TReplicatedFieldVTable;
  TReplicatedFieldVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TReplicatedFieldVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getName: IReplicatedField_getNamePtr;
    getType: IReplicatedField_getTypePtr;
    getSubType: IReplicatedField_getSubTypePtr;
    getScale: IReplicatedField_getScalePtr;
    getLength: IReplicatedField_getLengthPtr;
    getCharSet: IReplicatedField_getCharSetPtr;
    getData: IReplicatedField_getDataPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TReplicatedField = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedField = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getName(): PAnsiChar;
    function getType(): Cardinal;
    function getSubType(): Integer;
    function getScale(): Integer;
    function getLength(): Cardinal;
    function getCharSet(): Cardinal;
    function getData(): Pointer;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IReplicatedFieldImpl = class(IVersionedImpl)
  public
    function AsIReplicatedField: IReplicatedField; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedFieldImpl = class(IReplicatedField)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getName(): PAnsiChar; virtual; abstract;
    function getType(): Cardinal; virtual; abstract;
    function getSubType(): Integer; virtual; abstract;
    function getScale(): Integer; virtual; abstract;
    function getLength(): Cardinal; virtual; abstract;
    function getCharSet(): Cardinal; virtual; abstract;
    function getData(): Pointer; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PReplicatedRecordVTable = ^TReplicatedRecordVTable;
  TReplicatedRecordVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TReplicatedRecordVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getCount: IReplicatedRecord_getCountPtr;
    getField: IReplicatedRecord_getFieldPtr;
    getRawLength: IReplicatedRecord_getRawLengthPtr;
    getRawData: IReplicatedRecord_getRawDataPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TReplicatedRecord = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedRecord = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getCount(): Cardinal;
    function getField(index: Cardinal): IReplicatedField;
    function getRawLength(): Cardinal;
    function getRawData(): PByte;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IReplicatedRecordImpl = class(IVersionedImpl)
  public
    function AsIReplicatedRecord: IReplicatedRecord; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedRecordImpl = class(IReplicatedRecord)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getCount(): Cardinal; virtual; abstract;
    function getField(index: Cardinal): IReplicatedField; virtual; abstract;
    function getRawLength(): Cardinal; virtual; abstract;
    function getRawData(): PByte; virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PReplicatedTransactionVTable = ^TReplicatedTransactionVTable;
  TReplicatedTransactionVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TReplicatedTransactionVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    prepare: IReplicatedTransaction_preparePtr;
    commit: IReplicatedTransaction_commitPtr;
    rollback: IReplicatedTransaction_rollbackPtr;
    startSavepoint: IReplicatedTransaction_startSavepointPtr;
    releaseSavepoint: IReplicatedTransaction_releaseSavepointPtr;
    rollbackSavepoint: IReplicatedTransaction_rollbackSavepointPtr;
    insertRecord: IReplicatedTransaction_insertRecordPtr;
    updateRecord: IReplicatedTransaction_updateRecordPtr;
    deleteRecord: IReplicatedTransaction_deleteRecordPtr;
    executeSql: IReplicatedTransaction_executeSqlPtr;
    executeSqlIntl: IReplicatedTransaction_executeSqlIntlPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TReplicatedTransaction = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransaction = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure prepare(status: IStatus);
    procedure commit(status: IStatus);
    procedure rollback(status: IStatus);
    procedure startSavepoint(status: IStatus);
    procedure releaseSavepoint(status: IStatus);
    procedure rollbackSavepoint(status: IStatus);
    procedure insertRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord);
    procedure updateRecord(status: IStatus; name: PAnsiChar; orgRecord: IReplicatedRecord; newRecord: IReplicatedRecord);
    procedure deleteRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord);
    procedure executeSql(status: IStatus; sql: PAnsiChar);
    procedure executeSqlIntl(status: IStatus; charset: Cardinal; sql: PAnsiChar);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl = class(IDisposableImpl)
  public
    function AsIReplicatedTransaction: IReplicatedTransaction; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl = class(IReplicatedTransaction)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure prepare(status: IStatus); virtual; abstract;
    procedure commit(status: IStatus); virtual; abstract;
    procedure rollback(status: IStatus); virtual; abstract;
    procedure startSavepoint(status: IStatus); virtual; abstract;
    procedure releaseSavepoint(status: IStatus); virtual; abstract;
    procedure rollbackSavepoint(status: IStatus); virtual; abstract;
    procedure insertRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord); virtual; abstract;
    procedure updateRecord(status: IStatus; name: PAnsiChar; orgRecord: IReplicatedRecord; newRecord: IReplicatedRecord); virtual; abstract;
    procedure deleteRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord); virtual; abstract;
    procedure executeSql(status: IStatus; sql: PAnsiChar); virtual; abstract;
    procedure executeSqlIntl(status: IStatus; charset: Cardinal; sql: PAnsiChar); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PReplicatedSessionVTable = ^TReplicatedSessionVTable;
  TReplicatedSessionVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TReplicatedSessionVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    init: IReplicatedSession_initPtr;
    startTransaction: IReplicatedSession_startTransactionPtr;
    cleanupTransaction: IReplicatedSession_cleanupTransactionPtr;
    setSequence: IReplicatedSession_setSequencePtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TReplicatedSession = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedSession = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function init(status: IStatus; attachment: IAttachment): Boolean;
    function startTransaction(status: IStatus; transaction: ITransaction; number: Int64): IReplicatedTransaction;
    procedure cleanupTransaction(status: IStatus; number: Int64);
    procedure setSequence(status: IStatus; name: PAnsiChar; value: Int64);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IReplicatedSessionImpl = class(IPluginBaseImpl)
  public
    function AsIReplicatedSession: IReplicatedSession; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IReplicatedSessionImpl = class(IReplicatedSession)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function init(status: IStatus; attachment: IAttachment): Boolean; virtual; abstract;
    function startTransaction(status: IStatus; transaction: ITransaction; number: Int64): IReplicatedTransaction; virtual; abstract;
    procedure cleanupTransaction(status: IStatus; number: Int64); virtual; abstract;
    procedure setSequence(status: IStatus; name: PAnsiChar; value: Int64); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PProfilerPluginVTable = ^TProfilerPluginVTable;
  TProfilerPluginVTable = record
    PluginBaseVTable: TPluginBaseVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TProfilerPluginVTable = class(TPluginBaseVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    init: IProfilerPlugin_initPtr;
    startSession: IProfilerPlugin_startSessionPtr;
    flush: IProfilerPlugin_flushPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TProfilerPlugin = record
    PluginBase: TPluginBase;
  {$ELSE !WITH_RECORD_METHODS}
  IProfilerPlugin = class(IPluginBase)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    procedure init(status: IStatus; attachment: IAttachment; ticksFrequency: UInt64);
    function startSession(status: IStatus; description: PAnsiChar; options: PAnsiChar; timestamp: TISC_TIMESTAMP_TZ): IProfilerSession;
    procedure flush(status: IStatus);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IProfilerPluginImpl = class(IPluginBaseImpl)
  public
    function AsIProfilerPlugin: IProfilerPlugin; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IProfilerPluginImpl = class(IProfilerPlugin)
  public
    procedure addRef(); virtual; abstract;
    function release(): Integer; virtual; abstract;
    procedure setOwner(r: IReferenceCounted); virtual; abstract;
    function getOwner(): IReferenceCounted; virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    procedure init(status: IStatus; attachment: IAttachment; ticksFrequency: UInt64); virtual; abstract;
    function startSession(status: IStatus; description: PAnsiChar; options: PAnsiChar; timestamp: TISC_TIMESTAMP_TZ): IProfilerSession; virtual; abstract;
    procedure flush(status: IStatus); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PProfilerSessionVTable = ^TProfilerSessionVTable;
  TProfilerSessionVTable = record
    DisposableVTable: TDisposableVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TProfilerSessionVTable = class(TDisposableVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getId: IProfilerSession_getIdPtr;
    getFlags: IProfilerSession_getFlagsPtr;
    cancel: IProfilerSession_cancelPtr;
    finish: IProfilerSession_finishPtr;
    defineStatement: IProfilerSession_defineStatementPtr;
    defineCursor: IProfilerSession_defineCursorPtr;
    defineRecordSource: IProfilerSession_defineRecordSourcePtr;
    onRequestStart: IProfilerSession_onRequestStartPtr;
    onRequestFinish: IProfilerSession_onRequestFinishPtr;
    beforePsqlLineColumn: IProfilerSession_beforePsqlLineColumnPtr;
    afterPsqlLineColumn: IProfilerSession_afterPsqlLineColumnPtr;
    beforeRecordSourceOpen: IProfilerSession_beforeRecordSourceOpenPtr;
    afterRecordSourceOpen: IProfilerSession_afterRecordSourceOpenPtr;
    beforeRecordSourceGetRecord: IProfilerSession_beforeRecordSourceGetRecordPtr;
    afterRecordSourceGetRecord: IProfilerSession_afterRecordSourceGetRecordPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TProfilerSession = record
    Disposable: TDisposable;
  {$ELSE !WITH_RECORD_METHODS}
  IProfilerSession = class(IDisposable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getId(): Int64;
    function getFlags(): Cardinal;
    procedure cancel(status: IStatus);
    procedure finish(status: IStatus; timestamp: TISC_TIMESTAMP_TZ);
    procedure defineStatement(status: IStatus; statementId: Int64; parentStatementId: Int64; type_: PAnsiChar; packageName: PAnsiChar; routineName: PAnsiChar; sqlText: PAnsiChar);
    procedure defineCursor(statementId: Int64; cursorId: Cardinal; name: PAnsiChar; line: Cardinal; column: Cardinal);
    procedure defineRecordSource(statementId: Int64; cursorId: Cardinal; recSourceId: Cardinal; level: Cardinal; accessPath: PAnsiChar; parentRecSourceId: Cardinal);
    procedure onRequestStart(status: IStatus; statementId: Int64; requestId: Int64; callerStatementId: Int64; callerRequestId: Int64; timestamp: TISC_TIMESTAMP_TZ);
    procedure onRequestFinish(status: IStatus; statementId: Int64; requestId: Int64; timestamp: TISC_TIMESTAMP_TZ; stats: IProfilerStats);
    procedure beforePsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal);
    procedure afterPsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal; stats: IProfilerStats);
    procedure beforeRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal);
    procedure afterRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats);
    procedure beforeRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal);
    procedure afterRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats);
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl = class(IDisposableImpl)
  public
    function AsIProfilerSession: IProfilerSession; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl = class(IProfilerSession)
  public
    procedure dispose(); virtual; abstract;
  {$ENDIF !WITH_RECORD_METHODS}
    function getId(): Int64; virtual; abstract;
    function getFlags(): Cardinal; virtual; abstract;
    procedure cancel(status: IStatus); virtual; abstract;
    procedure finish(status: IStatus; timestamp: TISC_TIMESTAMP_TZ); virtual; abstract;
    procedure defineStatement(status: IStatus; statementId: Int64; parentStatementId: Int64; type_: PAnsiChar; packageName: PAnsiChar; routineName: PAnsiChar; sqlText: PAnsiChar); virtual; abstract;
    procedure defineCursor(statementId: Int64; cursorId: Cardinal; name: PAnsiChar; line: Cardinal; column: Cardinal); virtual; abstract;
    procedure defineRecordSource(statementId: Int64; cursorId: Cardinal; recSourceId: Cardinal; level: Cardinal; accessPath: PAnsiChar; parentRecSourceId: Cardinal); virtual; abstract;
    procedure onRequestStart(status: IStatus; statementId: Int64; requestId: Int64; callerStatementId: Int64; callerRequestId: Int64; timestamp: TISC_TIMESTAMP_TZ); virtual; abstract;
    procedure onRequestFinish(status: IStatus; statementId: Int64; requestId: Int64; timestamp: TISC_TIMESTAMP_TZ; stats: IProfilerStats); virtual; abstract;
    procedure beforePsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal); virtual; abstract;
    procedure afterPsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal; stats: IProfilerStats); virtual; abstract;
    procedure beforeRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal); virtual; abstract;
    procedure afterRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats); virtual; abstract;
    procedure beforeRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal); virtual; abstract;
    procedure afterRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats); virtual; abstract;
  public
    constructor create;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  PProfilerStatsVTable = ^TProfilerStatsVTable;
  TProfilerStatsVTable = record
    VersionedVTable: TVersionedVTable;
  {$ELSE !WITH_RECORD_METHODS}
  TProfilerStatsVTable = class(TVersionedVTable)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    getElapsedTicks: IProfilerStats_getElapsedTicksPtr;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  TProfilerStats = record
    Versioned: TVersioned;
  {$ELSE !WITH_RECORD_METHODS}
  IProfilerStats = class(IVersioned)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getElapsedTicks(): UInt64;
  end;

  {$IFDEF WITH_RECORD_METHODS}
  IProfilerStatsImpl = class(IVersionedImpl)
  public
    function AsIProfilerStats: IProfilerStats; {$IFDEF WITH_INLINE}inline;{$ENDIF}
  {$ELSE !WITH_RECORD_METHODS}
  IProfilerStatsImpl = class(IProfilerStats)
  public
  {$ENDIF !WITH_RECORD_METHODS}
    function getElapsedTicks(): UInt64; virtual; abstract;
  public
    constructor create;
  end;

{$IFNDEF NO_FBCLIENT}
 // function fb_get_master_interface : IMaster; cdecl; external 'fbclient';
{$ENDIF}

const
  FB_UsedInYValve = FALSE;
  { compare manualy please !!
  isc_dpb_version1 = byte(1);
  isc_dpb_version2 = byte(2);
  isc_dpb_cdd_pathname = byte(1);
  isc_dpb_allocation = byte(2);
  isc_dpb_journal = byte(3);
  isc_dpb_page_size = byte(4);
  isc_dpb_num_buffers = byte(5);
  isc_dpb_buffer_length = byte(6);
  isc_dpb_debug = byte(7);
  isc_dpb_garbage_collect = byte(8);
  isc_dpb_verify = byte(9);
  isc_dpb_sweep = byte(10);
  isc_dpb_enable_journal = byte(11);
  isc_dpb_disable_journal = byte(12);
  isc_dpb_dbkey_scope = byte(13);
  isc_dpb_number_of_users = byte(14);
  isc_dpb_trace = byte(15);
  isc_dpb_no_garbage_collect = byte(16);
  isc_dpb_damaged = byte(17);
  isc_dpb_license = byte(18);
  isc_dpb_sys_user_name = byte(19);
  isc_dpb_encrypt_key = byte(20);
  isc_dpb_activate_shadow = byte(21);
  isc_dpb_sweep_interval = byte(22);
  isc_dpb_delete_shadow = byte(23);
  isc_dpb_force_write = byte(24);
  isc_dpb_begin_log = byte(25);
  isc_dpb_quit_log = byte(26);
  isc_dpb_no_reserve = byte(27);
  isc_dpb_user_name = byte(28);
  isc_dpb_password = byte(29);
  isc_dpb_password_enc = byte(30);
  isc_dpb_sys_user_name_enc = byte(31);
  isc_dpb_interp = byte(32);
  isc_dpb_online_dump = byte(33);
  isc_dpb_old_file_size = byte(34);
  isc_dpb_old_num_files = byte(35);
  isc_dpb_old_file = byte(36);
  isc_dpb_old_start_page = byte(37);
  isc_dpb_old_start_seqno = byte(38);
  isc_dpb_old_start_file = byte(39);
  isc_dpb_drop_walfile = byte(40);
  isc_dpb_old_dump_id = byte(41);
  isc_dpb_wal_backup_dir = byte(42);
  isc_dpb_wal_chkptlen = byte(43);
  isc_dpb_wal_numbufs = byte(44);
  isc_dpb_wal_bufsize = byte(45);
  isc_dpb_wal_grp_cmt_wait = byte(46);
  isc_dpb_lc_messages = byte(47);
  isc_dpb_lc_ctype = byte(48);
  isc_dpb_cache_manager = byte(49);
  isc_dpb_shutdown = byte(50);
  isc_dpb_online = byte(51);
  isc_dpb_shutdown_delay = byte(52);
  isc_dpb_reserved = byte(53);
  isc_dpb_overwrite = byte(54);
  isc_dpb_sec_attach = byte(55);
  isc_dpb_disable_wal = byte(56);
  isc_dpb_connect_timeout = byte(57);
  isc_dpb_dummy_packet_interval = byte(58);
  isc_dpb_gbak_attach = byte(59);
  isc_dpb_sql_role_name = byte(60);
  isc_dpb_set_page_buffers = byte(61);
  isc_dpb_working_directory = byte(62);
  isc_dpb_sql_dialect = byte(63);
  isc_dpb_set_db_readonly = byte(64);
  isc_dpb_set_db_sql_dialect = byte(65);
  isc_dpb_gfix_attach = byte(66);
  isc_dpb_gstat_attach = byte(67);
  isc_dpb_set_db_charset = byte(68);
  isc_dpb_gsec_attach = byte(69);
  isc_dpb_address_path = byte(70);
  isc_dpb_process_id = byte(71);
  isc_dpb_no_db_triggers = byte(72);
  isc_dpb_trusted_auth = byte(73);
  isc_dpb_process_name = byte(74);
  isc_dpb_trusted_role = byte(75);
  isc_dpb_org_filename = byte(76);
  isc_dpb_utf8_filename = byte(77);
  isc_dpb_ext_call_depth = byte(78);
  isc_dpb_auth_block = byte(79);
  isc_dpb_client_version = byte(80);
  isc_dpb_remote_protocol = byte(81);
  isc_dpb_host_name = byte(82);
  isc_dpb_os_user = byte(83);
  isc_dpb_specific_auth_data = byte(84);
  isc_dpb_auth_plugin_list = byte(85);
  isc_dpb_auth_plugin_name = byte(86);
  isc_dpb_config = byte(87);
  isc_dpb_nolinger = byte(88);
  isc_dpb_reset_icu = byte(89);
  isc_dpb_map_attach = byte(90);
  isc_dpb_session_time_zone = byte(91);
  isc_dpb_set_db_replica = byte(92);
  isc_dpb_set_bind = byte(93);
  isc_dpb_decfloat_round = byte(94);
  isc_dpb_decfloat_traps = byte(95);
  isc_dpb_clear_map = byte(96);
  isc_dpb_upgrade_db = byte(97);
  isc_dpb_parallel_workers = byte(100);
  isc_dpb_worker_attach = byte(101);
  isc_dpb_address = byte(1);
  isc_dpb_addr_protocol = byte(1);
  isc_dpb_addr_endpoint = byte(2);
  isc_dpb_addr_flags = byte(3);
  isc_dpb_addr_crypt = byte(4);
  isc_dpb_addr_flag_conn_compressed = $01;
  isc_dpb_addr_flag_conn_encrypted = $02;
  isc_dpb_pages = byte(1);
  isc_dpb_records = byte(2);
  isc_dpb_indices = byte(4);
  isc_dpb_transactions = byte(8);
  isc_dpb_no_update = byte(16);
  isc_dpb_repair = byte(32);
  isc_dpb_ignore = byte(64);
  isc_dpb_shut_cache = $1;
  isc_dpb_shut_attachment = $2;
  isc_dpb_shut_transaction = $4;
  isc_dpb_shut_force = $8;
  isc_dpb_shut_mode_mask = $70;
  isc_dpb_shut_default = $0;
  isc_dpb_shut_normal = $10;
  isc_dpb_shut_multi = $20;
  isc_dpb_shut_single = $30;
  isc_dpb_shut_full = $40;
  isc_dpb_replica_none = byte(0);
  isc_dpb_replica_read_only = byte(1);
  isc_dpb_replica_read_write = byte(2);
  RDB_system = byte(1);
  RDB_id_assigned = byte(2);
  isc_tpb_version1 = byte(1);
  isc_tpb_version3 = byte(3);
  isc_tpb_consistency = byte(1);
  isc_tpb_concurrency = byte(2);
  isc_tpb_shared = byte(3);
  isc_tpb_protected = byte(4);
  isc_tpb_exclusive = byte(5);
  isc_tpb_wait = byte(6);
  isc_tpb_nowait = byte(7);
  isc_tpb_read = byte(8);
  isc_tpb_write = byte(9);
  isc_tpb_lock_read = byte(10);
  isc_tpb_lock_write = byte(11);
  isc_tpb_verb_time = byte(12);
  isc_tpb_commit_time = byte(13);
  isc_tpb_ignore_limbo = byte(14);
  isc_tpb_read_committed = byte(15);
  isc_tpb_autocommit = byte(16);
  isc_tpb_rec_version = byte(17);
  isc_tpb_no_rec_version = byte(18);
  isc_tpb_restart_requests = byte(19);
  isc_tpb_no_auto_undo = byte(20);
  isc_tpb_lock_timeout = byte(21);
  isc_tpb_read_consistency = byte(22);
  isc_tpb_at_snapshot_number = byte(23);
  isc_bpb_version1 = byte(1);
  isc_bpb_source_type = byte(1);
  isc_bpb_target_type = byte(2);
  isc_bpb_type = byte(3);
  isc_bpb_source_interp = byte(4);
  isc_bpb_target_interp = byte(5);
  isc_bpb_filter_parameter = byte(6);
  isc_bpb_storage = byte(7);
  isc_bpb_type_segmented = $0;
  isc_bpb_type_stream = $1;
  isc_bpb_storage_main = $0;
  isc_bpb_storage_temp = $2;
  isc_spb_version1 = byte(1);
  isc_spb_current_version = byte(2);
  isc_spb_version3 = byte(3);
  isc_spb_command_line = byte(105);
  isc_spb_dbname = byte(106);
  isc_spb_verbose = byte(107);
  isc_spb_options = byte(108);
  isc_spb_address_path = byte(109);
  isc_spb_process_id = byte(110);
  isc_spb_trusted_auth = byte(111);
  isc_spb_process_name = byte(112);
  isc_spb_trusted_role = byte(113);
  isc_spb_verbint = byte(114);
  isc_spb_auth_block = byte(115);
  isc_spb_auth_plugin_name = byte(116);
  isc_spb_auth_plugin_list = byte(117);
  isc_spb_utf8_filename = byte(118);
  isc_spb_client_version = byte(119);
  isc_spb_remote_protocol = byte(120);
  isc_spb_host_name = byte(121);
  isc_spb_os_user = byte(122);
  isc_spb_config = byte(123);
  isc_spb_expected_db = byte(124);
  isc_action_svc_backup = byte(1);
  isc_action_svc_restore = byte(2);
  isc_action_svc_repair = byte(3);
  isc_action_svc_add_user = byte(4);
  isc_action_svc_delete_user = byte(5);
  isc_action_svc_modify_user = byte(6);
  isc_action_svc_display_user = byte(7);
  isc_action_svc_properties = byte(8);
  isc_action_svc_add_license = byte(9);
  isc_action_svc_remove_license = byte(10);
  isc_action_svc_db_stats = byte(11);
  isc_action_svc_get_ib_log = byte(12);
  isc_action_svc_get_fb_log = byte(12);
  isc_action_svc_nbak = byte(20);
  isc_action_svc_nrest = byte(21);
  isc_action_svc_trace_start = byte(22);
  isc_action_svc_trace_stop = byte(23);
  isc_action_svc_trace_suspend = byte(24);
  isc_action_svc_trace_resume = byte(25);
  isc_action_svc_trace_list = byte(26);
  isc_action_svc_set_mapping = byte(27);
  isc_action_svc_drop_mapping = byte(28);
  isc_action_svc_display_user_adm = byte(29);
  isc_action_svc_validate = byte(30);
  isc_action_svc_nfix = byte(31);
  isc_action_svc_last = byte(32);
  isc_info_svc_svr_db_info = byte(50);
  isc_info_svc_get_license = byte(51);
  isc_info_svc_get_license_mask = byte(52);
  isc_info_svc_get_config = byte(53);
  isc_info_svc_version = byte(54);
  isc_info_svc_server_version = byte(55);
  isc_info_svc_implementation = byte(56);
  isc_info_svc_capabilities = byte(57);
  isc_info_svc_user_dbpath = byte(58);
  isc_info_svc_get_env = byte(59);
  isc_info_svc_get_env_lock = byte(60);
  isc_info_svc_get_env_msg = byte(61);
  isc_info_svc_line = byte(62);
  isc_info_svc_to_eof = byte(63);
  isc_info_svc_timeout = byte(64);
  isc_info_svc_get_licensed_users = byte(65);
  isc_info_svc_limbo_trans = byte(66);
  isc_info_svc_running = byte(67);
  isc_info_svc_get_users = byte(68);
  isc_info_svc_auth_block = byte(69);
  isc_info_svc_stdin = byte(78);
  isc_spb_sec_userid = byte(5);
  isc_spb_sec_groupid = byte(6);
  isc_spb_sec_username = byte(7);
  isc_spb_sec_password = byte(8);
  isc_spb_sec_groupname = byte(9);
  isc_spb_sec_firstname = byte(10);
  isc_spb_sec_middlename = byte(11);
  isc_spb_sec_lastname = byte(12);
  isc_spb_sec_admin = byte(13);
  isc_spb_lic_key = byte(5);
  isc_spb_lic_id = byte(6);
  isc_spb_lic_desc = byte(7);
  isc_spb_bkp_file = byte(5);
  isc_spb_bkp_factor = byte(6);
  isc_spb_bkp_length = byte(7);
  isc_spb_bkp_skip_data = byte(8);
  isc_spb_bkp_stat = byte(15);
  isc_spb_bkp_keyholder = byte(16);
  isc_spb_bkp_keyname = byte(17);
  isc_spb_bkp_crypt = byte(18);
  isc_spb_bkp_include_data = byte(19);
  isc_spb_bkp_parallel_workers = byte(21);
  isc_spb_bkp_ignore_checksums = $01;
  isc_spb_bkp_ignore_limbo = $02;
  isc_spb_bkp_metadata_only = $04;
  isc_spb_bkp_no_garbage_collect = $08;
  isc_spb_bkp_old_descriptions = $10;
  isc_spb_bkp_non_transportable = $20;
  isc_spb_bkp_convert = $40;
  isc_spb_bkp_expand = $80;
  isc_spb_bkp_no_triggers = $8000;
  isc_spb_bkp_zip = $010000;
  isc_spb_bkp_direct_io = $020000;
  isc_spb_prp_page_buffers = byte(5);
  isc_spb_prp_sweep_interval = byte(6);
  isc_spb_prp_shutdown_db = byte(7);
  isc_spb_prp_deny_new_attachments = byte(9);
  isc_spb_prp_deny_new_transactions = byte(10);
  isc_spb_prp_reserve_space = byte(11);
  isc_spb_prp_write_mode = byte(12);
  isc_spb_prp_access_mode = byte(13);
  isc_spb_prp_set_sql_dialect = byte(14);
  isc_spb_prp_activate = $0100;
  isc_spb_prp_db_online = $0200;
  isc_spb_prp_nolinger = $0400;
  isc_spb_prp_force_shutdown = byte(41);
  isc_spb_prp_attachments_shutdown = byte(42);
  isc_spb_prp_transactions_shutdown = byte(43);
  isc_spb_prp_shutdown_mode = byte(44);
  isc_spb_prp_online_mode = byte(45);
  isc_spb_prp_replica_mode = byte(46);
  isc_spb_prp_sm_normal = byte(0);
  isc_spb_prp_sm_multi = byte(1);
  isc_spb_prp_sm_single = byte(2);
  isc_spb_prp_sm_full = byte(3);
  isc_spb_prp_res_use_full = byte(35);
  isc_spb_prp_res = byte(36);
  isc_spb_prp_wm_async = byte(37);
  isc_spb_prp_wm_sync = byte(38);
  isc_spb_prp_am_readonly = byte(39);
  isc_spb_prp_am_readwrite = byte(40);
  isc_spb_prp_rm_none = byte(0);
  isc_spb_prp_rm_readonly = byte(1);
  isc_spb_prp_rm_readwrite = byte(2);
  isc_spb_rpr_commit_trans = byte(15);
  isc_spb_rpr_rollback_trans = byte(34);
  isc_spb_rpr_recover_two_phase = byte(17);
  isc_spb_tra_id = byte(18);
  isc_spb_single_tra_id = byte(19);
  isc_spb_multi_tra_id = byte(20);
  isc_spb_tra_state = byte(21);
  isc_spb_tra_state_limbo = byte(22);
  isc_spb_tra_state_commit = byte(23);
  isc_spb_tra_state_rollback = byte(24);
  isc_spb_tra_state_unknown = byte(25);
  isc_spb_tra_host_site = byte(26);
  isc_spb_tra_remote_site = byte(27);
  isc_spb_tra_db_path = byte(28);
  isc_spb_tra_advise = byte(29);
  isc_spb_tra_advise_commit = byte(30);
  isc_spb_tra_advise_rollback = byte(31);
  isc_spb_tra_advise_unknown = byte(33);
  isc_spb_tra_id_64 = byte(46);
  isc_spb_single_tra_id_64 = byte(47);
  isc_spb_multi_tra_id_64 = byte(48);
  isc_spb_rpr_commit_trans_64 = byte(49);
  isc_spb_rpr_rollback_trans_64 = byte(50);
  isc_spb_rpr_recover_two_phase_64 = byte(51);
  isc_spb_rpr_par_workers = byte(52);
  isc_spb_rpr_validate_db = $01;
  isc_spb_rpr_sweep_db = $02;
  isc_spb_rpr_mend_db = $04;
  isc_spb_rpr_list_limbo_trans = $08;
  isc_spb_rpr_check_db = $10;
  isc_spb_rpr_ignore_checksum = $20;
  isc_spb_rpr_kill_shadows = $40;
  isc_spb_rpr_full = $80;
  isc_spb_rpr_icu = $0800;
  isc_spb_rpr_upgrade_db = $1000;
  isc_spb_res_buffers = byte(9);
  isc_spb_res_page_size = byte(10);
  isc_spb_res_length = byte(11);
  isc_spb_res_access_mode = byte(12);
  isc_spb_res_fix_fss_data = byte(13);
  isc_spb_res_fix_fss_metadata = byte(14);
  isc_spb_res_deactivate_idx = $0100;
  isc_spb_res_no_shadow = $0200;
  isc_spb_res_no_validity = $0400;
  isc_spb_res_one_at_a_time = $0800;
  isc_spb_res_replace = $1000;
  isc_spb_res_create = $2000;
  isc_spb_res_use_all_space = $4000;
  isc_spb_res_replica_mode = byte(20);
  isc_spb_val_tab_incl = byte(1);
  isc_spb_val_tab_excl = byte(2);
  isc_spb_val_idx_incl = byte(3);
  isc_spb_val_idx_excl = byte(4);
  isc_spb_val_lock_timeout = byte(5);
  isc_spb_num_att = byte(5);
  isc_spb_num_db = byte(6);
  isc_spb_sts_table = byte(64);
  isc_spb_sts_data_pages = $01;
  isc_spb_sts_db_log = $02;
  isc_spb_sts_hdr_pages = $04;
  isc_spb_sts_idx_pages = $08;
  isc_spb_sts_sys_relations = $10;
  isc_spb_sts_record_versions = $20;
  isc_spb_sts_nocreation = $80;
  isc_spb_sts_encryption = $100;
  isc_spb_nbk_level = byte(5);
  isc_spb_nbk_file = byte(6);
  isc_spb_nbk_direct = byte(7);
  isc_spb_nbk_guid = byte(8);
  isc_spb_nbk_clean_history = byte(9);
  isc_spb_nbk_keep_days = byte(10);
  isc_spb_nbk_keep_rows = byte(11);
  isc_spb_nbk_no_triggers = $01;
  isc_spb_nbk_inplace = $02;
  isc_spb_nbk_sequence = $04;
  isc_spb_trc_id = byte(1);
  isc_spb_trc_name = byte(2);
  isc_spb_trc_cfg = byte(3);
  isc_sdl_version1 = byte(1);
  isc_sdl_eoc = byte(255);
  isc_sdl_relation = byte(2);
  isc_sdl_rid = byte(3);
  isc_sdl_field = byte(4);
  isc_sdl_fid = byte(5);
  isc_sdl_struct = byte(6);
  isc_sdl_variable = byte(7);
  isc_sdl_scalar = byte(8);
  isc_sdl_tiny_integer = byte(9);
  isc_sdl_short_integer = byte(10);
  isc_sdl_long_integer = byte(11);
  isc_sdl_add = byte(13);
  isc_sdl_subtract = byte(14);
  isc_sdl_multiply = byte(15);
  isc_sdl_divide = byte(16);
  isc_sdl_negate = byte(17);
  isc_sdl_begin = byte(31);
  isc_sdl_end = byte(32);
  isc_sdl_do3 = byte(33);
  isc_sdl_do2 = byte(34);
  isc_sdl_do1 = byte(35);
  isc_sdl_element = byte(36);
  isc_blob_untyped = byte(0);
  isc_blob_text = byte(1);
  isc_blob_blr = byte(2);
  isc_blob_acl = byte(3);
  isc_blob_ranges = byte(4);
  isc_blob_summary = byte(5);
  isc_blob_format = byte(6);
  isc_blob_tra = byte(7);
  isc_blob_extfile = byte(8);
  isc_blob_debug_info = byte(9);
  isc_blob_max_predefined_subtype = byte(10);
  fb_text_subtype_text = byte(0);
  fb_text_subtype_binary = byte(1);
  fb_shut_confirmation = byte(1);
  fb_shut_preproviders = byte(2);
  fb_shut_postproviders = byte(4);
  fb_shut_finish = byte(8);
  fb_shut_exit = byte(16);
  fb_shutrsn_svc_stopped = -1;
  fb_shutrsn_no_connection = -2;
  fb_shutrsn_app_stopped = -3;
  fb_shutrsn_signal = -5;
  fb_shutrsn_services = -6;
  fb_shutrsn_exit_called = -7;
  fb_shutrsn_emergency = -8;
  fb_cancel_disable = byte(1);
  fb_cancel_enable = byte(2);
  fb_cancel_raise = byte(3);
  fb_cancel_abort = byte(4);
  fb_dbg_version = byte(1);
  fb_dbg_end = byte(255);
  fb_dbg_map_src2blr = byte(2);
  fb_dbg_map_varname = byte(3);
  fb_dbg_map_argument = byte(4);
  fb_dbg_subproc = byte(5);
  fb_dbg_subfunc = byte(6);
  fb_dbg_map_curname = byte(7);
  fb_dbg_map_for_curname = byte(8);
  fb_dbg_arg_input = byte(0);
  fb_dbg_arg_output = byte(1);
  isc_info_end = byte(1);
  isc_info_truncated = byte(2);
  isc_info_error = byte(3);
  isc_info_data_not_ready = byte(4);
  isc_info_length = byte(126);
  isc_info_flag_end = byte(127);
  isc_info_db_id = byte(4);
  isc_info_reads = byte(5);
  isc_info_writes = byte(6);
  isc_info_fetches = byte(7);
  isc_info_marks = byte(8);
  isc_info_implementation = byte(11);
  isc_info_isc_version = byte(12);
  isc_info_base_level = byte(13);
  isc_info_page_size = byte(14);
  isc_info_num_buffers = byte(15);
  isc_info_limbo = byte(16);
  isc_info_current_memory = byte(17);
  isc_info_max_memory = byte(18);
  isc_info_window_turns = byte(19);
  isc_info_license = byte(20);
  isc_info_allocation = byte(21);
  isc_info_attachment_id = byte(22);
  isc_info_read_seq_count = byte(23);
  isc_info_read_idx_count = byte(24);
  isc_info_insert_count = byte(25);
  isc_info_update_count = byte(26);
  isc_info_delete_count = byte(27);
  isc_info_backout_count = byte(28);
  isc_info_purge_count = byte(29);
  isc_info_expunge_count = byte(30);
  isc_info_sweep_interval = byte(31);
  isc_info_ods_version = byte(32);
  isc_info_ods_minor_version = byte(33);
  isc_info_no_reserve = byte(34);
  isc_info_logfile = byte(35);
  isc_info_cur_logfile_name = byte(36);
  isc_info_cur_log_part_offset = byte(37);
  isc_info_num_wal_buffers = byte(38);
  isc_info_wal_buffer_size = byte(39);
  isc_info_wal_ckpt_length = byte(40);
  isc_info_wal_cur_ckpt_interval = byte(41);
  isc_info_wal_prv_ckpt_fname = byte(42);
  isc_info_wal_prv_ckpt_poffset = byte(43);
  isc_info_wal_recv_ckpt_fname = byte(44);
  isc_info_wal_recv_ckpt_poffset = byte(45);
  isc_info_wal_grpc_wait_usecs = byte(47);
  isc_info_wal_num_io = byte(48);
  isc_info_wal_avg_io_size = byte(49);
  isc_info_wal_num_commits = byte(50);
  isc_info_wal_avg_grpc_size = byte(51);
  isc_info_forced_writes = byte(52);
  isc_info_user_names = byte(53);
  isc_info_page_errors = byte(54);
  isc_info_record_errors = byte(55);
  isc_info_bpage_errors = byte(56);
  isc_info_dpage_errors = byte(57);
  isc_info_ipage_errors = byte(58);
  isc_info_ppage_errors = byte(59);
  isc_info_tpage_errors = byte(60);
  isc_info_set_page_buffers = byte(61);
  isc_info_db_sql_dialect = byte(62);
  isc_info_db_read_only = byte(63);
  isc_info_db_size_in_pages = byte(64);
  frb_info_att_charset = byte(101);
  isc_info_db_class = byte(102);
  isc_info_firebird_version = byte(103);
  isc_info_oldest_transaction = byte(104);
  isc_info_oldest_active = byte(105);
  isc_info_oldest_snapshot = byte(106);
  isc_info_next_transaction = byte(107);
  isc_info_db_provider = byte(108);
  isc_info_active_transactions = byte(109);
  isc_info_active_tran_count = byte(110);
  isc_info_creation_date = byte(111);
  isc_info_db_file_size = byte(112);
  fb_info_page_contents = byte(113);
  fb_info_implementation = byte(114);
  fb_info_page_warns = byte(115);
  fb_info_record_warns = byte(116);
  fb_info_bpage_warns = byte(117);
  fb_info_dpage_warns = byte(118);
  fb_info_ipage_warns = byte(119);
  fb_info_ppage_warns = byte(120);
  fb_info_tpage_warns = byte(121);
  fb_info_pip_errors = byte(122);
  fb_info_pip_warns = byte(123);
  fb_info_pages_used = byte(124);
  fb_info_pages_free = byte(125);
  fb_info_ses_idle_timeout_db = byte(129);
  fb_info_ses_idle_timeout_att = byte(130);
  fb_info_ses_idle_timeout_run = byte(131);
  fb_info_conn_flags = byte(132);
  fb_info_crypt_key = byte(133);
  fb_info_crypt_state = byte(134);
  fb_info_statement_timeout_db = byte(135);
  fb_info_statement_timeout_att = byte(136);
  fb_info_protocol_version = byte(137);
  fb_info_crypt_plugin = byte(138);
  fb_info_creation_timestamp_tz = byte(139);
  fb_info_wire_crypt = byte(140);
  fb_info_features = byte(141);
  fb_info_next_attachment = byte(142);
  fb_info_next_statement = byte(143);
  fb_info_db_guid = byte(144);
  fb_info_db_file_id = byte(145);
  fb_info_replica_mode = byte(146);
  fb_info_username = byte(147);
  fb_info_sqlrole = byte(148);
  fb_info_parallel_workers = byte(149);
  fb_info_crypt_encrypted = $01;
  fb_info_crypt_process = $02;
  fb_feature_multi_statements = byte(1);
  fb_feature_multi_transactions = byte(2);
  fb_feature_named_parameters = byte(3);
  fb_feature_session_reset = byte(4);
  fb_feature_read_consistency = byte(5);
  fb_feature_statement_timeout = byte(6);
  fb_feature_statement_long_life = byte(7);
  fb_info_replica_none = byte(0);
  fb_info_replica_read_only = byte(1);
  fb_info_replica_read_write = byte(2);
  isc_info_db_impl_rdb_vms = byte(1);
  isc_info_db_impl_rdb_eln = byte(2);
  isc_info_db_impl_rdb_eln_dev = byte(3);
  isc_info_db_impl_rdb_vms_y = byte(4);
  isc_info_db_impl_rdb_eln_y = byte(5);
  isc_info_db_impl_jri = byte(6);
  isc_info_db_impl_jsv = byte(7);
  isc_info_db_impl_isc_apl_68K = byte(25);
  isc_info_db_impl_isc_vax_ultr = byte(26);
  isc_info_db_impl_isc_vms = byte(27);
  isc_info_db_impl_isc_sun_68k = byte(28);
  isc_info_db_impl_isc_os2 = byte(29);
  isc_info_db_impl_isc_sun4 = byte(30);
  isc_info_db_impl_isc_hp_ux = byte(31);
  isc_info_db_impl_isc_sun_386i = byte(32);
  isc_info_db_impl_isc_vms_orcl = byte(33);
  isc_info_db_impl_isc_mac_aux = byte(34);
  isc_info_db_impl_isc_rt_aix = byte(35);
  isc_info_db_impl_isc_mips_ult = byte(36);
  isc_info_db_impl_isc_xenix = byte(37);
  isc_info_db_impl_isc_dg = byte(38);
  isc_info_db_impl_isc_hp_mpexl = byte(39);
  isc_info_db_impl_isc_hp_ux68K = byte(40);
  isc_info_db_impl_isc_sgi = byte(41);
  isc_info_db_impl_isc_sco_unix = byte(42);
  isc_info_db_impl_isc_cray = byte(43);
  isc_info_db_impl_isc_imp = byte(44);
  isc_info_db_impl_isc_delta = byte(45);
  isc_info_db_impl_isc_next = byte(46);
  isc_info_db_impl_isc_dos = byte(47);
  isc_info_db_impl_m88K = byte(48);
  isc_info_db_impl_unixware = byte(49);
  isc_info_db_impl_isc_winnt_x86 = byte(50);
  isc_info_db_impl_isc_epson = byte(51);
  isc_info_db_impl_alpha_osf = byte(52);
  isc_info_db_impl_alpha_vms = byte(53);
  isc_info_db_impl_netware_386 = byte(54);
  isc_info_db_impl_win_only = byte(55);
  isc_info_db_impl_ncr_3000 = byte(56);
  isc_info_db_impl_winnt_ppc = byte(57);
  isc_info_db_impl_dg_x86 = byte(58);
  isc_info_db_impl_sco_ev = byte(59);
  isc_info_db_impl_i386 = byte(60);
  isc_info_db_impl_freebsd = byte(61);
  isc_info_db_impl_netbsd = byte(62);
  isc_info_db_impl_darwin_ppc = byte(63);
  isc_info_db_impl_sinixz = byte(64);
  isc_info_db_impl_linux_sparc = byte(65);
  isc_info_db_impl_linux_amd64 = byte(66);
  isc_info_db_impl_freebsd_amd64 = byte(67);
  isc_info_db_impl_winnt_amd64 = byte(68);
  isc_info_db_impl_linux_ppc = byte(69);
  isc_info_db_impl_darwin_x86 = byte(70);
  isc_info_db_impl_linux_mipsel = byte(71);
  isc_info_db_impl_linux_mips = byte(72);
  isc_info_db_impl_darwin_x64 = byte(73);
  isc_info_db_impl_sun_amd64 = byte(74);
  isc_info_db_impl_linux_arm = byte(75);
  isc_info_db_impl_linux_ia64 = byte(76);
  isc_info_db_impl_darwin_ppc64 = byte(77);
  isc_info_db_impl_linux_s390x = byte(78);
  isc_info_db_impl_linux_s390 = byte(79);
  isc_info_db_impl_linux_sh = byte(80);
  isc_info_db_impl_linux_sheb = byte(81);
  isc_info_db_impl_linux_hppa = byte(82);
  isc_info_db_impl_linux_alpha = byte(83);
  isc_info_db_impl_linux_arm64 = byte(84);
  isc_info_db_impl_linux_ppc64el = byte(85);
  isc_info_db_impl_linux_ppc64 = byte(86);
  isc_info_db_impl_linux_m68k = byte(87);
  isc_info_db_impl_linux_riscv64 = byte(88);
  isc_info_db_impl_freebsd_ppc64el = byte(89);
  isc_info_db_impl_linux_mips64el = byte(90);
  isc_info_db_impl_freebsd_ppc64 = byte(91);
  isc_info_db_impl_freebsd_ppc = byte(92);
  isc_info_db_class_access = byte(1);
  isc_info_db_class_y_valve = byte(2);
  isc_info_db_class_rem_int = byte(3);
  isc_info_db_class_rem_srvr = byte(4);
  isc_info_db_class_pipe_int = byte(7);
  isc_info_db_class_pipe_srvr = byte(8);
  isc_info_db_class_sam_int = byte(9);
  isc_info_db_class_sam_srvr = byte(10);
  isc_info_db_class_gateway = byte(11);
  isc_info_db_class_cache = byte(12);
  isc_info_db_class_classic_access = byte(13);
  isc_info_db_class_server_access = byte(14);
  isc_info_db_code_rdb_eln = byte(1);
  isc_info_db_code_rdb_vms = byte(2);
  isc_info_db_code_interbase = byte(3);
  isc_info_db_code_firebird = byte(4);
  isc_info_number_messages = byte(4);
  isc_info_max_message = byte(5);
  isc_info_max_send = byte(6);
  isc_info_max_receive = byte(7);
  isc_info_state = byte(8);
  isc_info_message_number = byte(9);
  isc_info_message_size = byte(10);
  isc_info_request_cost = byte(11);
  isc_info_access_path = byte(12);
  isc_info_req_select_count = byte(13);
  isc_info_req_insert_count = byte(14);
  isc_info_req_update_count = byte(15);
  isc_info_req_delete_count = byte(16);
  isc_info_rsb_end = byte(0);
  isc_info_rsb_begin = byte(1);
  isc_info_rsb_type = byte(2);
  isc_info_rsb_relation = byte(3);
  isc_info_rsb_plan = byte(4);
  isc_info_rsb_unknown = byte(1);
  isc_info_rsb_indexed = byte(2);
  isc_info_rsb_navigate = byte(3);
  isc_info_rsb_sequential = byte(4);
  isc_info_rsb_cross = byte(5);
  isc_info_rsb_sort = byte(6);
  isc_info_rsb_first = byte(7);
  isc_info_rsb_boolean = byte(8);
  isc_info_rsb_union = byte(9);
  isc_info_rsb_aggregate = byte(10);
  isc_info_rsb_merge = byte(11);
  isc_info_rsb_ext_sequential = byte(12);
  isc_info_rsb_ext_indexed = byte(13);
  isc_info_rsb_ext_dbkey = byte(14);
  isc_info_rsb_left_cross = byte(15);
  isc_info_rsb_select = byte(16);
  isc_info_rsb_sql_join = byte(17);
  isc_info_rsb_simulate = byte(18);
  isc_info_rsb_sim_cross = byte(19);
  isc_info_rsb_once = byte(20);
  isc_info_rsb_procedure = byte(21);
  isc_info_rsb_skip = byte(22);
  isc_info_rsb_virt_sequential = byte(23);
  isc_info_rsb_recursive = byte(24);
  isc_info_rsb_window = byte(25);
  isc_info_rsb_singular = byte(26);
  isc_info_rsb_writelock = byte(27);
  isc_info_rsb_buffer = byte(28);
  isc_info_rsb_hash = byte(29);
  isc_info_rsb_and = byte(1);
  isc_info_rsb_or = byte(2);
  isc_info_rsb_dbkey = byte(3);
  isc_info_rsb_index = byte(4);
  isc_info_req_active = byte(2);
  isc_info_req_inactive = byte(3);
  isc_info_req_send = byte(4);
  isc_info_req_receive = byte(5);
  isc_info_req_select = byte(6);
  isc_info_req_sql_stall = byte(7);
  isc_info_blob_num_segments = byte(4);
  isc_info_blob_max_segment = byte(5);
  isc_info_blob_total_length = byte(6);
  isc_info_blob_type = byte(7);
  isc_info_tra_id = byte(4);
  isc_info_tra_oldest_interesting = byte(5);
  isc_info_tra_oldest_snapshot = byte(6);
  isc_info_tra_oldest_active = byte(7);
  isc_info_tra_isolation = byte(8);
  isc_info_tra_access = byte(9);
  isc_info_tra_lock_timeout = byte(10);
  fb_info_tra_dbpath = byte(11);
  fb_info_tra_snapshot_number = byte(12);
  isc_info_tra_consistency = byte(1);
  isc_info_tra_concurrency = byte(2);
  isc_info_tra_read_committed = byte(3);
  isc_info_tra_no_rec_version = byte(0);
  isc_info_tra_rec_version = byte(1);
  isc_info_tra_read_consistency = byte(2);
  isc_info_tra_readonly = byte(0);
  isc_info_tra_readwrite = byte(1);
  isc_info_sql_select = byte(4);
  isc_info_sql_bind = byte(5);
  isc_info_sql_num_variables = byte(6);
  isc_info_sql_describe_vars = byte(7);
  isc_info_sql_describe_end = byte(8);
  isc_info_sql_sqlda_seq = byte(9);
  isc_info_sql_message_seq = byte(10);
  isc_info_sql_type = byte(11);
  isc_info_sql_sub_type = byte(12);
  isc_info_sql_scale = byte(13);
  isc_info_sql_length = byte(14);
  isc_info_sql_null_ind = byte(15);
  isc_info_sql_field = byte(16);
  isc_info_sql_relation = byte(17);
  isc_info_sql_owner = byte(18);
  isc_info_sql_alias = byte(19);
  isc_info_sql_sqlda_start = byte(20);
  isc_info_sql_stmt_type = byte(21);
  isc_info_sql_get_plan = byte(22);
  isc_info_sql_records = byte(23);
  isc_info_sql_batch_fetch = byte(24);
  isc_info_sql_relation_alias = byte(25);
  isc_info_sql_explain_plan = byte(26);
  isc_info_sql_stmt_flags = byte(27);
  isc_info_sql_stmt_timeout_user = byte(28);
  isc_info_sql_stmt_timeout_run = byte(29);
  isc_info_sql_stmt_blob_align = byte(30);
  isc_info_sql_exec_path_blr_bytes = byte(31);
  isc_info_sql_exec_path_blr_text = byte(32);
  isc_info_sql_stmt_select = byte(1);
  isc_info_sql_stmt_insert = byte(2);
  isc_info_sql_stmt_update = byte(3);
  isc_info_sql_stmt_delete = byte(4);
  isc_info_sql_stmt_ddl = byte(5);
  isc_info_sql_stmt_get_segment = byte(6);
  isc_info_sql_stmt_put_segment = byte(7);
  isc_info_sql_stmt_exec_procedure = byte(8);
  isc_info_sql_stmt_start_trans = byte(9);
  isc_info_sql_stmt_commit = byte(10);
  isc_info_sql_stmt_rollback = byte(11);
  isc_info_sql_stmt_select_for_upd = byte(12);
  isc_info_sql_stmt_set_generator = byte(13);
  isc_info_sql_stmt_savepoint = byte(14);
  isc_facility    = 20;
  isc_err_base    = 335544320;
  isc_err_factor    = 1;
  isc_arg_end    = 0;  (* end of argument list *)
  isc_arg_gds    = 1;  (* generic DSRI status value *)
  isc_arg_string    = 2;  (* string argument *)
  isc_arg_cstring    = 3;  (* count & string argument *)
  isc_arg_number    = 4;  (* numeric argument (long) *)
  isc_arg_interpreted  = 5;  (* interpreted status code (string) *)
  isc_arg_vms    = 6;  (* VAX/VMS status code (long) *)
  isc_arg_unix    = 7;  (* UNIX error code *)
  isc_arg_domain    = 8;  (* Apollo/Domain error code *)
  isc_arg_dos    = 9;  (* MSDOS/OS2 error code *)
   isc_arith_except = 335544321;
   isc_bad_dbkey = 335544322;
   isc_bad_db_format = 335544323;
   isc_bad_db_handle = 335544324;
   isc_bad_dpb_content = 335544325;
   isc_bad_dpb_form = 335544326;
   isc_bad_req_handle = 335544327;
   isc_bad_segstr_handle = 335544328;
   isc_bad_segstr_id = 335544329;
   isc_bad_tpb_content = 335544330;
   isc_bad_tpb_form = 335544331;
   isc_bad_trans_handle = 335544332;
   isc_bug_check = 335544333;
   isc_convert_error = 335544334;
   isc_db_corrupt = 335544335;
   isc_deadlock = 335544336;
   isc_excess_trans = 335544337;
   isc_from_no_match = 335544338;
   isc_infinap = 335544339;
   isc_infona = 335544340;
   isc_infunk = 335544341;
   isc_integ_fail = 335544342;
   isc_invalid_blr = 335544343;
   isc_io_error = 335544344;
   isc_lock_conflict = 335544345;
   isc_metadata_corrupt = 335544346;
   isc_not_valid = 335544347;
   isc_no_cur_rec = 335544348;
   isc_no_dup = 335544349;
   isc_no_finish = 335544350;
   isc_no_meta_update = 335544351;
   isc_no_priv = 335544352;
   isc_no_recon = 335544353;
   isc_no_record = 335544354;
   isc_no_segstr_close = 335544355;
   isc_obsolete_metadata = 335544356;
   isc_open_trans = 335544357;
   isc_port_len = 335544358;
   isc_read_only_field = 335544359;
   isc_read_only_rel = 335544360;
   isc_read_only_trans = 335544361;
   isc_read_only_view = 335544362;
   isc_req_no_trans = 335544363;
   isc_req_sync = 335544364;
   isc_req_wrong_db = 335544365;
   isc_segment = 335544366;
   isc_segstr_eof = 335544367;
   isc_segstr_no_op = 335544368;
   isc_segstr_no_read = 335544369;
   isc_segstr_no_trans = 335544370;
   isc_segstr_no_write = 335544371;
   isc_segstr_wrong_db = 335544372;
   isc_sys_request = 335544373;
   isc_stream_eof = 335544374;
   isc_unavailable = 335544375;
   isc_unres_rel = 335544376;
   isc_uns_ext = 335544377;
   isc_wish_list = 335544378;
   isc_wrong_ods = 335544379;
   isc_wronumarg = 335544380;
   isc_imp_exc = 335544381;
   isc_random = 335544382;
   isc_fatal_conflict = 335544383;
   isc_badblk = 335544384;
   isc_invpoolcl = 335544385;
   isc_nopoolids = 335544386;
   isc_relbadblk = 335544387;
   isc_blktoobig = 335544388;
   isc_bufexh = 335544389;
   isc_syntaxerr = 335544390;
   isc_bufinuse = 335544391;
   isc_bdbincon = 335544392;
   isc_reqinuse = 335544393;
   isc_badodsver = 335544394;
   isc_relnotdef = 335544395;
   isc_fldnotdef = 335544396;
   isc_dirtypage = 335544397;
   isc_waifortra = 335544398;
   isc_doubleloc = 335544399;
   isc_nodnotfnd = 335544400;
   isc_dupnodfnd = 335544401;
   isc_locnotmar = 335544402;
   isc_badpagtyp = 335544403;
   isc_corrupt = 335544404;
   isc_badpage = 335544405;
   isc_badindex = 335544406;
   isc_dbbnotzer = 335544407;
   isc_tranotzer = 335544408;
   isc_trareqmis = 335544409;
   isc_badhndcnt = 335544410;
   isc_wrotpbver = 335544411;
   isc_wroblrver = 335544412;
   isc_wrodpbver = 335544413;
   isc_blobnotsup = 335544414;
   isc_badrelation = 335544415;
   isc_nodetach = 335544416;
   isc_notremote = 335544417;
   isc_trainlim = 335544418;
   isc_notinlim = 335544419;
   isc_traoutsta = 335544420;
   isc_connect_reject = 335544421;
   isc_dbfile = 335544422;
   isc_orphan = 335544423;
   isc_no_lock_mgr = 335544424;
   isc_ctxinuse = 335544425;
   isc_ctxnotdef = 335544426;
   isc_datnotsup = 335544427;
   isc_badmsgnum = 335544428;
   isc_badparnum = 335544429;
   isc_virmemexh = 335544430;
   isc_blocking_signal = 335544431;
   isc_lockmanerr = 335544432;
   isc_journerr = 335544433;
   isc_keytoobig = 335544434;
   isc_nullsegkey = 335544435;
   isc_sqlerr = 335544436;
   isc_wrodynver = 335544437;
   isc_funnotdef = 335544438;
   isc_funmismat = 335544439;
   isc_bad_msg_vec = 335544440;
   isc_bad_detach = 335544441;
   isc_noargacc_read = 335544442;
   isc_noargacc_write = 335544443;
   isc_read_only = 335544444;
   isc_ext_err = 335544445;
   isc_non_updatable = 335544446;
   isc_no_rollback = 335544447;
   isc_bad_sec_info = 335544448;
   isc_invalid_sec_info = 335544449;
   isc_misc_interpreted = 335544450;
   isc_update_conflict = 335544451;
   isc_unlicensed = 335544452;
   isc_obj_in_use = 335544453;
   isc_nofilter = 335544454;
   isc_shadow_accessed = 335544455;
   isc_invalid_sdl = 335544456;
   isc_out_of_bounds = 335544457;
   isc_invalid_dimension = 335544458;
   isc_rec_in_limbo = 335544459;
   isc_shadow_missing = 335544460;
   isc_cant_validate = 335544461;
   isc_cant_start_journal = 335544462;
   isc_gennotdef = 335544463;
   isc_cant_start_logging = 335544464;
   isc_bad_segstr_type = 335544465;
   isc_foreign_key = 335544466;
   isc_high_minor = 335544467;
   isc_tra_state = 335544468;
   isc_trans_invalid = 335544469;
   isc_buf_invalid = 335544470;
   isc_indexnotdefined = 335544471;
   isc_login = 335544472;
   isc_invalid_bookmark = 335544473;
   isc_bad_lock_level = 335544474;
   isc_relation_lock = 335544475;
   isc_record_lock = 335544476;
   isc_max_idx = 335544477;
   isc_jrn_enable = 335544478;
   isc_old_failure = 335544479;
   isc_old_in_progress = 335544480;
   isc_old_no_space = 335544481;
   isc_no_wal_no_jrn = 335544482;
   isc_num_old_files = 335544483;
   isc_wal_file_open = 335544484;
   isc_bad_stmt_handle = 335544485;
   isc_wal_failure = 335544486;
   isc_walw_err = 335544487;
   isc_logh_small = 335544488;
   isc_logh_inv_version = 335544489;
   isc_logh_open_flag = 335544490;
   isc_logh_open_flag2 = 335544491;
   isc_logh_diff_dbname = 335544492;
   isc_logf_unexpected_eof = 335544493;
   isc_logr_incomplete = 335544494;
   isc_logr_header_small = 335544495;
   isc_logb_small = 335544496;
   isc_wal_illegal_attach = 335544497;
   isc_wal_invalid_wpb = 335544498;
   isc_wal_err_rollover = 335544499;
   isc_no_wal = 335544500;
   isc_drop_wal = 335544501;
   isc_stream_not_defined = 335544502;
   isc_wal_subsys_error = 335544503;
   isc_wal_subsys_corrupt = 335544504;
   isc_no_archive = 335544505;
   isc_shutinprog = 335544506;
   isc_range_in_use = 335544507;
   isc_range_not_found = 335544508;
   isc_charset_not_found = 335544509;
   isc_lock_timeout = 335544510;
   isc_prcnotdef = 335544511;
   isc_prcmismat = 335544512;
   isc_wal_bugcheck = 335544513;
   isc_wal_cant_expand = 335544514;
   isc_codnotdef = 335544515;
   isc_xcpnotdef = 335544516;
   isc_except = 335544517;
   isc_cache_restart = 335544518;
   isc_bad_lock_handle = 335544519;
   isc_jrn_present = 335544520;
   isc_wal_err_rollover2 = 335544521;
   isc_wal_err_logwrite = 335544522;
   isc_wal_err_jrn_comm = 335544523;
   isc_wal_err_expansion = 335544524;
   isc_wal_err_setup = 335544525;
   isc_wal_err_ww_sync = 335544526;
   isc_wal_err_ww_start = 335544527;
   isc_shutdown = 335544528;
   isc_existing_priv_mod = 335544529;
   isc_primary_key_ref = 335544530;
   isc_primary_key_notnull = 335544531;
   isc_ref_cnstrnt_notfound = 335544532;
   isc_foreign_key_notfound = 335544533;
   isc_ref_cnstrnt_update = 335544534;
   isc_check_cnstrnt_update = 335544535;
   isc_check_cnstrnt_del = 335544536;
   isc_integ_index_seg_del = 335544537;
   isc_integ_index_seg_mod = 335544538;
   isc_integ_index_del = 335544539;
   isc_integ_index_mod = 335544540;
   isc_check_trig_del = 335544541;
   isc_check_trig_update = 335544542;
   isc_cnstrnt_fld_del = 335544543;
   isc_cnstrnt_fld_rename = 335544544;
   isc_rel_cnstrnt_update = 335544545;
   isc_constaint_on_view = 335544546;
   isc_invld_cnstrnt_type = 335544547;
   isc_primary_key_exists = 335544548;
   isc_systrig_update = 335544549;
   isc_not_rel_owner = 335544550;
   isc_grant_obj_notfound = 335544551;
   isc_grant_fld_notfound = 335544552;
   isc_grant_nopriv = 335544553;
   isc_nonsql_security_rel = 335544554;
   isc_nonsql_security_fld = 335544555;
   isc_wal_cache_err = 335544556;
   isc_shutfail = 335544557;
   isc_check_constraint = 335544558;
   isc_bad_svc_handle = 335544559;
   isc_shutwarn = 335544560;
   isc_wrospbver = 335544561;
   isc_bad_spb_form = 335544562;
   isc_svcnotdef = 335544563;
   isc_no_jrn = 335544564;
   isc_transliteration_failed = 335544565;
   isc_start_cm_for_wal = 335544566;
   isc_wal_ovflow_log_required = 335544567;
   isc_text_subtype = 335544568;
   isc_dsql_error = 335544569;
   isc_dsql_command_err = 335544570;
   isc_dsql_constant_err = 335544571;
   isc_dsql_cursor_err = 335544572;
   isc_dsql_datatype_err = 335544573;
   isc_dsql_decl_err = 335544574;
   isc_dsql_cursor_update_err = 335544575;
   isc_dsql_cursor_open_err = 335544576;
   isc_dsql_cursor_close_err = 335544577;
   isc_dsql_field_err = 335544578;
   isc_dsql_internal_err = 335544579;
   isc_dsql_relation_err = 335544580;
   isc_dsql_procedure_err = 335544581;
   isc_dsql_request_err = 335544582;
   isc_dsql_sqlda_err = 335544583;
   isc_dsql_var_count_err = 335544584;
   isc_dsql_stmt_handle = 335544585;
   isc_dsql_function_err = 335544586;
   isc_dsql_blob_err = 335544587;
   isc_collation_not_found = 335544588;
   isc_collation_not_for_charset = 335544589;
   isc_dsql_dup_option = 335544590;
   isc_dsql_tran_err = 335544591;
   isc_dsql_invalid_array = 335544592;
   isc_dsql_max_arr_dim_exceeded = 335544593;
   isc_dsql_arr_range_error = 335544594;
   isc_dsql_trigger_err = 335544595;
   isc_dsql_subselect_err = 335544596;
   isc_dsql_crdb_prepare_err = 335544597;
   isc_specify_field_err = 335544598;
   isc_num_field_err = 335544599;
   isc_col_name_err = 335544600;
   isc_where_err = 335544601;
   isc_table_view_err = 335544602;
   isc_distinct_err = 335544603;
   isc_key_field_count_err = 335544604;
   isc_subquery_err = 335544605;
   isc_expression_eval_err = 335544606;
   isc_node_err = 335544607;
   isc_command_end_err = 335544608;
   isc_index_name = 335544609;
   isc_exception_name = 335544610;
   isc_field_name = 335544611;
   isc_token_err = 335544612;
   isc_union_err = 335544613;
   isc_dsql_construct_err = 335544614;
   isc_field_aggregate_err = 335544615;
   isc_field_ref_err = 335544616;
   isc_order_by_err = 335544617;
   isc_return_mode_err = 335544618;
   isc_extern_func_err = 335544619;
   isc_alias_conflict_err = 335544620;
   isc_procedure_conflict_error = 335544621;
   isc_relation_conflict_err = 335544622;
   isc_dsql_domain_err = 335544623;
   isc_idx_seg_err = 335544624;
   isc_node_name_err = 335544625;
   isc_table_name = 335544626;
   isc_proc_name = 335544627;
   isc_idx_create_err = 335544628;
   isc_wal_shadow_err = 335544629;
   isc_dependency = 335544630;
   isc_idx_key_err = 335544631;
   isc_dsql_file_length_err = 335544632;
   isc_dsql_shadow_number_err = 335544633;
   isc_dsql_token_unk_err = 335544634;
   isc_dsql_no_relation_alias = 335544635;
   isc_indexname = 335544636;
   isc_no_stream_plan = 335544637;
   isc_stream_twice = 335544638;
   isc_stream_not_found = 335544639;
   isc_collation_requires_text = 335544640;
   isc_dsql_domain_not_found = 335544641;
   isc_index_unused = 335544642;
   isc_dsql_self_join = 335544643;
   isc_stream_bof = 335544644;
   isc_stream_crack = 335544645;
   isc_db_or_file_exists = 335544646;
   isc_invalid_operator = 335544647;
   isc_conn_lost = 335544648;
   isc_bad_checksum = 335544649;
   isc_page_type_err = 335544650;
   isc_ext_readonly_err = 335544651;
   isc_sing_select_err = 335544652;
   isc_psw_attach = 335544653;
   isc_psw_start_trans = 335544654;
   isc_invalid_direction = 335544655;
   isc_dsql_var_conflict = 335544656;
   isc_dsql_no_blob_array = 335544657;
   isc_dsql_base_table = 335544658;
   isc_duplicate_base_table = 335544659;
   isc_view_alias = 335544660;
   isc_index_root_page_full = 335544661;
   isc_dsql_blob_type_unknown = 335544662;
   isc_req_max_clones_exceeded = 335544663;
   isc_dsql_duplicate_spec = 335544664;
   isc_unique_key_violation = 335544665;
   isc_srvr_version_too_old = 335544666;
   isc_drdb_completed_with_errs = 335544667;
   isc_dsql_procedure_use_err = 335544668;
   isc_dsql_count_mismatch = 335544669;
   isc_blob_idx_err = 335544670;
   isc_array_idx_err = 335544671;
   isc_key_field_err = 335544672;
   isc_no_delete = 335544673;
   isc_del_last_field = 335544674;
   isc_sort_err = 335544675;
   isc_sort_mem_err = 335544676;
   isc_version_err = 335544677;
   isc_inval_key_posn = 335544678;
   isc_no_segments_err = 335544679;
   isc_crrp_data_err = 335544680;
   isc_rec_size_err = 335544681;
   isc_dsql_field_ref = 335544682;
   isc_req_depth_exceeded = 335544683;
   isc_no_field_access = 335544684;
   isc_no_dbkey = 335544685;
   isc_jrn_format_err = 335544686;
   isc_jrn_file_full = 335544687;
   isc_dsql_open_cursor_request = 335544688;
   isc_ib_error = 335544689;
   isc_cache_redef = 335544690;
   isc_cache_too_small = 335544691;
   isc_log_redef = 335544692;
   isc_log_too_small = 335544693;
   isc_partition_too_small = 335544694;
   isc_partition_not_supp = 335544695;
   isc_log_length_spec = 335544696;
   isc_precision_err = 335544697;
   isc_scale_nogt = 335544698;
   isc_expec_short = 335544699;
   isc_expec_long = 335544700;
   isc_expec_ushort = 335544701;
   isc_escape_invalid = 335544702;
   isc_svcnoexe = 335544703;
   isc_net_lookup_err = 335544704;
   isc_service_unknown = 335544705;
   isc_host_unknown = 335544706;
   isc_grant_nopriv_on_base = 335544707;
   isc_dyn_fld_ambiguous = 335544708;
   isc_dsql_agg_ref_err = 335544709;
   isc_complex_view = 335544710;
   isc_unprepared_stmt = 335544711;
   isc_expec_positive = 335544712;
   isc_dsql_sqlda_value_err = 335544713;
   isc_invalid_array_id = 335544714;
   isc_extfile_uns_op = 335544715;
   isc_svc_in_use = 335544716;
   isc_err_stack_limit = 335544717;
   isc_invalid_key = 335544718;
   isc_net_init_error = 335544719;
   isc_loadlib_failure = 335544720;
   isc_network_error = 335544721;
   isc_net_connect_err = 335544722;
   isc_net_connect_listen_err = 335544723;
   isc_net_event_connect_err = 335544724;
   isc_net_event_listen_err = 335544725;
   isc_net_read_err = 335544726;
   isc_net_write_err = 335544727;
   isc_integ_index_deactivate = 335544728;
   isc_integ_deactivate_primary = 335544729;
   isc_cse_not_supported = 335544730;
   isc_tra_must_sweep = 335544731;
   isc_unsupported_network_drive = 335544732;
   isc_io_create_err = 335544733;
   isc_io_open_err = 335544734;
   isc_io_close_err = 335544735;
   isc_io_read_err = 335544736;
   isc_io_write_err = 335544737;
   isc_io_delete_err = 335544738;
   isc_io_access_err = 335544739;
   isc_udf_exception = 335544740;
   isc_lost_db_connection = 335544741;
   isc_no_write_user_priv = 335544742;
   isc_token_too_long = 335544743;
   isc_max_att_exceeded = 335544744;
   isc_login_same_as_role_name = 335544745;
   isc_reftable_requires_pk = 335544746;
   isc_usrname_too_long = 335544747;
   isc_password_too_long = 335544748;
   isc_usrname_required = 335544749;
   isc_password_required = 335544750;
   isc_bad_protocol = 335544751;
   isc_dup_usrname_found = 335544752;
   isc_usrname_not_found = 335544753;
   isc_error_adding_sec_record = 335544754;
   isc_error_modifying_sec_record = 335544755;
   isc_error_deleting_sec_record = 335544756;
   isc_error_updating_sec_db = 335544757;
   isc_sort_rec_size_err = 335544758;
   isc_bad_default_value = 335544759;
   isc_invalid_clause = 335544760;
   isc_too_many_handles = 335544761;
   isc_optimizer_blk_exc = 335544762;
   isc_invalid_string_constant = 335544763;
   isc_transitional_date = 335544764;
   isc_read_only_database = 335544765;
   isc_must_be_dialect_2_and_up = 335544766;
   isc_blob_filter_exception = 335544767;
   isc_exception_access_violation = 335544768;
   isc_exception_datatype_missalignment = 335544769;
   isc_exception_array_bounds_exceeded = 335544770;
   isc_exception_float_denormal_operand = 335544771;
   isc_exception_float_divide_by_zero = 335544772;
   isc_exception_float_inexact_result = 335544773;
   isc_exception_float_invalid_operand = 335544774;
   isc_exception_float_overflow = 335544775;
   isc_exception_float_stack_check = 335544776;
   isc_exception_float_underflow = 335544777;
   isc_exception_integer_divide_by_zero = 335544778;
   isc_exception_integer_overflow = 335544779;
   isc_exception_unknown = 335544780;
   isc_exception_stack_overflow = 335544781;
   isc_exception_sigsegv = 335544782;
   isc_exception_sigill = 335544783;
   isc_exception_sigbus = 335544784;
   isc_exception_sigfpe = 335544785;
   isc_ext_file_delete = 335544786;
   isc_ext_file_modify = 335544787;
   isc_adm_task_denied = 335544788;
   isc_extract_input_mismatch = 335544789;
   isc_insufficient_svc_privileges = 335544790;
   isc_file_in_use = 335544791;
   isc_service_att_err = 335544792;
   isc_ddl_not_allowed_by_db_sql_dial = 335544793;
   isc_cancelled = 335544794;
   isc_unexp_spb_form = 335544795;
   isc_sql_dialect_datatype_unsupport = 335544796;
   isc_svcnouser = 335544797;
   isc_depend_on_uncommitted_rel = 335544798;
   isc_svc_name_missing = 335544799;
   isc_too_many_contexts = 335544800;
   isc_datype_notsup = 335544801;
   isc_dialect_reset_warning = 335544802;
   isc_dialect_not_changed = 335544803;
   isc_database_create_failed = 335544804;
   isc_inv_dialect_specified = 335544805;
   isc_valid_db_dialects = 335544806;
   isc_sqlwarn = 335544807;
   isc_dtype_renamed = 335544808;
   isc_extern_func_dir_error = 335544809;
   isc_date_range_exceeded = 335544810;
   isc_inv_client_dialect_specified = 335544811;
   isc_valid_client_dialects = 335544812;
   isc_optimizer_between_err = 335544813;
   isc_service_not_supported = 335544814;
   isc_generator_name = 335544815;
   isc_udf_name = 335544816;
   isc_bad_limit_param = 335544817;
   isc_bad_skip_param = 335544818;
   isc_io_32bit_exceeded_err = 335544819;
   isc_invalid_savepoint = 335544820;
   isc_dsql_column_pos_err = 335544821;
   isc_dsql_agg_where_err = 335544822;
   isc_dsql_agg_group_err = 335544823;
   isc_dsql_agg_column_err = 335544824;
   isc_dsql_agg_having_err = 335544825;
   isc_dsql_agg_nested_err = 335544826;
   isc_exec_sql_invalid_arg = 335544827;
   isc_exec_sql_invalid_req = 335544828;
   isc_exec_sql_invalid_var = 335544829;
   isc_exec_sql_max_call_exceeded = 335544830;
   isc_conf_access_denied = 335544831;
   isc_wrong_backup_state = 335544832;
   isc_wal_backup_err = 335544833;
   isc_cursor_not_open = 335544834;
   isc_bad_shutdown_mode = 335544835;
   isc_concat_overflow = 335544836;
   isc_bad_substring_offset = 335544837;
   isc_foreign_key_target_doesnt_exist = 335544838;
   isc_foreign_key_references_present = 335544839;
   isc_no_update = 335544840;
   isc_cursor_already_open = 335544841;
   isc_stack_trace = 335544842;
   isc_ctx_var_not_found = 335544843;
   isc_ctx_namespace_invalid = 335544844;
   isc_ctx_too_big = 335544845;
   isc_ctx_bad_argument = 335544846;
   isc_identifier_too_long = 335544847;
   isc_except2 = 335544848;
   isc_malformed_string = 335544849;
   isc_prc_out_param_mismatch = 335544850;
   isc_command_end_err2 = 335544851;
   isc_partner_idx_incompat_type = 335544852;
   isc_bad_substring_length = 335544853;
   isc_charset_not_installed = 335544854;
   isc_collation_not_installed = 335544855;
   isc_att_shutdown = 335544856;
   isc_blobtoobig = 335544857;
   isc_must_have_phys_field = 335544858;
   isc_invalid_time_precision = 335544859;
   isc_blob_convert_error = 335544860;
   isc_array_convert_error = 335544861;
   isc_record_lock_not_supp = 335544862;
   isc_partner_idx_not_found = 335544863;
   isc_tra_num_exc = 335544864;
   isc_field_disappeared = 335544865;
   isc_met_wrong_gtt_scope = 335544866;
   isc_subtype_for_internal_use = 335544867;
   isc_illegal_prc_type = 335544868;
   isc_invalid_sort_datatype = 335544869;
   isc_collation_name = 335544870;
   isc_domain_name = 335544871;
   isc_domnotdef = 335544872;
   isc_array_max_dimensions = 335544873;
   isc_max_db_per_trans_allowed = 335544874;
   isc_bad_debug_format = 335544875;
   isc_bad_proc_BLR = 335544876;
   isc_key_too_big = 335544877;
   isc_concurrent_transaction = 335544878;
   isc_not_valid_for_var = 335544879;
   isc_not_valid_for = 335544880;
   isc_need_difference = 335544881;
   isc_long_login = 335544882;
   isc_fldnotdef2 = 335544883;
   isc_invalid_similar_pattern = 335544884;
   isc_bad_teb_form = 335544885;
   isc_tpb_multiple_txn_isolation = 335544886;
   isc_tpb_reserv_before_table = 335544887;
   isc_tpb_multiple_spec = 335544888;
   isc_tpb_option_without_rc = 335544889;
   isc_tpb_conflicting_options = 335544890;
   isc_tpb_reserv_missing_tlen = 335544891;
   isc_tpb_reserv_long_tlen = 335544892;
   isc_tpb_reserv_missing_tname = 335544893;
   isc_tpb_reserv_corrup_tlen = 335544894;
   isc_tpb_reserv_null_tlen = 335544895;
   isc_tpb_reserv_relnotfound = 335544896;
   isc_tpb_reserv_baserelnotfound = 335544897;
   isc_tpb_missing_len = 335544898;
   isc_tpb_missing_value = 335544899;
   isc_tpb_corrupt_len = 335544900;
   isc_tpb_null_len = 335544901;
   isc_tpb_overflow_len = 335544902;
   isc_tpb_invalid_value = 335544903;
   isc_tpb_reserv_stronger_wng = 335544904;
   isc_tpb_reserv_stronger = 335544905;
   isc_tpb_reserv_max_recursion = 335544906;
   isc_tpb_reserv_virtualtbl = 335544907;
   isc_tpb_reserv_systbl = 335544908;
   isc_tpb_reserv_temptbl = 335544909;
   isc_tpb_readtxn_after_writelock = 335544910;
   isc_tpb_writelock_after_readtxn = 335544911;
   isc_time_range_exceeded = 335544912;
   isc_datetime_range_exceeded = 335544913;
   isc_string_truncation = 335544914;
   isc_blob_truncation = 335544915;
   isc_numeric_out_of_range = 335544916;
   isc_shutdown_timeout = 335544917;
   isc_att_handle_busy = 335544918;
   isc_bad_udf_freeit = 335544919;
   isc_eds_provider_not_found = 335544920;
   isc_eds_connection = 335544921;
   isc_eds_preprocess = 335544922;
   isc_eds_stmt_expected = 335544923;
   isc_eds_prm_name_expected = 335544924;
   isc_eds_unclosed_comment = 335544925;
   isc_eds_statement = 335544926;
   isc_eds_input_prm_mismatch = 335544927;
   isc_eds_output_prm_mismatch = 335544928;
   isc_eds_input_prm_not_set = 335544929;
   isc_too_big_blr = 335544930;
   isc_montabexh = 335544931;
   isc_modnotfound = 335544932;
   isc_nothing_to_cancel = 335544933;
   isc_ibutil_not_loaded = 335544934;
   isc_circular_computed = 335544935;
   isc_psw_db_error = 335544936;
   isc_invalid_type_datetime_op = 335544937;
   isc_onlycan_add_timetodate = 335544938;
   isc_onlycan_add_datetotime = 335544939;
   isc_onlycansub_tstampfromtstamp = 335544940;
   isc_onlyoneop_mustbe_tstamp = 335544941;
   isc_invalid_extractpart_time = 335544942;
   isc_invalid_extractpart_date = 335544943;
   isc_invalidarg_extract = 335544944;
   isc_sysf_argmustbe_exact = 335544945;
   isc_sysf_argmustbe_exact_or_fp = 335544946;
   isc_sysf_argviolates_uuidtype = 335544947;
   isc_sysf_argviolates_uuidlen = 335544948;
   isc_sysf_argviolates_uuidfmt = 335544949;
   isc_sysf_argviolates_guidigits = 335544950;
   isc_sysf_invalid_addpart_time = 335544951;
   isc_sysf_invalid_add_datetime = 335544952;
   isc_sysf_invalid_addpart_dtime = 335544953;
   isc_sysf_invalid_add_dtime_rc = 335544954;
   isc_sysf_invalid_diff_dtime = 335544955;
   isc_sysf_invalid_timediff = 335544956;
   isc_sysf_invalid_tstamptimediff = 335544957;
   isc_sysf_invalid_datetimediff = 335544958;
   isc_sysf_invalid_diffpart = 335544959;
   isc_sysf_argmustbe_positive = 335544960;
   isc_sysf_basemustbe_positive = 335544961;
   isc_sysf_argnmustbe_nonneg = 335544962;
   isc_sysf_argnmustbe_positive = 335544963;
   isc_sysf_invalid_zeropowneg = 335544964;
   isc_sysf_invalid_negpowfp = 335544965;
   isc_sysf_invalid_scale = 335544966;
   isc_sysf_argmustbe_nonneg = 335544967;
   isc_sysf_binuuid_mustbe_str = 335544968;
   isc_sysf_binuuid_wrongsize = 335544969;
   isc_missing_required_spb = 335544970;
   isc_net_server_shutdown = 335544971;
   isc_bad_conn_str = 335544972;
   isc_bad_epb_form = 335544973;
   isc_no_threads = 335544974;
   isc_net_event_connect_timeout = 335544975;
   isc_sysf_argmustbe_nonzero = 335544976;
   isc_sysf_argmustbe_range_inc1_1 = 335544977;
   isc_sysf_argmustbe_gteq_one = 335544978;
   isc_sysf_argmustbe_range_exc1_1 = 335544979;
   isc_internal_rejected_params = 335544980;
   isc_sysf_fp_overflow = 335544981;
   isc_udf_fp_overflow = 335544982;
   isc_udf_fp_nan = 335544983;
   isc_instance_conflict = 335544984;
   isc_out_of_temp_space = 335544985;
   isc_eds_expl_tran_ctrl = 335544986;
   isc_no_trusted_spb = 335544987;
   isc_package_name = 335544988;
   isc_cannot_make_not_null = 335544989;
   isc_feature_removed = 335544990;
   isc_view_name = 335544991;
   isc_lock_dir_access = 335544992;
   isc_invalid_fetch_option = 335544993;
   isc_bad_fun_BLR = 335544994;
   isc_func_pack_not_implemented = 335544995;
   isc_proc_pack_not_implemented = 335544996;
   isc_eem_func_not_returned = 335544997;
   isc_eem_proc_not_returned = 335544998;
   isc_eem_trig_not_returned = 335544999;
   isc_eem_bad_plugin_ver = 335545000;
   isc_eem_engine_notfound = 335545001;
   isc_attachment_in_use = 335545002;
   isc_transaction_in_use = 335545003;
   isc_pman_cannot_load_plugin = 335545004;
   isc_pman_module_notfound = 335545005;
   isc_pman_entrypoint_notfound = 335545006;
   isc_pman_module_bad = 335545007;
   isc_pman_plugin_notfound = 335545008;
   isc_sysf_invalid_trig_namespace = 335545009;
   isc_unexpected_null = 335545010;
   isc_type_notcompat_blob = 335545011;
   isc_invalid_date_val = 335545012;
   isc_invalid_time_val = 335545013;
   isc_invalid_timestamp_val = 335545014;
   isc_invalid_index_val = 335545015;
   isc_formatted_exception = 335545016;
   isc_async_active = 335545017;
   isc_private_function = 335545018;
   isc_private_procedure = 335545019;
   isc_request_outdated = 335545020;
   isc_bad_events_handle = 335545021;
   isc_cannot_copy_stmt = 335545022;
   isc_invalid_boolean_usage = 335545023;
   isc_sysf_argscant_both_be_zero = 335545024;
   isc_spb_no_id = 335545025;
   isc_ee_blr_mismatch_null = 335545026;
   isc_ee_blr_mismatch_length = 335545027;
   isc_ss_out_of_bounds = 335545028;
   isc_missing_data_structures = 335545029;
   isc_protect_sys_tab = 335545030;
   isc_libtommath_generic = 335545031;
   isc_wroblrver2 = 335545032;
   isc_trunc_limits = 335545033;
   isc_info_access = 335545034;
   isc_svc_no_stdin = 335545035;
   isc_svc_start_failed = 335545036;
   isc_svc_no_switches = 335545037;
   isc_svc_bad_size = 335545038;
   isc_no_crypt_plugin = 335545039;
   isc_cp_name_too_long = 335545040;
   isc_cp_process_active = 335545041;
   isc_cp_already_crypted = 335545042;
   isc_decrypt_error = 335545043;
   isc_no_providers = 335545044;
   isc_null_spb = 335545045;
   isc_max_args_exceeded = 335545046;
   isc_ee_blr_mismatch_names_count = 335545047;
   isc_ee_blr_mismatch_name_not_found = 335545048;
   isc_bad_result_set = 335545049;
   isc_wrong_message_length = 335545050;
   isc_no_output_format = 335545051;
   isc_item_finish = 335545052;
   isc_miss_config = 335545053;
   isc_conf_line = 335545054;
   isc_conf_include = 335545055;
   isc_include_depth = 335545056;
   isc_include_miss = 335545057;
   isc_protect_ownership = 335545058;
   isc_badvarnum = 335545059;
   isc_sec_context = 335545060;
   isc_multi_segment = 335545061;
   isc_login_changed = 335545062;
   isc_auth_handshake_limit = 335545063;
   isc_wirecrypt_incompatible = 335545064;
   isc_miss_wirecrypt = 335545065;
   isc_wirecrypt_key = 335545066;
   isc_wirecrypt_plugin = 335545067;
   isc_secdb_name = 335545068;
   isc_auth_data = 335545069;
   isc_auth_datalength = 335545070;
   isc_info_unprepared_stmt = 335545071;
   isc_idx_key_value = 335545072;
   isc_forupdate_virtualtbl = 335545073;
   isc_forupdate_systbl = 335545074;
   isc_forupdate_temptbl = 335545075;
   isc_cant_modify_sysobj = 335545076;
   isc_server_misconfigured = 335545077;
   isc_alter_role = 335545078;
   isc_map_already_exists = 335545079;
   isc_map_not_exists = 335545080;
   isc_map_load = 335545081;
   isc_map_aster = 335545082;
   isc_map_multi = 335545083;
   isc_map_undefined = 335545084;
   isc_baddpb_damaged_mode = 335545085;
   isc_baddpb_buffers_range = 335545086;
   isc_baddpb_temp_buffers = 335545087;
   isc_map_nodb = 335545088;
   isc_map_notable = 335545089;
   isc_miss_trusted_role = 335545090;
   isc_set_invalid_role = 335545091;
   isc_cursor_not_positioned = 335545092;
   isc_dup_attribute = 335545093;
   isc_dyn_no_priv = 335545094;
   isc_dsql_cant_grant_option = 335545095;
   isc_read_conflict = 335545096;
   isc_crdb_load = 335545097;
   isc_crdb_nodb = 335545098;
   isc_crdb_notable = 335545099;
   isc_interface_version_too_old = 335545100;
   isc_fun_param_mismatch = 335545101;
   isc_savepoint_backout_err = 335545102;
   isc_domain_primary_key_notnull = 335545103;
   isc_invalid_attachment_charset = 335545104;
   isc_map_down = 335545105;
   isc_login_error = 335545106;
   isc_already_opened = 335545107;
   isc_bad_crypt_key = 335545108;
   isc_encrypt_error = 335545109;
   isc_max_idx_depth = 335545110;
   isc_wrong_prvlg = 335545111;
   isc_miss_prvlg = 335545112;
   isc_crypt_checksum = 335545113;
   isc_not_dba = 335545114;
   isc_no_cursor = 335545115;
   isc_dsql_window_incompat_frames = 335545116;
   isc_dsql_window_range_multi_key = 335545117;
   isc_dsql_window_range_inv_key_type = 335545118;
   isc_dsql_window_frame_value_inv_type = 335545119;
   isc_window_frame_value_invalid = 335545120;
   isc_dsql_window_not_found = 335545121;
   isc_dsql_window_cant_overr_part = 335545122;
   isc_dsql_window_cant_overr_order = 335545123;
   isc_dsql_window_cant_overr_frame = 335545124;
   isc_dsql_window_duplicate = 335545125;
   isc_sql_too_long = 335545126;
   isc_cfg_stmt_timeout = 335545127;
   isc_att_stmt_timeout = 335545128;
   isc_req_stmt_timeout = 335545129;
   isc_att_shut_killed = 335545130;
   isc_att_shut_idle = 335545131;
   isc_att_shut_db_down = 335545132;
   isc_att_shut_engine = 335545133;
   isc_overriding_without_identity = 335545134;
   isc_overriding_system_invalid = 335545135;
   isc_overriding_user_invalid = 335545136;
   isc_overriding_missing = 335545137;
   isc_decprecision_err = 335545138;
   isc_decfloat_divide_by_zero = 335545139;
   isc_decfloat_inexact_result = 335545140;
   isc_decfloat_invalid_operation = 335545141;
   isc_decfloat_overflow = 335545142;
   isc_decfloat_underflow = 335545143;
   isc_subfunc_notdef = 335545144;
   isc_subproc_notdef = 335545145;
   isc_subfunc_signat = 335545146;
   isc_subproc_signat = 335545147;
   isc_subfunc_defvaldecl = 335545148;
   isc_subproc_defvaldecl = 335545149;
   isc_subfunc_not_impl = 335545150;
   isc_subproc_not_impl = 335545151;
   isc_sysf_invalid_hash_algorithm = 335545152;
   isc_expression_eval_index = 335545153;
   isc_invalid_decfloat_trap = 335545154;
   isc_invalid_decfloat_round = 335545155;
   isc_sysf_invalid_first_last_part = 335545156;
   isc_sysf_invalid_date_timestamp = 335545157;
   isc_precision_err2 = 335545158;
   isc_bad_batch_handle = 335545159;
   isc_intl_char = 335545160;
   isc_null_block = 335545161;
   isc_mixed_info = 335545162;
   isc_unknown_info = 335545163;
   isc_bpb_version = 335545164;
   isc_user_manager = 335545165;
   isc_icu_entrypoint = 335545166;
   isc_icu_library = 335545167;
   isc_metadata_name = 335545168;
   isc_tokens_parse = 335545169;
   isc_iconv_open = 335545170;
   isc_batch_compl_range = 335545171;
   isc_batch_compl_detail = 335545172;
   isc_deflate_init = 335545173;
   isc_inflate_init = 335545174;
   isc_big_segment = 335545175;
   isc_batch_policy = 335545176;
   isc_batch_defbpb = 335545177;
   isc_batch_align = 335545178;
   isc_multi_segment_dup = 335545179;
   isc_non_plugin_protocol = 335545180;
   isc_message_format = 335545181;
   isc_batch_param_version = 335545182;
   isc_batch_msg_long = 335545183;
   isc_batch_open = 335545184;
   isc_batch_type = 335545185;
   isc_batch_param = 335545186;
   isc_batch_blobs = 335545187;
   isc_batch_blob_append = 335545188;
   isc_batch_stream_align = 335545189;
   isc_batch_rpt_blob = 335545190;
   isc_batch_blob_buf = 335545191;
   isc_batch_small_data = 335545192;
   isc_batch_cont_bpb = 335545193;
   isc_batch_big_bpb = 335545194;
   isc_batch_big_segment = 335545195;
   isc_batch_big_seg2 = 335545196;
   isc_batch_blob_id = 335545197;
   isc_batch_too_big = 335545198;
   isc_num_literal = 335545199;
   isc_map_event = 335545200;
   isc_map_overflow = 335545201;
   isc_hdr_overflow = 335545202;
   isc_vld_plugins = 335545203;
   isc_db_crypt_key = 335545204;
   isc_no_keyholder_plugin = 335545205;
   isc_ses_reset_err = 335545206;
   isc_ses_reset_open_trans = 335545207;
   isc_ses_reset_warn = 335545208;
   isc_ses_reset_tran_rollback = 335545209;
   isc_plugin_name = 335545210;
   isc_parameter_name = 335545211;
   isc_file_starting_page_err = 335545212;
   isc_invalid_timezone_offset = 335545213;
   isc_invalid_timezone_region = 335545214;
   isc_invalid_timezone_id = 335545215;
   isc_tom_decode64len = 335545216;
   isc_tom_strblob = 335545217;
   isc_tom_reg = 335545218;
   isc_tom_algorithm = 335545219;
   isc_tom_mode_miss = 335545220;
   isc_tom_mode_bad = 335545221;
   isc_tom_no_mode = 335545222;
   isc_tom_iv_miss = 335545223;
   isc_tom_no_iv = 335545224;
   isc_tom_ctrtype_bad = 335545225;
   isc_tom_no_ctrtype = 335545226;
   isc_tom_ctr_big = 335545227;
   isc_tom_no_ctr = 335545228;
   isc_tom_iv_length = 335545229;
   isc_tom_error = 335545230;
   isc_tom_yarrow_start = 335545231;
   isc_tom_yarrow_setup = 335545232;
   isc_tom_init_mode = 335545233;
   isc_tom_crypt_mode = 335545234;
   isc_tom_decrypt_mode = 335545235;
   isc_tom_init_cip = 335545236;
   isc_tom_crypt_cip = 335545237;
   isc_tom_decrypt_cip = 335545238;
   isc_tom_setup_cip = 335545239;
   isc_tom_setup_chacha = 335545240;
   isc_tom_encode = 335545241;
   isc_tom_decode = 335545242;
   isc_tom_rsa_import = 335545243;
   isc_tom_oaep = 335545244;
   isc_tom_hash_bad = 335545245;
   isc_tom_rsa_make = 335545246;
   isc_tom_rsa_export = 335545247;
   isc_tom_rsa_sign = 335545248;
   isc_tom_rsa_verify = 335545249;
   isc_tom_chacha_key = 335545250;
   isc_bad_repl_handle = 335545251;
   isc_tra_snapshot_does_not_exist = 335545252;
   isc_eds_input_prm_not_used = 335545253;
   isc_effective_user = 335545254;
   isc_invalid_time_zone_bind = 335545255;
   isc_invalid_decfloat_bind = 335545256;
   isc_odd_hex_len = 335545257;
   isc_invalid_hex_digit = 335545258;
   isc_bind_err = 335545259;
   isc_bind_statement = 335545260;
   isc_bind_convert = 335545261;
   isc_cannot_update_old_blob = 335545262;
   isc_cannot_read_new_blob = 335545263;
   isc_dyn_no_create_priv = 335545264;
   isc_suspend_without_returns = 335545265;
   isc_truncate_warn = 335545266;
   isc_truncate_monitor = 335545267;
   isc_truncate_context = 335545268;
   isc_merge_dup_update = 335545269;
   isc_wrong_page = 335545270;
   isc_repl_error = 335545271;
   isc_ses_reset_failed = 335545272;
   isc_block_size = 335545273;
   isc_tom_key_length = 335545274;
   isc_inf_invalid_args = 335545275;
   isc_sysf_invalid_null_empty = 335545276;
   isc_bad_loctab_num = 335545277;
   isc_quoted_str_bad = 335545278;
   isc_quoted_str_miss = 335545279;
   isc_wrong_shmem_ver = 335545280;
   isc_wrong_shmem_bitness = 335545281;
   isc_wrong_proc_plan = 335545282;
   isc_invalid_blob_util_handle = 335545283;
   isc_bad_temp_blob_id = 335545284;
   isc_ods_upgrade_err = 335545285;
   isc_bad_par_workers = 335545286;
   isc_idx_expr_not_found = 335545287;
   isc_idx_cond_not_found = 335545288;
   isc_gfix_db_name = 335740929;
   isc_gfix_invalid_sw = 335740930;
   isc_gfix_incmp_sw = 335740932;
   isc_gfix_replay_req = 335740933;
   isc_gfix_pgbuf_req = 335740934;
   isc_gfix_val_req = 335740935;
   isc_gfix_pval_req = 335740936;
   isc_gfix_trn_req = 335740937;
   isc_gfix_full_req = 335740940;
   isc_gfix_usrname_req = 335740941;
   isc_gfix_pass_req = 335740942;
   isc_gfix_subs_name = 335740943;
   isc_gfix_wal_req = 335740944;
   isc_gfix_sec_req = 335740945;
   isc_gfix_nval_req = 335740946;
   isc_gfix_type_shut = 335740947;
   isc_gfix_retry = 335740948;
   isc_gfix_retry_db = 335740951;
   isc_gfix_exceed_max = 335740991;
   isc_gfix_corrupt_pool = 335740992;
   isc_gfix_mem_exhausted = 335740993;
   isc_gfix_bad_pool = 335740994;
   isc_gfix_trn_not_valid = 335740995;
   isc_gfix_unexp_eoi = 335741012;
   isc_gfix_recon_fail = 335741018;
   isc_gfix_trn_unknown = 335741036;
   isc_gfix_mode_req = 335741038;
   isc_gfix_pzval_req = 335741042;
   isc_dsql_dbkey_from_non_table = 336003074;
   isc_dsql_transitional_numeric = 336003075;
   isc_dsql_dialect_warning_expr = 336003076;
   isc_sql_db_dialect_dtype_unsupport = 336003077;
   isc_sql_dialect_conflict_num = 336003079;
   isc_dsql_warning_number_ambiguous = 336003080;
   isc_dsql_warning_number_ambiguous1 = 336003081;
   isc_dsql_warn_precision_ambiguous = 336003082;
   isc_dsql_warn_precision_ambiguous1 = 336003083;
   isc_dsql_warn_precision_ambiguous2 = 336003084;
   isc_dsql_ambiguous_field_name = 336003085;
   isc_dsql_udf_return_pos_err = 336003086;
   isc_dsql_invalid_label = 336003087;
   isc_dsql_datatypes_not_comparable = 336003088;
   isc_dsql_cursor_invalid = 336003089;
   isc_dsql_cursor_redefined = 336003090;
   isc_dsql_cursor_not_found = 336003091;
   isc_dsql_cursor_exists = 336003092;
   isc_dsql_cursor_rel_ambiguous = 336003093;
   isc_dsql_cursor_rel_not_found = 336003094;
   isc_dsql_cursor_not_open = 336003095;
   isc_dsql_type_not_supp_ext_tab = 336003096;
   isc_dsql_feature_not_supported_ods = 336003097;
   isc_primary_key_required = 336003098;
   isc_upd_ins_doesnt_match_pk = 336003099;
   isc_upd_ins_doesnt_match_matching = 336003100;
   isc_upd_ins_with_complex_view = 336003101;
   isc_dsql_incompatible_trigger_type = 336003102;
   isc_dsql_db_trigger_type_cant_change = 336003103;
   isc_dsql_record_version_table = 336003104;
   isc_dsql_invalid_sqlda_version = 336003105;
   isc_dsql_sqlvar_index = 336003106;
   isc_dsql_no_sqlind = 336003107;
   isc_dsql_no_sqldata = 336003108;
   isc_dsql_no_input_sqlda = 336003109;
   isc_dsql_no_output_sqlda = 336003110;
   isc_dsql_wrong_param_num = 336003111;
   isc_dsql_invalid_drop_ss_clause = 336003112;
   isc_upd_ins_cannot_default = 336003113;
   isc_dyn_filter_not_found = 336068645;
   isc_dyn_func_not_found = 336068649;
   isc_dyn_index_not_found = 336068656;
   isc_dyn_view_not_found = 336068662;
   isc_dyn_domain_not_found = 336068697;
   isc_dyn_cant_modify_auto_trig = 336068717;
   isc_dyn_dup_table = 336068740;
   isc_dyn_proc_not_found = 336068748;
   isc_dyn_exception_not_found = 336068752;
   isc_dyn_proc_param_not_found = 336068754;
   isc_dyn_trig_not_found = 336068755;
   isc_dyn_charset_not_found = 336068759;
   isc_dyn_collation_not_found = 336068760;
   isc_dyn_role_not_found = 336068763;
   isc_dyn_name_longer = 336068767;
   isc_dyn_column_does_not_exist = 336068784;
   isc_dyn_role_does_not_exist = 336068796;
   isc_dyn_no_grant_admin_opt = 336068797;
   isc_dyn_user_not_role_member = 336068798;
   isc_dyn_delete_role_failed = 336068799;
   isc_dyn_grant_role_to_user = 336068800;
   isc_dyn_inv_sql_role_name = 336068801;
   isc_dyn_dup_sql_role = 336068802;
   isc_dyn_kywd_spec_for_role = 336068803;
   isc_dyn_roles_not_supported = 336068804;
   isc_dyn_domain_name_exists = 336068812;
   isc_dyn_field_name_exists = 336068813;
   isc_dyn_dependency_exists = 336068814;
   isc_dyn_dtype_invalid = 336068815;
   isc_dyn_char_fld_too_small = 336068816;
   isc_dyn_invalid_dtype_conversion = 336068817;
   isc_dyn_dtype_conv_invalid = 336068818;
   isc_dyn_zero_len_id = 336068820;
   isc_dyn_gen_not_found = 336068822;
   isc_max_coll_per_charset = 336068829;
   isc_invalid_coll_attr = 336068830;
   isc_dyn_wrong_gtt_scope = 336068840;
   isc_dyn_coll_used_table = 336068843;
   isc_dyn_coll_used_domain = 336068844;
   isc_dyn_cannot_del_syscoll = 336068845;
   isc_dyn_cannot_del_def_coll = 336068846;
   isc_dyn_table_not_found = 336068849;
   isc_dyn_coll_used_procedure = 336068851;
   isc_dyn_scale_too_big = 336068852;
   isc_dyn_precision_too_small = 336068853;
   isc_dyn_miss_priv_warning = 336068855;
   isc_dyn_ods_not_supp_feature = 336068856;
   isc_dyn_cannot_addrem_computed = 336068857;
   isc_dyn_no_empty_pw = 336068858;
   isc_dyn_dup_index = 336068859;
   isc_dyn_package_not_found = 336068864;
   isc_dyn_schema_not_found = 336068865;
   isc_dyn_cannot_mod_sysproc = 336068866;
   isc_dyn_cannot_mod_systrig = 336068867;
   isc_dyn_cannot_mod_sysfunc = 336068868;
   isc_dyn_invalid_ddl_proc = 336068869;
   isc_dyn_invalid_ddl_trig = 336068870;
   isc_dyn_funcnotdef_package = 336068871;
   isc_dyn_procnotdef_package = 336068872;
   isc_dyn_funcsignat_package = 336068873;
   isc_dyn_procsignat_package = 336068874;
   isc_dyn_defvaldecl_package_proc = 336068875;
   isc_dyn_package_body_exists = 336068877;
   isc_dyn_invalid_ddl_func = 336068878;
   isc_dyn_newfc_oldsyntax = 336068879;
   isc_dyn_func_param_not_found = 336068886;
   isc_dyn_routine_param_not_found = 336068887;
   isc_dyn_routine_param_ambiguous = 336068888;
   isc_dyn_coll_used_function = 336068889;
   isc_dyn_domain_used_function = 336068890;
   isc_dyn_alter_user_no_clause = 336068891;
   isc_dyn_duplicate_package_item = 336068894;
   isc_dyn_cant_modify_sysobj = 336068895;
   isc_dyn_cant_use_zero_increment = 336068896;
   isc_dyn_cant_use_in_foreignkey = 336068897;
   isc_dyn_defvaldecl_package_func = 336068898;
   isc_dyn_cyclic_role = 336068900;
   isc_dyn_cant_use_zero_inc_ident = 336068904;
   isc_dyn_no_ddl_grant_opt_priv = 336068907;
   isc_dyn_no_grant_opt_priv = 336068908;
   isc_dyn_func_not_exist = 336068909;
   isc_dyn_proc_not_exist = 336068910;
   isc_dyn_pack_not_exist = 336068911;
   isc_dyn_trig_not_exist = 336068912;
   isc_dyn_view_not_exist = 336068913;
   isc_dyn_rel_not_exist = 336068914;
   isc_dyn_exc_not_exist = 336068915;
   isc_dyn_gen_not_exist = 336068916;
   isc_dyn_fld_not_exist = 336068917;
   isc_gbak_unknown_switch = 336330753;
   isc_gbak_page_size_missing = 336330754;
   isc_gbak_page_size_toobig = 336330755;
   isc_gbak_redir_ouput_missing = 336330756;
   isc_gbak_switches_conflict = 336330757;
   isc_gbak_unknown_device = 336330758;
   isc_gbak_no_protection = 336330759;
   isc_gbak_page_size_not_allowed = 336330760;
   isc_gbak_multi_source_dest = 336330761;
   isc_gbak_filename_missing = 336330762;
   isc_gbak_dup_inout_names = 336330763;
   isc_gbak_inv_page_size = 336330764;
   isc_gbak_db_specified = 336330765;
   isc_gbak_db_exists = 336330766;
   isc_gbak_unk_device = 336330767;
   isc_gbak_blob_info_failed = 336330772;
   isc_gbak_unk_blob_item = 336330773;
   isc_gbak_get_seg_failed = 336330774;
   isc_gbak_close_blob_failed = 336330775;
   isc_gbak_open_blob_failed = 336330776;
   isc_gbak_put_blr_gen_id_failed = 336330777;
   isc_gbak_unk_type = 336330778;
   isc_gbak_comp_req_failed = 336330779;
   isc_gbak_start_req_failed = 336330780;
   isc_gbak_rec_failed = 336330781;
   isc_gbak_rel_req_failed = 336330782;
   isc_gbak_db_info_failed = 336330783;
   isc_gbak_no_db_desc = 336330784;
   isc_gbak_db_create_failed = 336330785;
   isc_gbak_decomp_len_error = 336330786;
   isc_gbak_tbl_missing = 336330787;
   isc_gbak_blob_col_missing = 336330788;
   isc_gbak_create_blob_failed = 336330789;
   isc_gbak_put_seg_failed = 336330790;
   isc_gbak_rec_len_exp = 336330791;
   isc_gbak_inv_rec_len = 336330792;
   isc_gbak_exp_data_type = 336330793;
   isc_gbak_gen_id_failed = 336330794;
   isc_gbak_unk_rec_type = 336330795;
   isc_gbak_inv_bkup_ver = 336330796;
   isc_gbak_missing_bkup_desc = 336330797;
   isc_gbak_string_trunc = 336330798;
   isc_gbak_cant_rest_record = 336330799;
   isc_gbak_send_failed = 336330800;
   isc_gbak_no_tbl_name = 336330801;
   isc_gbak_unexp_eof = 336330802;
   isc_gbak_db_format_too_old = 336330803;
   isc_gbak_inv_array_dim = 336330804;
   isc_gbak_xdr_len_expected = 336330807;
   isc_gbak_open_bkup_error = 336330817;
   isc_gbak_open_error = 336330818;
   isc_gbak_missing_block_fac = 336330934;
   isc_gbak_inv_block_fac = 336330935;
   isc_gbak_block_fac_specified = 336330936;
   isc_gbak_missing_username = 336330940;
   isc_gbak_missing_password = 336330941;
   isc_gbak_missing_skipped_bytes = 336330952;
   isc_gbak_inv_skipped_bytes = 336330953;
   isc_gbak_err_restore_charset = 336330965;
   isc_gbak_err_restore_collation = 336330967;
   isc_gbak_read_error = 336330972;
   isc_gbak_write_error = 336330973;
   isc_gbak_db_in_use = 336330985;
   isc_gbak_sysmemex = 336330990;
   isc_gbak_restore_role_failed = 336331002;
   isc_gbak_role_op_missing = 336331005;
   isc_gbak_page_buffers_missing = 336331010;
   isc_gbak_page_buffers_wrong_param = 336331011;
   isc_gbak_page_buffers_restore = 336331012;
   isc_gbak_inv_size = 336331014;
   isc_gbak_file_outof_sequence = 336331015;
   isc_gbak_join_file_missing = 336331016;
   isc_gbak_stdin_not_supptd = 336331017;
   isc_gbak_stdout_not_supptd = 336331018;
   isc_gbak_bkup_corrupt = 336331019;
   isc_gbak_unk_db_file_spec = 336331020;
   isc_gbak_hdr_write_failed = 336331021;
   isc_gbak_disk_space_ex = 336331022;
   isc_gbak_size_lt_min = 336331023;
   isc_gbak_svc_name_missing = 336331025;
   isc_gbak_not_ownr = 336331026;
   isc_gbak_mode_req = 336331031;
   isc_gbak_just_data = 336331033;
   isc_gbak_data_only = 336331034;
   isc_gbak_missing_interval = 336331078;
   isc_gbak_wrong_interval = 336331079;
   isc_gbak_verify_verbint = 336331081;
   isc_gbak_option_only_restore = 336331082;
   isc_gbak_option_only_backup = 336331083;
   isc_gbak_option_conflict = 336331084;
   isc_gbak_param_conflict = 336331085;
   isc_gbak_option_repeated = 336331086;
   isc_gbak_max_dbkey_recursion = 336331091;
   isc_gbak_max_dbkey_length = 336331092;
   isc_gbak_invalid_metadata = 336331093;
   isc_gbak_invalid_data = 336331094;
   isc_gbak_inv_bkup_ver2 = 336331096;
   isc_gbak_db_format_too_old2 = 336331100;
   isc_dsql_too_old_ods = 336397205;
   isc_dsql_table_not_found = 336397206;
   isc_dsql_view_not_found = 336397207;
   isc_dsql_line_col_error = 336397208;
   isc_dsql_unknown_pos = 336397209;
   isc_dsql_no_dup_name = 336397210;
   isc_dsql_too_many_values = 336397211;
   isc_dsql_no_array_computed = 336397212;
   isc_dsql_implicit_domain_name = 336397213;
   isc_dsql_only_can_subscript_array = 336397214;
   isc_dsql_max_sort_items = 336397215;
   isc_dsql_max_group_items = 336397216;
   isc_dsql_conflicting_sort_field = 336397217;
   isc_dsql_derived_table_more_columns = 336397218;
   isc_dsql_derived_table_less_columns = 336397219;
   isc_dsql_derived_field_unnamed = 336397220;
   isc_dsql_derived_field_dup_name = 336397221;
   isc_dsql_derived_alias_select = 336397222;
   isc_dsql_derived_alias_field = 336397223;
   isc_dsql_auto_field_bad_pos = 336397224;
   isc_dsql_cte_wrong_reference = 336397225;
   isc_dsql_cte_cycle = 336397226;
   isc_dsql_cte_outer_join = 336397227;
   isc_dsql_cte_mult_references = 336397228;
   isc_dsql_cte_not_a_union = 336397229;
   isc_dsql_cte_nonrecurs_after_recurs = 336397230;
   isc_dsql_cte_wrong_clause = 336397231;
   isc_dsql_cte_union_all = 336397232;
   isc_dsql_cte_miss_nonrecursive = 336397233;
   isc_dsql_cte_nested_with = 336397234;
   isc_dsql_col_more_than_once_using = 336397235;
   isc_dsql_unsupp_feature_dialect = 336397236;
   isc_dsql_cte_not_used = 336397237;
   isc_dsql_col_more_than_once_view = 336397238;
   isc_dsql_unsupported_in_auto_trans = 336397239;
   isc_dsql_eval_unknode = 336397240;
   isc_dsql_agg_wrongarg = 336397241;
   isc_dsql_agg2_wrongarg = 336397242;
   isc_dsql_nodateortime_pm_string = 336397243;
   isc_dsql_invalid_datetime_subtract = 336397244;
   isc_dsql_invalid_dateortime_add = 336397245;
   isc_dsql_invalid_type_minus_date = 336397246;
   isc_dsql_nostring_addsub_dial3 = 336397247;
   isc_dsql_invalid_type_addsub_dial3 = 336397248;
   isc_dsql_invalid_type_multip_dial1 = 336397249;
   isc_dsql_nostring_multip_dial3 = 336397250;
   isc_dsql_invalid_type_multip_dial3 = 336397251;
   isc_dsql_mustuse_numeric_div_dial1 = 336397252;
   isc_dsql_nostring_div_dial3 = 336397253;
   isc_dsql_invalid_type_div_dial3 = 336397254;
   isc_dsql_nostring_neg_dial3 = 336397255;
   isc_dsql_invalid_type_neg = 336397256;
   isc_dsql_max_distinct_items = 336397257;
   isc_dsql_alter_charset_failed = 336397258;
   isc_dsql_comment_on_failed = 336397259;
   isc_dsql_create_func_failed = 336397260;
   isc_dsql_alter_func_failed = 336397261;
   isc_dsql_create_alter_func_failed = 336397262;
   isc_dsql_drop_func_failed = 336397263;
   isc_dsql_recreate_func_failed = 336397264;
   isc_dsql_create_proc_failed = 336397265;
   isc_dsql_alter_proc_failed = 336397266;
   isc_dsql_create_alter_proc_failed = 336397267;
   isc_dsql_drop_proc_failed = 336397268;
   isc_dsql_recreate_proc_failed = 336397269;
   isc_dsql_create_trigger_failed = 336397270;
   isc_dsql_alter_trigger_failed = 336397271;
   isc_dsql_create_alter_trigger_failed = 336397272;
   isc_dsql_drop_trigger_failed = 336397273;
   isc_dsql_recreate_trigger_failed = 336397274;
   isc_dsql_create_collation_failed = 336397275;
   isc_dsql_drop_collation_failed = 336397276;
   isc_dsql_create_domain_failed = 336397277;
   isc_dsql_alter_domain_failed = 336397278;
   isc_dsql_drop_domain_failed = 336397279;
   isc_dsql_create_except_failed = 336397280;
   isc_dsql_alter_except_failed = 336397281;
   isc_dsql_create_alter_except_failed = 336397282;
   isc_dsql_recreate_except_failed = 336397283;
   isc_dsql_drop_except_failed = 336397284;
   isc_dsql_create_sequence_failed = 336397285;
   isc_dsql_create_table_failed = 336397286;
   isc_dsql_alter_table_failed = 336397287;
   isc_dsql_drop_table_failed = 336397288;
   isc_dsql_recreate_table_failed = 336397289;
   isc_dsql_create_pack_failed = 336397290;
   isc_dsql_alter_pack_failed = 336397291;
   isc_dsql_create_alter_pack_failed = 336397292;
   isc_dsql_drop_pack_failed = 336397293;
   isc_dsql_recreate_pack_failed = 336397294;
   isc_dsql_create_pack_body_failed = 336397295;
   isc_dsql_drop_pack_body_failed = 336397296;
   isc_dsql_recreate_pack_body_failed = 336397297;
   isc_dsql_create_view_failed = 336397298;
   isc_dsql_alter_view_failed = 336397299;
   isc_dsql_create_alter_view_failed = 336397300;
   isc_dsql_recreate_view_failed = 336397301;
   isc_dsql_drop_view_failed = 336397302;
   isc_dsql_drop_sequence_failed = 336397303;
   isc_dsql_recreate_sequence_failed = 336397304;
   isc_dsql_drop_index_failed = 336397305;
   isc_dsql_drop_filter_failed = 336397306;
   isc_dsql_drop_shadow_failed = 336397307;
   isc_dsql_drop_role_failed = 336397308;
   isc_dsql_drop_user_failed = 336397309;
   isc_dsql_create_role_failed = 336397310;
   isc_dsql_alter_role_failed = 336397311;
   isc_dsql_alter_index_failed = 336397312;
   isc_dsql_alter_database_failed = 336397313;
   isc_dsql_create_shadow_failed = 336397314;
   isc_dsql_create_filter_failed = 336397315;
   isc_dsql_create_index_failed = 336397316;
   isc_dsql_create_user_failed = 336397317;
   isc_dsql_alter_user_failed = 336397318;
   isc_dsql_grant_failed = 336397319;
   isc_dsql_revoke_failed = 336397320;
   isc_dsql_cte_recursive_aggregate = 336397321;
   isc_dsql_mapping_failed = 336397322;
   isc_dsql_alter_sequence_failed = 336397323;
   isc_dsql_create_generator_failed = 336397324;
   isc_dsql_set_generator_failed = 336397325;
   isc_dsql_wlock_simple = 336397326;
   isc_dsql_firstskip_rows = 336397327;
   isc_dsql_wlock_aggregates = 336397328;
   isc_dsql_wlock_conflict = 336397329;
   isc_dsql_max_exception_arguments = 336397330;
   isc_dsql_string_byte_length = 336397331;
   isc_dsql_string_char_length = 336397332;
   isc_dsql_max_nesting = 336397333;
   isc_dsql_recreate_user_failed = 336397334;
   isc_gsec_cant_open_db = 336723983;
   isc_gsec_switches_error = 336723984;
   isc_gsec_no_op_spec = 336723985;
   isc_gsec_no_usr_name = 336723986;
   isc_gsec_err_add = 336723987;
   isc_gsec_err_modify = 336723988;
   isc_gsec_err_find_mod = 336723989;
   isc_gsec_err_rec_not_found = 336723990;
   isc_gsec_err_delete = 336723991;
   isc_gsec_err_find_del = 336723992;
   isc_gsec_err_find_disp = 336723996;
   isc_gsec_inv_param = 336723997;
   isc_gsec_op_specified = 336723998;
   isc_gsec_pw_specified = 336723999;
   isc_gsec_uid_specified = 336724000;
   isc_gsec_gid_specified = 336724001;
   isc_gsec_proj_specified = 336724002;
   isc_gsec_org_specified = 336724003;
   isc_gsec_fname_specified = 336724004;
   isc_gsec_mname_specified = 336724005;
   isc_gsec_lname_specified = 336724006;
   isc_gsec_inv_switch = 336724008;
   isc_gsec_amb_switch = 336724009;
   isc_gsec_no_op_specified = 336724010;
   isc_gsec_params_not_allowed = 336724011;
   isc_gsec_incompat_switch = 336724012;
   isc_gsec_inv_username = 336724044;
   isc_gsec_inv_pw_length = 336724045;
   isc_gsec_db_specified = 336724046;
   isc_gsec_db_admin_specified = 336724047;
   isc_gsec_db_admin_pw_specified = 336724048;
   isc_gsec_sql_role_specified = 336724049;
   isc_gstat_unknown_switch = 336920577;
   isc_gstat_retry = 336920578;
   isc_gstat_wrong_ods = 336920579;
   isc_gstat_unexpected_eof = 336920580;
   isc_gstat_open_err = 336920605;
   isc_gstat_read_err = 336920606;
   isc_gstat_sysmemex = 336920607;
   isc_fbsvcmgr_bad_am = 336986113;
   isc_fbsvcmgr_bad_wm = 336986114;
   isc_fbsvcmgr_bad_rs = 336986115;
   isc_fbsvcmgr_info_err = 336986116;
   isc_fbsvcmgr_query_err = 336986117;
   isc_fbsvcmgr_switch_unknown = 336986118;
   isc_fbsvcmgr_bad_sm = 336986159;
   isc_fbsvcmgr_fp_open = 336986160;
   isc_fbsvcmgr_fp_read = 336986161;
   isc_fbsvcmgr_fp_empty = 336986162;
   isc_fbsvcmgr_bad_arg = 336986164;
   isc_fbsvcmgr_info_limbo = 336986170;
   isc_fbsvcmgr_limbo_state = 336986171;
   isc_fbsvcmgr_limbo_advise = 336986172;
   isc_fbsvcmgr_bad_rm = 336986173;
   isc_utl_trusted_switch = 337051649;
   isc_nbackup_missing_param = 337117213;
   isc_nbackup_allowed_switches = 337117214;
   isc_nbackup_unknown_param = 337117215;
   isc_nbackup_unknown_switch = 337117216;
   isc_nbackup_nofetchpw_svc = 337117217;
   isc_nbackup_pwfile_error = 337117218;
   isc_nbackup_size_with_lock = 337117219;
   isc_nbackup_no_switch = 337117220;
   isc_nbackup_err_read = 337117223;
   isc_nbackup_err_write = 337117224;
   isc_nbackup_err_seek = 337117225;
   isc_nbackup_err_opendb = 337117226;
   isc_nbackup_err_fadvice = 337117227;
   isc_nbackup_err_createdb = 337117228;
   isc_nbackup_err_openbk = 337117229;
   isc_nbackup_err_createbk = 337117230;
   isc_nbackup_err_eofdb = 337117231;
   isc_nbackup_fixup_wrongstate = 337117232;
   isc_nbackup_err_db = 337117233;
   isc_nbackup_userpw_toolong = 337117234;
   isc_nbackup_lostrec_db = 337117235;
   isc_nbackup_lostguid_db = 337117236;
   isc_nbackup_err_eofhdrdb = 337117237;
   isc_nbackup_db_notlock = 337117238;
   isc_nbackup_lostguid_bk = 337117239;
   isc_nbackup_page_changed = 337117240;
   isc_nbackup_dbsize_inconsistent = 337117241;
   isc_nbackup_failed_lzbk = 337117242;
   isc_nbackup_err_eofhdrbk = 337117243;
   isc_nbackup_invalid_incbk = 337117244;
   isc_nbackup_unsupvers_incbk = 337117245;
   isc_nbackup_invlevel_incbk = 337117246;
   isc_nbackup_wrong_orderbk = 337117247;
   isc_nbackup_err_eofbk = 337117248;
   isc_nbackup_err_copy = 337117249;
   isc_nbackup_err_eofhdr_restdb = 337117250;
   isc_nbackup_lostguid_l0bk = 337117251;
   isc_nbackup_switchd_parameter = 337117255;
   isc_nbackup_user_stop = 337117257;
   isc_nbackup_deco_parse = 337117259;
   isc_nbackup_lostrec_guid_db = 337117261;
   isc_nbackup_seq_misuse = 337117265;
   isc_nbackup_wrong_param = 337117268;
   isc_nbackup_clean_hist_misuse = 337117269;
   isc_nbackup_clean_hist_missed = 337117270;
   isc_nbackup_keep_hist_missed = 337117271;
   isc_nbackup_second_keep_switch = 337117272;
   isc_trace_conflict_acts = 337182750;
   isc_trace_act_notfound = 337182751;
   isc_trace_switch_once = 337182752;
   isc_trace_param_val_miss = 337182753;
   isc_trace_param_invalid = 337182754;
   isc_trace_switch_unknown = 337182755;
   isc_trace_switch_svc_only = 337182756;
   isc_trace_switch_user_only = 337182757;
   isc_trace_switch_param_miss = 337182758;
   isc_trace_param_act_notcompat = 337182759;
   isc_trace_mandatory_switch_miss = 337182760;
   }
{$ENDIF ZEOS_DISABLE_FIREBIRD}
implementation
{$IFNDEF ZEOS_DISABLE_FIREBIRD}

procedure setVersionError(status: IStatus; interfaceName: PAnsiChar;
  currentVersion, expectedVersion: NativeInt);
var statusVector: array[0..8] of PNativeInt;
begin
  statusVector[0] := PNativeInt(isc_arg_gds);
  statusVector[1] := PNativeInt(isc_interface_version_too_old);
  statusVector[2] := PNativeInt(isc_arg_number);
  statusVector[3] := PNativeInt(expectedVersion);
  statusVector[4] := PNativeInt(isc_arg_number);
  statusVector[5] := PNativeInt(currentVersion);
  statusVector[6] := PNativeInt(isc_arg_string);
  statusVector[7] := PNativeInt(interfaceName);
  statusVector[8] := PNativeInt(isc_arg_end);
  status.setErrors(@statusVector);
end;

const
  sIVersioned: RawByteString = 'IVersioned';
  sIReferenceCounted: RawByteString = 'IReferenceCounted';
  sIDisposable: RawByteString = 'IDisposable';
  sIStatus: RawByteString = 'IStatus';
  sIMaster: RawByteString = 'IMaster';
  sIPluginBase: RawByteString = 'IPluginBase';
  sIPluginSet: RawByteString = 'IPluginSet';
  sIConfigEntry: RawByteString = 'IConfigEntry';
  sIConfig: RawByteString = 'IConfig';
  sIFirebirdConf: RawByteString = 'IFirebirdConf';
  sIPluginConfig: RawByteString = 'IPluginConfig';
  sIPluginFactory: RawByteString = 'IPluginFactory';
  sIPluginModule: RawByteString = 'IPluginModule';
  sIPluginManager: RawByteString = 'IPluginManager';
  sICryptKey: RawByteString = 'ICryptKey';
  sIConfigManager: RawByteString = 'IConfigManager';
  sIEventCallback: RawByteString = 'IEventCallback';
  sIBlob: RawByteString = 'IBlob';
  sITransaction: RawByteString = 'ITransaction';
  sIMessageMetadata: RawByteString = 'IMessageMetadata';
  sIMetadataBuilder: RawByteString = 'IMetadataBuilder';
  sIResultSet: RawByteString = 'IResultSet';
  sIStatement: RawByteString = 'IStatement';
  sIBatch: RawByteString = 'IBatch';
  sIBatchCompletionState: RawByteString = 'IBatchCompletionState';
  sIReplicator: RawByteString = 'IReplicator';
  sIRequest: RawByteString = 'IRequest';
  sIEvents: RawByteString = 'IEvents';
  sIAttachment: RawByteString = 'IAttachment';
  sIService: RawByteString = 'IService';
  sIProvider: RawByteString = 'IProvider';
  sIDtcStart: RawByteString = 'IDtcStart';
  sIDtc: RawByteString = 'IDtc';
  sIAuth: RawByteString = 'IAuth';
  sIWriter: RawByteString = 'IWriter';
  sIServerBlock: RawByteString = 'IServerBlock';
  sIClientBlock: RawByteString = 'IClientBlock';
  sIServer: RawByteString = 'IServer';
  sIClient: RawByteString = 'IClient';
  sIUserField: RawByteString = 'IUserField';
  sICharUserField: RawByteString = 'ICharUserField';
  sIIntUserField: RawByteString = 'IIntUserField';
  sIUser: RawByteString = 'IUser';
  sIListUsers: RawByteString = 'IListUsers';
  sILogonInfo: RawByteString = 'ILogonInfo';
  sIManagement: RawByteString = 'IManagement';
  sIAuthBlock: RawByteString = 'IAuthBlock';
  sIWireCryptPlugin: RawByteString = 'IWireCryptPlugin';
  sICryptKeyCallback: RawByteString = 'ICryptKeyCallback';
  sIKeyHolderPlugin: RawByteString = 'IKeyHolderPlugin';
  sIDbCryptInfo: RawByteString = 'IDbCryptInfo';
  sIDbCryptPlugin: RawByteString = 'IDbCryptPlugin';
  sIExternalContext: RawByteString = 'IExternalContext';
  sIExternalResultSet: RawByteString = 'IExternalResultSet';
  sIExternalFunction: RawByteString = 'IExternalFunction';
  sIExternalProcedure: RawByteString = 'IExternalProcedure';
  sIExternalTrigger: RawByteString = 'IExternalTrigger';
  sIRoutineMetadata: RawByteString = 'IRoutineMetadata';
  sIExternalEngine: RawByteString = 'IExternalEngine';
  sITimer: RawByteString = 'ITimer';
  sITimerControl: RawByteString = 'ITimerControl';
  sIVersionCallback: RawByteString = 'IVersionCallback';
  sIUtil: RawByteString = 'IUtil';
  sIOffsetsCallback: RawByteString = 'IOffsetsCallback';
  sIXpbBuilder: RawByteString = 'IXpbBuilder';
  sITraceConnection: RawByteString = 'ITraceConnection';
  sITraceDatabaseConnection: RawByteString = 'ITraceDatabaseConnection';
  sITraceTransaction: RawByteString = 'ITraceTransaction';
  sITraceParams: RawByteString = 'ITraceParams';
  sITraceStatement: RawByteString = 'ITraceStatement';
  sITraceSQLStatement: RawByteString = 'ITraceSQLStatement';
  sITraceBLRStatement: RawByteString = 'ITraceBLRStatement';
  sITraceDYNRequest: RawByteString = 'ITraceDYNRequest';
  sITraceContextVariable: RawByteString = 'ITraceContextVariable';
  sITraceProcedure: RawByteString = 'ITraceProcedure';
  sITraceFunction: RawByteString = 'ITraceFunction';
  sITraceTrigger: RawByteString = 'ITraceTrigger';
  sITraceServiceConnection: RawByteString = 'ITraceServiceConnection';
  sITraceStatusVector: RawByteString = 'ITraceStatusVector';
  sITraceSweepInfo: RawByteString = 'ITraceSweepInfo';
  sITraceLogWriter: RawByteString = 'ITraceLogWriter';
  sITraceInitInfo: RawByteString = 'ITraceInitInfo';
  sITracePlugin: RawByteString = 'ITracePlugin';
  sITraceFactory: RawByteString = 'ITraceFactory';
  sIUdrFunctionFactory: RawByteString = 'IUdrFunctionFactory';
  sIUdrProcedureFactory: RawByteString = 'IUdrProcedureFactory';
  sIUdrTriggerFactory: RawByteString = 'IUdrTriggerFactory';
  sIUdrPlugin: RawByteString = 'IUdrPlugin';
  sIDecFloat16: RawByteString = 'IDecFloat16';
  sIDecFloat34: RawByteString = 'IDecFloat34';
  sIInt128: RawByteString = 'IInt128';
  sIReplicatedField: RawByteString = 'IReplicatedField';
  sIReplicatedRecord: RawByteString = 'IReplicatedRecord';
  sIReplicatedTransaction: RawByteString = 'IReplicatedTransaction';
  sIReplicatedSession: RawByteString = 'IReplicatedSession';
  sIProfilerPlugin: RawByteString = 'IProfilerPlugin';
  sIProfilerSession: RawByteString = 'IProfilerSession';
  sIProfilerStats: RawByteString = 'IProfilerStats';

{$IFDEF WITH_RECORD_METHODS}
procedure TReferenceCounted.addRef();
begin
  PReferenceCountedVTable(Versioned.vTable)^.addRef(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
procedure IReferenceCounted.addRef();
begin
  TReferenceCountedVTable(vTable).addRef(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReferenceCounted.release(): Integer;
begin
  Result := PReferenceCountedVTable(Versioned.vTable)^.release(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReferenceCounted.release(): Integer;
begin
  Result := TReferenceCountedVTable(vTable).release(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDisposable.dispose();
begin
  PDisposableVTable(Versioned.vTable)^.dispose(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
procedure IDisposable.dispose();
begin
  TDisposableVTable(vTable).dispose(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatus.init();
begin
  PStatusVTable(Disposable.Versioned.vTable)^.init(@Disposable.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatus.init();
begin
  TStatusVTable(vTable).init(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatus.getState(): Cardinal;
begin
  Result := PStatusVTable(Disposable.Versioned.vTable)^.getState(@Disposable.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IStatus.getState(): Cardinal;
begin
  Result := TStatusVTable(vTable).getState(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatus.setErrors2(length: Cardinal; value: PNativeInt);
begin
  PStatusVTable(Disposable.Versioned.vTable)^.setErrors2(@Disposable.Versioned.SelfOffsetPtr, length, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatus.setErrors2(length: Cardinal; value: PNativeInt);
begin
  TStatusVTable(vTable).setErrors2(Self, length, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatus.setWarnings2(length: Cardinal; value: PNativeInt);
begin
  PStatusVTable(Disposable.Versioned.vTable)^.setWarnings2(@Disposable.Versioned.SelfOffsetPtr, length, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatus.setWarnings2(length: Cardinal; value: PNativeInt);
begin
  TStatusVTable(vTable).setWarnings2(Self, length, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatus.setErrors(value: PNativeInt);
begin
  PStatusVTable(Disposable.Versioned.vTable)^.setErrors(@Disposable.Versioned.SelfOffsetPtr, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatus.setErrors(value: PNativeInt);
begin
  TStatusVTable(vTable).setErrors(Self, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatus.setWarnings(value: PNativeInt);
begin
  PStatusVTable(Disposable.Versioned.vTable)^.setWarnings(@Disposable.Versioned.SelfOffsetPtr, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatus.setWarnings(value: PNativeInt);
begin
  TStatusVTable(vTable).setWarnings(Self, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatus.getErrors(): PNativeInt;
begin
  Result := PStatusVTable(Disposable.Versioned.vTable)^.getErrors(@Disposable.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IStatus.getErrors(): PNativeInt;
begin
  Result := TStatusVTable(vTable).getErrors(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatus.getWarnings(): PNativeInt;
begin
  Result := PStatusVTable(Disposable.Versioned.vTable)^.getWarnings(@Disposable.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IStatus.getWarnings(): PNativeInt;
begin
  Result := TStatusVTable(vTable).getWarnings(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatus.clone(): IStatus;
begin
  Result := PStatusVTable(Disposable.Versioned.vTable)^.clone(@Disposable.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IStatus.clone(): IStatus;
begin
  Result := TStatusVTable(vTable).clone(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getStatus(): IStatus;
begin
  Result := PMasterVTable(Versioned.vTable)^.getStatus(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getStatus(): IStatus;
begin
  Result := TMasterVTable(vTable).getStatus(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getDispatcher(): IProvider;
begin
  Result := PMasterVTable(Versioned.vTable)^.getDispatcher(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getDispatcher(): IProvider;
begin
  Result := TMasterVTable(vTable).getDispatcher(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getPluginManager(): IPluginManager;
begin
  Result := PMasterVTable(Versioned.vTable)^.getPluginManager(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getPluginManager(): IPluginManager;
begin
  Result := TMasterVTable(vTable).getPluginManager(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getTimerControl(): ITimerControl;
begin
  Result := PMasterVTable(Versioned.vTable)^.getTimerControl(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getTimerControl(): ITimerControl;
begin
  Result := TMasterVTable(vTable).getTimerControl(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getDtc(): IDtc;
begin
  Result := PMasterVTable(Versioned.vTable)^.getDtc(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getDtc(): IDtc;
begin
  Result := TMasterVTable(vTable).getDtc(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.registerAttachment(provider: IProvider; attachment: IAttachment): IAttachment;
begin
  Result := PMasterVTable(Versioned.vTable)^.registerAttachment(@Versioned.SelfOffsetPtr, provider, attachment);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.registerAttachment(provider: IProvider; attachment: IAttachment): IAttachment;
begin
  Result := TMasterVTable(vTable).registerAttachment(Self, provider, attachment);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.registerTransaction(attachment: IAttachment; transaction: ITransaction): ITransaction;
begin
  Result := PMasterVTable(Versioned.vTable)^.registerTransaction(@Versioned.SelfOffsetPtr, attachment, transaction);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.registerTransaction(attachment: IAttachment; transaction: ITransaction): ITransaction;
begin
  Result := TMasterVTable(vTable).registerTransaction(Self, attachment, transaction);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getMetadataBuilder(status: IStatus; fieldCount: Cardinal): IMetadataBuilder;
begin
  Result := PMasterVTable(Versioned.vTable)^.getMetadataBuilder(@Versioned.SelfOffsetPtr, status, fieldCount);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getMetadataBuilder(status: IStatus; fieldCount: Cardinal): IMetadataBuilder;
begin
  Result := TMasterVTable(vTable).getMetadataBuilder(Self, status, fieldCount);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.serverMode(mode: Integer): Integer;
begin
  Result := PMasterVTable(Versioned.vTable)^.serverMode(@Versioned.SelfOffsetPtr, mode);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.serverMode(mode: Integer): Integer;
begin
  Result := TMasterVTable(vTable).serverMode(Self, mode);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getUtilInterface(): IUtil;
begin
  Result := PMasterVTable(Versioned.vTable)^.getUtilInterface(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getUtilInterface(): IUtil;
begin
  Result := TMasterVTable(vTable).getUtilInterface(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getConfigManager(): IConfigManager;
begin
  Result := PMasterVTable(Versioned.vTable)^.getConfigManager(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getConfigManager(): IConfigManager;
begin
  Result := TMasterVTable(vTable).getConfigManager(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMaster.getProcessExiting(): Boolean;
begin
  Result := PMasterVTable(Versioned.vTable)^.getProcessExiting(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IMaster.getProcessExiting(): Boolean;
begin
  Result := TMasterVTable(vTable).getProcessExiting(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginBase.setOwner(r: IReferenceCounted);
begin
  PPluginBaseVTable(ReferenceCounted.Versioned.vTable)^.setOwner(@ReferenceCounted.Versioned.SelfOffsetPtr, r);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginBase.setOwner(r: IReferenceCounted);
begin
  TPluginBaseVTable(vTable).setOwner(Self, r);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginBase.getOwner(): IReferenceCounted;
begin
  Result := PPluginBaseVTable(ReferenceCounted.Versioned.vTable)^.getOwner(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IPluginBase.getOwner(): IReferenceCounted;
begin
  Result := TPluginBaseVTable(vTable).getOwner(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginSet.getName(): PAnsiChar;
begin
  Result := PPluginSetVTable(ReferenceCounted.Versioned.vTable)^.getName(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IPluginSet.getName(): PAnsiChar;
begin
  Result := TPluginSetVTable(vTable).getName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginSet.getModuleName(): PAnsiChar;
begin
  Result := PPluginSetVTable(ReferenceCounted.Versioned.vTable)^.getModuleName(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IPluginSet.getModuleName(): PAnsiChar;
begin
  Result := TPluginSetVTable(vTable).getModuleName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginSet.getPlugin(status: IStatus): IPluginBase;
begin
  Result := PPluginSetVTable(ReferenceCounted.Versioned.vTable)^.getPlugin(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IPluginSet.getPlugin(status: IStatus): IPluginBase;
begin
  Result := TPluginSetVTable(vTable).getPlugin(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginSet.next(status: IStatus);
begin
  PPluginSetVTable(ReferenceCounted.Versioned.vTable)^.next(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginSet.next(status: IStatus);
begin
  TPluginSetVTable(vTable).next(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginSet.set_(status: IStatus; s: PAnsiChar);
begin
  PPluginSetVTable(ReferenceCounted.Versioned.vTable)^.set_(@ReferenceCounted.Versioned.SelfOffsetPtr, status, s);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginSet.set_(status: IStatus; s: PAnsiChar);
begin
  TPluginSetVTable(vTable).set_(Self, status, s);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigEntry.getName(): PAnsiChar;
begin
  Result := PConfigEntryVTable(ReferenceCounted.Versioned.vTable)^.getName(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IConfigEntry.getName(): PAnsiChar;
begin
  Result := TConfigEntryVTable(vTable).getName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigEntry.getValue(): PAnsiChar;
begin
  Result := PConfigEntryVTable(ReferenceCounted.Versioned.vTable)^.getValue(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IConfigEntry.getValue(): PAnsiChar;
begin
  Result := TConfigEntryVTable(vTable).getValue(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigEntry.getIntValue(): Int64;
begin
  Result := PConfigEntryVTable(ReferenceCounted.Versioned.vTable)^.getIntValue(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IConfigEntry.getIntValue(): Int64;
begin
  Result := TConfigEntryVTable(vTable).getIntValue(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigEntry.getBoolValue(): Boolean;
begin
  Result := PConfigEntryVTable(ReferenceCounted.Versioned.vTable)^.getBoolValue(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IConfigEntry.getBoolValue(): Boolean;
begin
  Result := TConfigEntryVTable(vTable).getBoolValue(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigEntry.getSubConfig(status: IStatus): IConfig;
begin
  Result := PConfigEntryVTable(ReferenceCounted.Versioned.vTable)^.getSubConfig(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IConfigEntry.getSubConfig(status: IStatus): IConfig;
begin
  Result := TConfigEntryVTable(vTable).getSubConfig(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfig.find(status: IStatus; name: PAnsiChar): IConfigEntry;
begin
  Result := PConfigVTable(ReferenceCounted.Versioned.vTable)^.find(@ReferenceCounted.Versioned.SelfOffsetPtr, status, name);
{$ELSE !WITH_RECORD_METHODS}
function IConfig.find(status: IStatus; name: PAnsiChar): IConfigEntry;
begin
  Result := TConfigVTable(vTable).find(Self, status, name);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfig.findValue(status: IStatus; name: PAnsiChar; value: PAnsiChar): IConfigEntry;
begin
  Result := PConfigVTable(ReferenceCounted.Versioned.vTable)^.findValue(@ReferenceCounted.Versioned.SelfOffsetPtr, status, name, value);
{$ELSE !WITH_RECORD_METHODS}
function IConfig.findValue(status: IStatus; name: PAnsiChar; value: PAnsiChar): IConfigEntry;
begin
  Result := TConfigVTable(vTable).findValue(Self, status, name, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfig.findPos(status: IStatus; name: PAnsiChar; pos: Cardinal): IConfigEntry;
begin
  Result := PConfigVTable(ReferenceCounted.Versioned.vTable)^.findPos(@ReferenceCounted.Versioned.SelfOffsetPtr, status, name, pos);
{$ELSE !WITH_RECORD_METHODS}
function IConfig.findPos(status: IStatus; name: PAnsiChar; pos: Cardinal): IConfigEntry;
begin
  Result := TConfigVTable(vTable).findPos(Self, status, name, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TFirebirdConf.getKey(name: PAnsiChar): Cardinal;
begin
  Result := PFirebirdConfVTable(ReferenceCounted.Versioned.vTable)^.getKey(@ReferenceCounted.Versioned.SelfOffsetPtr, name);
{$ELSE !WITH_RECORD_METHODS}
function IFirebirdConf.getKey(name: PAnsiChar): Cardinal;
begin
  Result := TFirebirdConfVTable(vTable).getKey(Self, name);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TFirebirdConf.asInteger(key: Cardinal): Int64;
begin
  Result := PFirebirdConfVTable(ReferenceCounted.Versioned.vTable)^.asInteger(@ReferenceCounted.Versioned.SelfOffsetPtr, key);
{$ELSE !WITH_RECORD_METHODS}
function IFirebirdConf.asInteger(key: Cardinal): Int64;
begin
  Result := TFirebirdConfVTable(vTable).asInteger(Self, key);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TFirebirdConf.asString(key: Cardinal): PAnsiChar;
begin
  Result := PFirebirdConfVTable(ReferenceCounted.Versioned.vTable)^.asString(@ReferenceCounted.Versioned.SelfOffsetPtr, key);
{$ELSE !WITH_RECORD_METHODS}
function IFirebirdConf.asString(key: Cardinal): PAnsiChar;
begin
  Result := TFirebirdConfVTable(vTable).asString(Self, key);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TFirebirdConf.asBoolean(key: Cardinal): Boolean;
begin
  Result := PFirebirdConfVTable(ReferenceCounted.Versioned.vTable)^.asBoolean(@ReferenceCounted.Versioned.SelfOffsetPtr, key);
{$ELSE !WITH_RECORD_METHODS}
function IFirebirdConf.asBoolean(key: Cardinal): Boolean;
begin
  Result := TFirebirdConfVTable(vTable).asBoolean(Self, key);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TFirebirdConf.getVersion(status: IStatus): Cardinal;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIFirebirdConf_VERSION) then begin
    setVersionError(status, Pointer(sIFirebirdConf), ReferenceCounted.Versioned.vTable^.version, cIFirebirdConf_VERSION);
    Result := 0;
  end
  else begin
    Result := PFirebirdConfVTable(ReferenceCounted.Versioned.vTable)^.getVersion(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IFirebirdConf.getVersion(status: IStatus): Cardinal;
begin
  if (vTable.version < cIFirebirdConf_VERSION) then begin
    setVersionError(status, Pointer(sIFirebirdConf), vTable.version, cIFirebirdConf_VERSION);
    Result := 0;
  end
  else begin
    Result := TFirebirdConfVTable(vTable).getVersion(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginConfig.getConfigFileName(): PAnsiChar;
begin
  Result := PPluginConfigVTable(ReferenceCounted.Versioned.vTable)^.getConfigFileName(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IPluginConfig.getConfigFileName(): PAnsiChar;
begin
  Result := TPluginConfigVTable(vTable).getConfigFileName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginConfig.getDefaultConfig(status: IStatus): IConfig;
begin
  Result := PPluginConfigVTable(ReferenceCounted.Versioned.vTable)^.getDefaultConfig(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IPluginConfig.getDefaultConfig(status: IStatus): IConfig;
begin
  Result := TPluginConfigVTable(vTable).getDefaultConfig(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginConfig.getFirebirdConf(status: IStatus): IFirebirdConf;
begin
  Result := PPluginConfigVTable(ReferenceCounted.Versioned.vTable)^.getFirebirdConf(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IPluginConfig.getFirebirdConf(status: IStatus): IFirebirdConf;
begin
  Result := TPluginConfigVTable(vTable).getFirebirdConf(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginConfig.setReleaseDelay(status: IStatus; microSeconds: UInt64);
begin
  PPluginConfigVTable(ReferenceCounted.Versioned.vTable)^.setReleaseDelay(@ReferenceCounted.Versioned.SelfOffsetPtr, status, microSeconds);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginConfig.setReleaseDelay(status: IStatus; microSeconds: UInt64);
begin
  TPluginConfigVTable(vTable).setReleaseDelay(Self, status, microSeconds);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginFactory.createPlugin(status: IStatus; factoryParameter: IPluginConfig): IPluginBase;
begin
  Result := PPluginFactoryVTable(Versioned.vTable)^.createPlugin(@Versioned.SelfOffsetPtr, status, factoryParameter);
{$ELSE !WITH_RECORD_METHODS}
function IPluginFactory.createPlugin(status: IStatus; factoryParameter: IPluginConfig): IPluginBase;
begin
  Result := TPluginFactoryVTable(vTable).createPlugin(Self, status, factoryParameter);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginModule.doClean();
begin
  PPluginModuleVTable(Versioned.vTable)^.doClean(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginModule.doClean();
begin
  TPluginModuleVTable(vTable).doClean(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginModule.threadDetach();
begin
  if (Versioned.vTable^.version < cIPluginModule_VERSION) then begin
  end
  else begin
    PPluginModuleVTable(Versioned.vTable)^.threadDetach(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginModule.threadDetach();
begin
  if (vTable.version < cIPluginModule_VERSION) then begin
  end
  else begin
    TPluginModuleVTable(vTable).threadDetach(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginManager.registerPluginFactory(pluginType: Cardinal; defaultName: PAnsiChar; factory: IPluginFactory);
begin
  PPluginManagerVTable(Versioned.vTable)^.registerPluginFactory(@Versioned.SelfOffsetPtr, pluginType, defaultName, factory);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginManager.registerPluginFactory(pluginType: Cardinal; defaultName: PAnsiChar; factory: IPluginFactory);
begin
  TPluginManagerVTable(vTable).registerPluginFactory(Self, pluginType, defaultName, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginManager.registerModule(cleanup: IPluginModule);
begin
  PPluginManagerVTable(Versioned.vTable)^.registerModule(@Versioned.SelfOffsetPtr, cleanup);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginManager.registerModule(cleanup: IPluginModule);
begin
  TPluginManagerVTable(vTable).registerModule(Self, cleanup);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginManager.unregisterModule(cleanup: IPluginModule);
begin
  PPluginManagerVTable(Versioned.vTable)^.unregisterModule(@Versioned.SelfOffsetPtr, cleanup);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginManager.unregisterModule(cleanup: IPluginModule);
begin
  TPluginManagerVTable(vTable).unregisterModule(Self, cleanup);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginManager.getPlugins(status: IStatus; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: IFirebirdConf): IPluginSet;
begin
  Result := PPluginManagerVTable(Versioned.vTable)^.getPlugins(@Versioned.SelfOffsetPtr, status, pluginType, namesList, firebirdConf);
{$ELSE !WITH_RECORD_METHODS}
function IPluginManager.getPlugins(status: IStatus; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: IFirebirdConf): IPluginSet;
begin
  Result := TPluginManagerVTable(vTable).getPlugins(Self, status, pluginType, namesList, firebirdConf);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TPluginManager.getConfig(status: IStatus; filename: PAnsiChar): IConfig;
begin
  Result := PPluginManagerVTable(Versioned.vTable)^.getConfig(@Versioned.SelfOffsetPtr, status, filename);
{$ELSE !WITH_RECORD_METHODS}
function IPluginManager.getConfig(status: IStatus; filename: PAnsiChar): IConfig;
begin
  Result := TPluginManagerVTable(vTable).getConfig(Self, status, filename);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TPluginManager.releasePlugin(plugin: IPluginBase);
begin
  PPluginManagerVTable(Versioned.vTable)^.releasePlugin(@Versioned.SelfOffsetPtr, plugin);
{$ELSE !WITH_RECORD_METHODS}
procedure IPluginManager.releasePlugin(plugin: IPluginBase);
begin
  TPluginManagerVTable(vTable).releasePlugin(Self, plugin);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TCryptKey.setSymmetric(status: IStatus; type_: PAnsiChar; keyLength: Cardinal; key: Pointer);
begin
  PCryptKeyVTable(Versioned.vTable)^.setSymmetric(@Versioned.SelfOffsetPtr, status, type_, keyLength, key);
{$ELSE !WITH_RECORD_METHODS}
procedure ICryptKey.setSymmetric(status: IStatus; type_: PAnsiChar; keyLength: Cardinal; key: Pointer);
begin
  TCryptKeyVTable(vTable).setSymmetric(Self, status, type_, keyLength, key);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TCryptKey.setAsymmetric(status: IStatus; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer);
begin
  PCryptKeyVTable(Versioned.vTable)^.setAsymmetric(@Versioned.SelfOffsetPtr, status, type_, encryptKeyLength, encryptKey, decryptKeyLength, decryptKey);
{$ELSE !WITH_RECORD_METHODS}
procedure ICryptKey.setAsymmetric(status: IStatus; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer);
begin
  TCryptKeyVTable(vTable).setAsymmetric(Self, status, type_, encryptKeyLength, encryptKey, decryptKeyLength, decryptKey);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TCryptKey.getEncryptKey(length: PCardinal): Pointer;
begin
  Result := PCryptKeyVTable(Versioned.vTable)^.getEncryptKey(@Versioned.SelfOffsetPtr, length);
{$ELSE !WITH_RECORD_METHODS}
function ICryptKey.getEncryptKey(length: PCardinal): Pointer;
begin
  Result := TCryptKeyVTable(vTable).getEncryptKey(Self, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TCryptKey.getDecryptKey(length: PCardinal): Pointer;
begin
  Result := PCryptKeyVTable(Versioned.vTable)^.getDecryptKey(@Versioned.SelfOffsetPtr, length);
{$ELSE !WITH_RECORD_METHODS}
function ICryptKey.getDecryptKey(length: PCardinal): Pointer;
begin
  Result := TCryptKeyVTable(vTable).getDecryptKey(Self, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigManager.getDirectory(code: Cardinal): PAnsiChar;
begin
  Result := PConfigManagerVTable(Versioned.vTable)^.getDirectory(@Versioned.SelfOffsetPtr, code);
{$ELSE !WITH_RECORD_METHODS}
function IConfigManager.getDirectory(code: Cardinal): PAnsiChar;
begin
  Result := TConfigManagerVTable(vTable).getDirectory(Self, code);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigManager.getFirebirdConf(): IFirebirdConf;
begin
  Result := PConfigManagerVTable(Versioned.vTable)^.getFirebirdConf(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IConfigManager.getFirebirdConf(): IFirebirdConf;
begin
  Result := TConfigManagerVTable(vTable).getFirebirdConf(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigManager.getDatabaseConf(dbName: PAnsiChar): IFirebirdConf;
begin
  Result := PConfigManagerVTable(Versioned.vTable)^.getDatabaseConf(@Versioned.SelfOffsetPtr, dbName);
{$ELSE !WITH_RECORD_METHODS}
function IConfigManager.getDatabaseConf(dbName: PAnsiChar): IFirebirdConf;
begin
  Result := TConfigManagerVTable(vTable).getDatabaseConf(Self, dbName);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigManager.getPluginConfig(configuredPlugin: PAnsiChar): IConfig;
begin
  Result := PConfigManagerVTable(Versioned.vTable)^.getPluginConfig(@Versioned.SelfOffsetPtr, configuredPlugin);
{$ELSE !WITH_RECORD_METHODS}
function IConfigManager.getPluginConfig(configuredPlugin: PAnsiChar): IConfig;
begin
  Result := TConfigManagerVTable(vTable).getPluginConfig(Self, configuredPlugin);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigManager.getInstallDirectory(): PAnsiChar;
begin
  Result := PConfigManagerVTable(Versioned.vTable)^.getInstallDirectory(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IConfigManager.getInstallDirectory(): PAnsiChar;
begin
  Result := TConfigManagerVTable(vTable).getInstallDirectory(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigManager.getRootDirectory(): PAnsiChar;
begin
  Result := PConfigManagerVTable(Versioned.vTable)^.getRootDirectory(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IConfigManager.getRootDirectory(): PAnsiChar;
begin
  Result := TConfigManagerVTable(vTable).getRootDirectory(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TConfigManager.getDefaultSecurityDb(): PAnsiChar;
begin
  if (Versioned.vTable^.version < cIConfigManager_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := PConfigManagerVTable(Versioned.vTable)^.getDefaultSecurityDb(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IConfigManager.getDefaultSecurityDb(): PAnsiChar;
begin
  if (vTable.version < cIConfigManager_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := TConfigManagerVTable(vTable).getDefaultSecurityDb(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TEventCallback.eventCallbackFunction(length: Cardinal; events: PByte);
begin
  PEventCallbackVTable(ReferenceCounted.Versioned.vTable)^.eventCallbackFunction(@ReferenceCounted.Versioned.SelfOffsetPtr, length, events);
{$ELSE !WITH_RECORD_METHODS}
procedure IEventCallback.eventCallbackFunction(length: Cardinal; events: PByte);
begin
  TEventCallbackVTable(vTable).eventCallbackFunction(Self, length, events);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBlob.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  PBlobVTable(ReferenceCounted.Versioned.vTable)^.getInfo(@ReferenceCounted.Versioned.SelfOffsetPtr, status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IBlob.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  TBlobVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBlob.getSegment(status: IStatus; bufferLength: Cardinal; buffer: Pointer; segmentLength: PCardinal): Integer;
begin
  Result := PBlobVTable(ReferenceCounted.Versioned.vTable)^.getSegment(@ReferenceCounted.Versioned.SelfOffsetPtr, status, bufferLength, buffer, segmentLength);
{$ELSE !WITH_RECORD_METHODS}
function IBlob.getSegment(status: IStatus; bufferLength: Cardinal; buffer: Pointer; segmentLength: PCardinal): Integer;
begin
  Result := TBlobVTable(vTable).getSegment(Self, status, bufferLength, buffer, segmentLength);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBlob.putSegment(status: IStatus; length: Cardinal; buffer: Pointer);
begin
  PBlobVTable(ReferenceCounted.Versioned.vTable)^.putSegment(@ReferenceCounted.Versioned.SelfOffsetPtr, status, length, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IBlob.putSegment(status: IStatus; length: Cardinal; buffer: Pointer);
begin
  TBlobVTable(vTable).putSegment(Self, status, length, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBlob.deprecatedCancel(status: IStatus);
begin
  PBlobVTable(ReferenceCounted.Versioned.vTable)^.deprecatedCancel(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IBlob.deprecatedCancel(status: IStatus);
begin
  TBlobVTable(vTable).deprecatedCancel(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBlob.deprecatedClose(status: IStatus);
begin
  PBlobVTable(ReferenceCounted.Versioned.vTable)^.deprecatedClose(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IBlob.deprecatedClose(status: IStatus);
begin
  TBlobVTable(vTable).deprecatedClose(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBlob.seek(status: IStatus; mode: Integer; offset: Integer): Integer;
begin
  Result := PBlobVTable(ReferenceCounted.Versioned.vTable)^.seek(@ReferenceCounted.Versioned.SelfOffsetPtr, status, mode, offset);
{$ELSE !WITH_RECORD_METHODS}
function IBlob.seek(status: IStatus; mode: Integer; offset: Integer): Integer;
begin
  Result := TBlobVTable(vTable).seek(Self, status, mode, offset);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBlob.cancel(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIBlob_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIBlob), ReferenceCounted.Versioned.vTable^.version, cIBlob_VERSION);
    end
    else begin
      deprecatedCancel(status);
    end
  end
  else begin
    PBlobVTable(ReferenceCounted.Versioned.vTable)^.cancel(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IBlob.cancel(status: IStatus);
begin
  if (vTable.version < cIBlob_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIBlob), vTable.version, cIBlob_VERSION);
    end
    else begin
      deprecatedCancel(status);
    end
  end
  else begin
    TBlobVTable(vTable).cancel(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBlob.close(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIBlob_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIBlob), ReferenceCounted.Versioned.vTable^.version, cIBlob_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    PBlobVTable(ReferenceCounted.Versioned.vTable)^.close(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IBlob.close(status: IStatus);
begin
  if (vTable.version < cIBlob_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIBlob), vTable.version, cIBlob_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    TBlobVTable(vTable).close(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  PTransactionVTable(ReferenceCounted.Versioned.vTable)^.getInfo(@ReferenceCounted.Versioned.SelfOffsetPtr, status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  TTransactionVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.prepare(status: IStatus; msgLength: Cardinal; message: PByte);
begin
  PTransactionVTable(ReferenceCounted.Versioned.vTable)^.prepare(@ReferenceCounted.Versioned.SelfOffsetPtr, status, msgLength, message);
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.prepare(status: IStatus; msgLength: Cardinal; message: PByte);
begin
  TTransactionVTable(vTable).prepare(Self, status, msgLength, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.deprecatedCommit(status: IStatus);
begin
  PTransactionVTable(ReferenceCounted.Versioned.vTable)^.deprecatedCommit(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.deprecatedCommit(status: IStatus);
begin
  TTransactionVTable(vTable).deprecatedCommit(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.commitRetaining(status: IStatus);
begin
  PTransactionVTable(ReferenceCounted.Versioned.vTable)^.commitRetaining(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.commitRetaining(status: IStatus);
begin
  TTransactionVTable(vTable).commitRetaining(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.deprecatedRollback(status: IStatus);
begin
  PTransactionVTable(ReferenceCounted.Versioned.vTable)^.deprecatedRollback(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.deprecatedRollback(status: IStatus);
begin
  TTransactionVTable(vTable).deprecatedRollback(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.rollbackRetaining(status: IStatus);
begin
  PTransactionVTable(ReferenceCounted.Versioned.vTable)^.rollbackRetaining(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.rollbackRetaining(status: IStatus);
begin
  TTransactionVTable(vTable).rollbackRetaining(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.deprecatedDisconnect(status: IStatus);
begin
  PTransactionVTable(ReferenceCounted.Versioned.vTable)^.deprecatedDisconnect(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.deprecatedDisconnect(status: IStatus);
begin
  TTransactionVTable(vTable).deprecatedDisconnect(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTransaction.join(status: IStatus; transaction: ITransaction): ITransaction;
begin
  Result := PTransactionVTable(ReferenceCounted.Versioned.vTable)^.join(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction);
{$ELSE !WITH_RECORD_METHODS}
function ITransaction.join(status: IStatus; transaction: ITransaction): ITransaction;
begin
  Result := TTransactionVTable(vTable).join(Self, status, transaction);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTransaction.validate(status: IStatus; attachment: IAttachment): ITransaction;
begin
  Result := PTransactionVTable(ReferenceCounted.Versioned.vTable)^.validate(@ReferenceCounted.Versioned.SelfOffsetPtr, status, attachment);
{$ELSE !WITH_RECORD_METHODS}
function ITransaction.validate(status: IStatus; attachment: IAttachment): ITransaction;
begin
  Result := TTransactionVTable(vTable).validate(Self, status, attachment);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTransaction.enterDtc(status: IStatus): ITransaction;
begin
  Result := PTransactionVTable(ReferenceCounted.Versioned.vTable)^.enterDtc(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function ITransaction.enterDtc(status: IStatus): ITransaction;
begin
  Result := TTransactionVTable(vTable).enterDtc(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.commit(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITransaction_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sITransaction), ReferenceCounted.Versioned.vTable^.version, cITransaction_VERSION);
    end
    else begin
      deprecatedCommit(status);
    end
  end
  else begin
    PTransactionVTable(ReferenceCounted.Versioned.vTable)^.commit(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.commit(status: IStatus);
begin
  if (vTable.version < cITransaction_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sITransaction), vTable.version, cITransaction_VERSION);
    end
    else begin
      deprecatedCommit(status);
    end
  end
  else begin
    TTransactionVTable(vTable).commit(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.rollback(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITransaction_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sITransaction), ReferenceCounted.Versioned.vTable^.version, cITransaction_VERSION);
    end
    else begin
      deprecatedRollback(status);
    end
  end
  else begin
    PTransactionVTable(ReferenceCounted.Versioned.vTable)^.rollback(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.rollback(status: IStatus);
begin
  if (vTable.version < cITransaction_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sITransaction), vTable.version, cITransaction_VERSION);
    end
    else begin
      deprecatedRollback(status);
    end
  end
  else begin
    TTransactionVTable(vTable).rollback(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTransaction.disconnect(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITransaction_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sITransaction), ReferenceCounted.Versioned.vTable^.version, cITransaction_VERSION);
    end
    else begin
      deprecatedDisconnect(status);
    end
  end
  else begin
    PTransactionVTable(ReferenceCounted.Versioned.vTable)^.disconnect(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure ITransaction.disconnect(status: IStatus);
begin
  if (vTable.version < cITransaction_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sITransaction), vTable.version, cITransaction_VERSION);
    end
    else begin
      deprecatedDisconnect(status);
    end
  end
  else begin
    TTransactionVTable(vTable).disconnect(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getCount(status: IStatus): Cardinal;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getCount(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getCount(status: IStatus): Cardinal;
begin
  Result := TMessageMetadataVTable(vTable).getCount(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getField(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getField(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getField(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := TMessageMetadataVTable(vTable).getField(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getRelation(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getRelation(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getRelation(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := TMessageMetadataVTable(vTable).getRelation(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getOwner(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getOwner(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getOwner(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := TMessageMetadataVTable(vTable).getOwner(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getAlias(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getAlias(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getAlias(status: IStatus; index: Cardinal): PAnsiChar;
begin
  Result := TMessageMetadataVTable(vTable).getAlias(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getType(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getType(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getType(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := TMessageMetadataVTable(vTable).getType(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.isNullable(status: IStatus; index: Cardinal): Boolean;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.isNullable(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.isNullable(status: IStatus; index: Cardinal): Boolean;
begin
  Result := TMessageMetadataVTable(vTable).isNullable(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getSubType(status: IStatus; index: Cardinal): Integer;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getSubType(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getSubType(status: IStatus; index: Cardinal): Integer;
begin
  Result := TMessageMetadataVTable(vTable).getSubType(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getLength(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getLength(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getLength(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := TMessageMetadataVTable(vTable).getLength(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getScale(status: IStatus; index: Cardinal): Integer;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getScale(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getScale(status: IStatus; index: Cardinal): Integer;
begin
  Result := TMessageMetadataVTable(vTable).getScale(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getCharSet(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getCharSet(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getCharSet(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := TMessageMetadataVTable(vTable).getCharSet(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getOffset(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getOffset(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getOffset(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := TMessageMetadataVTable(vTable).getOffset(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getNullOffset(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getNullOffset(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getNullOffset(status: IStatus; index: Cardinal): Cardinal;
begin
  Result := TMessageMetadataVTable(vTable).getNullOffset(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getBuilder(status: IStatus): IMetadataBuilder;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getBuilder(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getBuilder(status: IStatus): IMetadataBuilder;
begin
  Result := TMessageMetadataVTable(vTable).getBuilder(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getMessageLength(status: IStatus): Cardinal;
begin
  Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getMessageLength(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getMessageLength(status: IStatus): Cardinal;
begin
  Result := TMessageMetadataVTable(vTable).getMessageLength(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getAlignment(status: IStatus): Cardinal;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIMessageMetadata_VERSION) then begin
    setVersionError(status, Pointer(sIMessageMetadata), ReferenceCounted.Versioned.vTable^.version, cIMessageMetadata_VERSION);
    Result := 0;
  end
  else begin
    Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getAlignment(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getAlignment(status: IStatus): Cardinal;
begin
  if (vTable.version < cIMessageMetadata_VERSION) then begin
    setVersionError(status, Pointer(sIMessageMetadata), vTable.version, cIMessageMetadata_VERSION);
    Result := 0;
  end
  else begin
    Result := TMessageMetadataVTable(vTable).getAlignment(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMessageMetadata.getAlignedLength(status: IStatus): Cardinal;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIMessageMetadata_VERSION) then begin
    setVersionError(status, Pointer(sIMessageMetadata), ReferenceCounted.Versioned.vTable^.version, cIMessageMetadata_VERSION);
    Result := 0;
  end
  else begin
    Result := PMessageMetadataVTable(ReferenceCounted.Versioned.vTable)^.getAlignedLength(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IMessageMetadata.getAlignedLength(status: IStatus): Cardinal;
begin
  if (vTable.version < cIMessageMetadata_VERSION) then begin
    setVersionError(status, Pointer(sIMessageMetadata), vTable.version, cIMessageMetadata_VERSION);
    Result := 0;
  end
  else begin
    Result := TMessageMetadataVTable(vTable).getAlignedLength(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setType(status: IStatus; index: Cardinal; type_: Cardinal);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setType(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, type_);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setType(status: IStatus; index: Cardinal; type_: Cardinal);
begin
  TMetadataBuilderVTable(vTable).setType(Self, status, index, type_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setSubType(status: IStatus; index: Cardinal; subType: Integer);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setSubType(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, subType);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setSubType(status: IStatus; index: Cardinal; subType: Integer);
begin
  TMetadataBuilderVTable(vTable).setSubType(Self, status, index, subType);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setLength(status: IStatus; index: Cardinal; length: Cardinal);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setLength(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, length);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setLength(status: IStatus; index: Cardinal; length: Cardinal);
begin
  TMetadataBuilderVTable(vTable).setLength(Self, status, index, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setCharSet(status: IStatus; index: Cardinal; charSet: Cardinal);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setCharSet(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, charSet);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setCharSet(status: IStatus; index: Cardinal; charSet: Cardinal);
begin
  TMetadataBuilderVTable(vTable).setCharSet(Self, status, index, charSet);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setScale(status: IStatus; index: Cardinal; scale: Integer);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setScale(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, scale);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setScale(status: IStatus; index: Cardinal; scale: Integer);
begin
  TMetadataBuilderVTable(vTable).setScale(Self, status, index, scale);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.truncate(status: IStatus; count: Cardinal);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.truncate(@ReferenceCounted.Versioned.SelfOffsetPtr, status, count);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.truncate(status: IStatus; count: Cardinal);
begin
  TMetadataBuilderVTable(vTable).truncate(Self, status, count);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.moveNameToIndex(status: IStatus; name: PAnsiChar; index: Cardinal);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.moveNameToIndex(@ReferenceCounted.Versioned.SelfOffsetPtr, status, name, index);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.moveNameToIndex(status: IStatus; name: PAnsiChar; index: Cardinal);
begin
  TMetadataBuilderVTable(vTable).moveNameToIndex(Self, status, name, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.remove(status: IStatus; index: Cardinal);
begin
  PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.remove(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index);
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.remove(status: IStatus; index: Cardinal);
begin
  TMetadataBuilderVTable(vTable).remove(Self, status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMetadataBuilder.addField(status: IStatus): Cardinal;
begin
  Result := PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.addField(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IMetadataBuilder.addField(status: IStatus): Cardinal;
begin
  Result := TMetadataBuilderVTable(vTable).addField(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TMetadataBuilder.getMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.getMetadata(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IMetadataBuilder.getMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TMetadataBuilderVTable(vTable).getMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setField(status: IStatus; index: Cardinal; field: PAnsiChar);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), ReferenceCounted.Versioned.vTable^.version, cIMetadataBuilder_VERSION);
  end
  else begin
    PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setField(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, field);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setField(status: IStatus; index: Cardinal; field: PAnsiChar);
begin
  if (vTable.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), vTable.version, cIMetadataBuilder_VERSION);
  end
  else begin
    TMetadataBuilderVTable(vTable).setField(Self, status, index, field);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setRelation(status: IStatus; index: Cardinal; relation: PAnsiChar);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), ReferenceCounted.Versioned.vTable^.version, cIMetadataBuilder_VERSION);
  end
  else begin
    PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setRelation(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, relation);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setRelation(status: IStatus; index: Cardinal; relation: PAnsiChar);
begin
  if (vTable.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), vTable.version, cIMetadataBuilder_VERSION);
  end
  else begin
    TMetadataBuilderVTable(vTable).setRelation(Self, status, index, relation);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setOwner(status: IStatus; index: Cardinal; owner: PAnsiChar);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), ReferenceCounted.Versioned.vTable^.version, cIMetadataBuilder_VERSION);
  end
  else begin
    PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setOwner(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, owner);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setOwner(status: IStatus; index: Cardinal; owner: PAnsiChar);
begin
  if (vTable.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), vTable.version, cIMetadataBuilder_VERSION);
  end
  else begin
    TMetadataBuilderVTable(vTable).setOwner(Self, status, index, owner);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TMetadataBuilder.setAlias(status: IStatus; index: Cardinal; alias: PAnsiChar);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), ReferenceCounted.Versioned.vTable^.version, cIMetadataBuilder_VERSION);
  end
  else begin
    PMetadataBuilderVTable(ReferenceCounted.Versioned.vTable)^.setAlias(@ReferenceCounted.Versioned.SelfOffsetPtr, status, index, alias);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IMetadataBuilder.setAlias(status: IStatus; index: Cardinal; alias: PAnsiChar);
begin
  if (vTable.version < cIMetadataBuilder_VERSION) then begin
    setVersionError(status, Pointer(sIMetadataBuilder), vTable.version, cIMetadataBuilder_VERSION);
  end
  else begin
    TMetadataBuilderVTable(vTable).setAlias(Self, status, index, alias);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.fetchNext(status: IStatus; message: Pointer): Integer;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.fetchNext(@ReferenceCounted.Versioned.SelfOffsetPtr, status, message);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.fetchNext(status: IStatus; message: Pointer): Integer;
begin
  Result := TResultSetVTable(vTable).fetchNext(Self, status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.fetchPrior(status: IStatus; message: Pointer): Integer;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.fetchPrior(@ReferenceCounted.Versioned.SelfOffsetPtr, status, message);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.fetchPrior(status: IStatus; message: Pointer): Integer;
begin
  Result := TResultSetVTable(vTable).fetchPrior(Self, status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.fetchFirst(status: IStatus; message: Pointer): Integer;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.fetchFirst(@ReferenceCounted.Versioned.SelfOffsetPtr, status, message);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.fetchFirst(status: IStatus; message: Pointer): Integer;
begin
  Result := TResultSetVTable(vTable).fetchFirst(Self, status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.fetchLast(status: IStatus; message: Pointer): Integer;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.fetchLast(@ReferenceCounted.Versioned.SelfOffsetPtr, status, message);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.fetchLast(status: IStatus; message: Pointer): Integer;
begin
  Result := TResultSetVTable(vTable).fetchLast(Self, status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.fetchAbsolute(status: IStatus; position: Integer; message: Pointer): Integer;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.fetchAbsolute(@ReferenceCounted.Versioned.SelfOffsetPtr, status, position, message);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.fetchAbsolute(status: IStatus; position: Integer; message: Pointer): Integer;
begin
  Result := TResultSetVTable(vTable).fetchAbsolute(Self, status, position, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.fetchRelative(status: IStatus; offset: Integer; message: Pointer): Integer;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.fetchRelative(@ReferenceCounted.Versioned.SelfOffsetPtr, status, offset, message);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.fetchRelative(status: IStatus; offset: Integer; message: Pointer): Integer;
begin
  Result := TResultSetVTable(vTable).fetchRelative(Self, status, offset, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.isEof(status: IStatus): Boolean;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.isEof(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.isEof(status: IStatus): Boolean;
begin
  Result := TResultSetVTable(vTable).isEof(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.isBof(status: IStatus): Boolean;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.isBof(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.isBof(status: IStatus): Boolean;
begin
  Result := TResultSetVTable(vTable).isBof(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TResultSet.getMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PResultSetVTable(ReferenceCounted.Versioned.vTable)^.getMetadata(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IResultSet.getMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TResultSetVTable(vTable).getMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TResultSet.deprecatedClose(status: IStatus);
begin
  PResultSetVTable(ReferenceCounted.Versioned.vTable)^.deprecatedClose(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IResultSet.deprecatedClose(status: IStatus);
begin
  TResultSetVTable(vTable).deprecatedClose(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TResultSet.setDelayedOutputFormat(status: IStatus; format: IMessageMetadata);
begin
  PResultSetVTable(ReferenceCounted.Versioned.vTable)^.setDelayedOutputFormat(@ReferenceCounted.Versioned.SelfOffsetPtr, status, format);
{$ELSE !WITH_RECORD_METHODS}
procedure IResultSet.setDelayedOutputFormat(status: IStatus; format: IMessageMetadata);
begin
  TResultSetVTable(vTable).setDelayedOutputFormat(Self, status, format);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TResultSet.close(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIResultSet_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIResultSet), ReferenceCounted.Versioned.vTable^.version, cIResultSet_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    PResultSetVTable(ReferenceCounted.Versioned.vTable)^.close(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IResultSet.close(status: IStatus);
begin
  if (vTable.version < cIResultSet_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIResultSet), vTable.version, cIResultSet_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    TResultSetVTable(vTable).close(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TResultSet.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIResultSet_VERSION) then begin
    setVersionError(status, Pointer(sIResultSet), ReferenceCounted.Versioned.vTable^.version, cIResultSet_VERSION);
  end
  else begin
    PResultSetVTable(ReferenceCounted.Versioned.vTable)^.getInfo(@ReferenceCounted.Versioned.SelfOffsetPtr, status, itemsLength, items, bufferLength, buffer);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IResultSet.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  if (vTable.version < cIResultSet_VERSION) then begin
    setVersionError(status, Pointer(sIResultSet), vTable.version, cIResultSet_VERSION);
  end
  else begin
    TResultSetVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatement.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  PStatementVTable(ReferenceCounted.Versioned.vTable)^.getInfo(@ReferenceCounted.Versioned.SelfOffsetPtr, status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatement.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  TStatementVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.getType(status: IStatus): Cardinal;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.getType(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.getType(status: IStatus): Cardinal;
begin
  Result := TStatementVTable(vTable).getType(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.getPlan(status: IStatus; detailed: Boolean): PAnsiChar;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.getPlan(@ReferenceCounted.Versioned.SelfOffsetPtr, status, detailed);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.getPlan(status: IStatus; detailed: Boolean): PAnsiChar;
begin
  Result := TStatementVTable(vTable).getPlan(Self, status, detailed);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.getAffectedRecords(status: IStatus): UInt64;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.getAffectedRecords(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.getAffectedRecords(status: IStatus): UInt64;
begin
  Result := TStatementVTable(vTable).getAffectedRecords(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.getInputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.getInputMetadata(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.getInputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TStatementVTable(vTable).getInputMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.getOutputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.getOutputMetadata(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.getOutputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TStatementVTable(vTable).getOutputMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.execute(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.execute(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, inMetadata, inBuffer, outMetadata, outBuffer);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.execute(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction;
begin
  Result := TStatementVTable(vTable).execute(Self, status, transaction, inMetadata, inBuffer, outMetadata, outBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.openCursor(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; flags: Cardinal): IResultSet;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.openCursor(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, inMetadata, inBuffer, outMetadata, flags);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.openCursor(status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; flags: Cardinal): IResultSet;
begin
  Result := TStatementVTable(vTable).openCursor(Self, status, transaction, inMetadata, inBuffer, outMetadata, flags);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatement.setCursorName(status: IStatus; name: PAnsiChar);
begin
  PStatementVTable(ReferenceCounted.Versioned.vTable)^.setCursorName(@ReferenceCounted.Versioned.SelfOffsetPtr, status, name);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatement.setCursorName(status: IStatus; name: PAnsiChar);
begin
  TStatementVTable(vTable).setCursorName(Self, status, name);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatement.deprecatedFree(status: IStatus);
begin
  PStatementVTable(ReferenceCounted.Versioned.vTable)^.deprecatedFree(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IStatement.deprecatedFree(status: IStatus);
begin
  TStatementVTable(vTable).deprecatedFree(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.getFlags(status: IStatus): Cardinal;
begin
  Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.getFlags(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IStatement.getFlags(status: IStatus): Cardinal;
begin
  Result := TStatementVTable(vTable).getFlags(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.getTimeout(status: IStatus): Cardinal;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIStatement_VERSION) then begin
    setVersionError(status, Pointer(sIStatement), ReferenceCounted.Versioned.vTable^.version, cIStatement_VERSION);
    Result := 0;
  end
  else begin
    Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.getTimeout(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IStatement.getTimeout(status: IStatus): Cardinal;
begin
  if (vTable.version < cIStatement_VERSION) then begin
    setVersionError(status, Pointer(sIStatement), vTable.version, cIStatement_VERSION);
    Result := 0;
  end
  else begin
    Result := TStatementVTable(vTable).getTimeout(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatement.setTimeout(status: IStatus; timeOut: Cardinal);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIStatement_VERSION) then begin
    setVersionError(status, Pointer(sIStatement), ReferenceCounted.Versioned.vTable^.version, cIStatement_VERSION);
  end
  else begin
    PStatementVTable(ReferenceCounted.Versioned.vTable)^.setTimeout(@ReferenceCounted.Versioned.SelfOffsetPtr, status, timeOut);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IStatement.setTimeout(status: IStatus; timeOut: Cardinal);
begin
  if (vTable.version < cIStatement_VERSION) then begin
    setVersionError(status, Pointer(sIStatement), vTable.version, cIStatement_VERSION);
  end
  else begin
    TStatementVTable(vTable).setTimeout(Self, status, timeOut);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TStatement.createBatch(status: IStatus; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIStatement_VERSION) then begin
    setVersionError(status, Pointer(sIStatement), ReferenceCounted.Versioned.vTable^.version, cIStatement_VERSION);
    Result := nil;
  end
  else begin
    Result := PStatementVTable(ReferenceCounted.Versioned.vTable)^.createBatch(@ReferenceCounted.Versioned.SelfOffsetPtr, status, inMetadata, parLength, par);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IStatement.createBatch(status: IStatus; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch;
begin
  if (vTable.version < cIStatement_VERSION) then begin
    setVersionError(status, Pointer(sIStatement), vTable.version, cIStatement_VERSION);
    Result := nil;
  end
  else begin
    Result := TStatementVTable(vTable).createBatch(Self, status, inMetadata, parLength, par);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TStatement.free(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIStatement_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIStatement), ReferenceCounted.Versioned.vTable^.version, cIStatement_VERSION);
    end
    else begin
      deprecatedFree(status);
    end
  end
  else begin
    PStatementVTable(ReferenceCounted.Versioned.vTable)^.free(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IStatement.free(status: IStatus);
begin
  if (vTable.version < cIStatement_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIStatement), vTable.version, cIStatement_VERSION);
    end
    else begin
      deprecatedFree(status);
    end
  end
  else begin
    TStatementVTable(vTable).free(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.add(status: IStatus; count: Cardinal; inBuffer: Pointer);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.add(@ReferenceCounted.Versioned.SelfOffsetPtr, status, count, inBuffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.add(status: IStatus; count: Cardinal; inBuffer: Pointer);
begin
  TBatchVTable(vTable).add(Self, status, count, inBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.addBlob(status: IStatus; length: Cardinal; inBuffer: Pointer; blobId: PISC_QUAD; parLength: Cardinal; par: PByte);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.addBlob(@ReferenceCounted.Versioned.SelfOffsetPtr, status, length, inBuffer, blobId, parLength, par);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.addBlob(status: IStatus; length: Cardinal; inBuffer: Pointer; blobId: PISC_QUAD; parLength: Cardinal; par: PByte);
begin
  TBatchVTable(vTable).addBlob(Self, status, length, inBuffer, blobId, parLength, par);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.appendBlobData(status: IStatus; length: Cardinal; inBuffer: Pointer);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.appendBlobData(@ReferenceCounted.Versioned.SelfOffsetPtr, status, length, inBuffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.appendBlobData(status: IStatus; length: Cardinal; inBuffer: Pointer);
begin
  TBatchVTable(vTable).appendBlobData(Self, status, length, inBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.addBlobStream(status: IStatus; length: Cardinal; inBuffer: Pointer);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.addBlobStream(@ReferenceCounted.Versioned.SelfOffsetPtr, status, length, inBuffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.addBlobStream(status: IStatus; length: Cardinal; inBuffer: Pointer);
begin
  TBatchVTable(vTable).addBlobStream(Self, status, length, inBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.registerBlob(status: IStatus; existingBlob: PISC_QUAD; blobId: PISC_QUAD);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.registerBlob(@ReferenceCounted.Versioned.SelfOffsetPtr, status, existingBlob, blobId);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.registerBlob(status: IStatus; existingBlob: PISC_QUAD; blobId: PISC_QUAD);
begin
  TBatchVTable(vTable).registerBlob(Self, status, existingBlob, blobId);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBatch.execute(status: IStatus; transaction: ITransaction): IBatchCompletionState;
begin
  Result := PBatchVTable(ReferenceCounted.Versioned.vTable)^.execute(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction);
{$ELSE !WITH_RECORD_METHODS}
function IBatch.execute(status: IStatus; transaction: ITransaction): IBatchCompletionState;
begin
  Result := TBatchVTable(vTable).execute(Self, status, transaction);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.cancel(status: IStatus);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.cancel(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.cancel(status: IStatus);
begin
  TBatchVTable(vTable).cancel(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBatch.getBlobAlignment(status: IStatus): Cardinal;
begin
  Result := PBatchVTable(ReferenceCounted.Versioned.vTable)^.getBlobAlignment(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IBatch.getBlobAlignment(status: IStatus): Cardinal;
begin
  Result := TBatchVTable(vTable).getBlobAlignment(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBatch.getMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PBatchVTable(ReferenceCounted.Versioned.vTable)^.getMetadata(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IBatch.getMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TBatchVTable(vTable).getMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.setDefaultBpb(status: IStatus; parLength: Cardinal; par: PByte);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.setDefaultBpb(@ReferenceCounted.Versioned.SelfOffsetPtr, status, parLength, par);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.setDefaultBpb(status: IStatus; parLength: Cardinal; par: PByte);
begin
  TBatchVTable(vTable).setDefaultBpb(Self, status, parLength, par);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.deprecatedClose(status: IStatus);
begin
  PBatchVTable(ReferenceCounted.Versioned.vTable)^.deprecatedClose(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.deprecatedClose(status: IStatus);
begin
  TBatchVTable(vTable).deprecatedClose(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.close(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIBatch_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIBatch), ReferenceCounted.Versioned.vTable^.version, cIBatch_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    PBatchVTable(ReferenceCounted.Versioned.vTable)^.close(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.close(status: IStatus);
begin
  if (vTable.version < cIBatch_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIBatch), vTable.version, cIBatch_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    TBatchVTable(vTable).close(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatch.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIBatch_VERSION) then begin
    setVersionError(status, Pointer(sIBatch), ReferenceCounted.Versioned.vTable^.version, cIBatch_VERSION);
  end
  else begin
    PBatchVTable(ReferenceCounted.Versioned.vTable)^.getInfo(@ReferenceCounted.Versioned.SelfOffsetPtr, status, itemsLength, items, bufferLength, buffer);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IBatch.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  if (vTable.version < cIBatch_VERSION) then begin
    setVersionError(status, Pointer(sIBatch), vTable.version, cIBatch_VERSION);
  end
  else begin
    TBatchVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBatchCompletionState.getSize(status: IStatus): Cardinal;
begin
  Result := PBatchCompletionStateVTable(Disposable.Versioned.vTable)^.getSize(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IBatchCompletionState.getSize(status: IStatus): Cardinal;
begin
  Result := TBatchCompletionStateVTable(vTable).getSize(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBatchCompletionState.getState(status: IStatus; pos: Cardinal): Integer;
begin
  Result := PBatchCompletionStateVTable(Disposable.Versioned.vTable)^.getState(@Disposable.Versioned.SelfOffsetPtr, status, pos);
{$ELSE !WITH_RECORD_METHODS}
function IBatchCompletionState.getState(status: IStatus; pos: Cardinal): Integer;
begin
  Result := TBatchCompletionStateVTable(vTable).getState(Self, status, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TBatchCompletionState.findError(status: IStatus; pos: Cardinal): Cardinal;
begin
  Result := PBatchCompletionStateVTable(Disposable.Versioned.vTable)^.findError(@Disposable.Versioned.SelfOffsetPtr, status, pos);
{$ELSE !WITH_RECORD_METHODS}
function IBatchCompletionState.findError(status: IStatus; pos: Cardinal): Cardinal;
begin
  Result := TBatchCompletionStateVTable(vTable).findError(Self, status, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TBatchCompletionState.getStatus(status: IStatus; to_: IStatus; pos: Cardinal);
begin
  PBatchCompletionStateVTable(Disposable.Versioned.vTable)^.getStatus(@Disposable.Versioned.SelfOffsetPtr, status, to_, pos);
{$ELSE !WITH_RECORD_METHODS}
procedure IBatchCompletionState.getStatus(status: IStatus; to_: IStatus; pos: Cardinal);
begin
  TBatchCompletionStateVTable(vTable).getStatus(Self, status, to_, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicator.process(status: IStatus; length: Cardinal; data: PByte);
begin
  PReplicatorVTable(ReferenceCounted.Versioned.vTable)^.process(@ReferenceCounted.Versioned.SelfOffsetPtr, status, length, data);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicator.process(status: IStatus; length: Cardinal; data: PByte);
begin
  TReplicatorVTable(vTable).process(Self, status, length, data);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicator.deprecatedClose(status: IStatus);
begin
  PReplicatorVTable(ReferenceCounted.Versioned.vTable)^.deprecatedClose(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicator.deprecatedClose(status: IStatus);
begin
  TReplicatorVTable(vTable).deprecatedClose(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicator.close(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIReplicator_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIReplicator), ReferenceCounted.Versioned.vTable^.version, cIReplicator_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    PReplicatorVTable(ReferenceCounted.Versioned.vTable)^.close(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicator.close(status: IStatus);
begin
  if (vTable.version < cIReplicator_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIReplicator), vTable.version, cIReplicator_VERSION);
    end
    else begin
      deprecatedClose(status);
    end
  end
  else begin
    TReplicatorVTable(vTable).close(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.receive(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
begin
  PRequestVTable(ReferenceCounted.Versioned.vTable)^.receive(@ReferenceCounted.Versioned.SelfOffsetPtr, status, level, msgType, length, message);
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.receive(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
begin
  TRequestVTable(vTable).receive(Self, status, level, msgType, length, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.send(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
begin
  PRequestVTable(ReferenceCounted.Versioned.vTable)^.send(@ReferenceCounted.Versioned.SelfOffsetPtr, status, level, msgType, length, message);
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.send(status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
begin
  TRequestVTable(vTable).send(Self, status, level, msgType, length, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.getInfo(status: IStatus; level: Integer; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  PRequestVTable(ReferenceCounted.Versioned.vTable)^.getInfo(@ReferenceCounted.Versioned.SelfOffsetPtr, status, level, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.getInfo(status: IStatus; level: Integer; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  TRequestVTable(vTable).getInfo(Self, status, level, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.start(status: IStatus; tra: ITransaction; level: Integer);
begin
  PRequestVTable(ReferenceCounted.Versioned.vTable)^.start(@ReferenceCounted.Versioned.SelfOffsetPtr, status, tra, level);
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.start(status: IStatus; tra: ITransaction; level: Integer);
begin
  TRequestVTable(vTable).start(Self, status, tra, level);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.startAndSend(status: IStatus; tra: ITransaction; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
begin
  PRequestVTable(ReferenceCounted.Versioned.vTable)^.startAndSend(@ReferenceCounted.Versioned.SelfOffsetPtr, status, tra, level, msgType, length, message);
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.startAndSend(status: IStatus; tra: ITransaction; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer);
begin
  TRequestVTable(vTable).startAndSend(Self, status, tra, level, msgType, length, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.unwind(status: IStatus; level: Integer);
begin
  PRequestVTable(ReferenceCounted.Versioned.vTable)^.unwind(@ReferenceCounted.Versioned.SelfOffsetPtr, status, level);
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.unwind(status: IStatus; level: Integer);
begin
  TRequestVTable(vTable).unwind(Self, status, level);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.deprecatedFree(status: IStatus);
begin
  PRequestVTable(ReferenceCounted.Versioned.vTable)^.deprecatedFree(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.deprecatedFree(status: IStatus);
begin
  TRequestVTable(vTable).deprecatedFree(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TRequest.free(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIRequest_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIRequest), ReferenceCounted.Versioned.vTable^.version, cIRequest_VERSION);
    end
    else begin
      deprecatedFree(status);
    end
  end
  else begin
    PRequestVTable(ReferenceCounted.Versioned.vTable)^.free(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IRequest.free(status: IStatus);
begin
  if (vTable.version < cIRequest_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIRequest), vTable.version, cIRequest_VERSION);
    end
    else begin
      deprecatedFree(status);
    end
  end
  else begin
    TRequestVTable(vTable).free(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TEvents.deprecatedCancel(status: IStatus);
begin
  PEventsVTable(ReferenceCounted.Versioned.vTable)^.deprecatedCancel(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IEvents.deprecatedCancel(status: IStatus);
begin
  TEventsVTable(vTable).deprecatedCancel(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TEvents.cancel(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIEvents_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIEvents), ReferenceCounted.Versioned.vTable^.version, cIEvents_VERSION);
    end
    else begin
      deprecatedCancel(status);
    end
  end
  else begin
    PEventsVTable(ReferenceCounted.Versioned.vTable)^.cancel(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IEvents.cancel(status: IStatus);
begin
  if (vTable.version < cIEvents_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIEvents), vTable.version, cIEvents_VERSION);
    end
    else begin
      deprecatedCancel(status);
    end
  end
  else begin
    TEventsVTable(vTable).cancel(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.getInfo(@ReferenceCounted.Versioned.SelfOffsetPtr, status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.getInfo(status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  TAttachmentVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.startTransaction(status: IStatus; tpbLength: Cardinal; tpb: PByte): ITransaction;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.startTransaction(@ReferenceCounted.Versioned.SelfOffsetPtr, status, tpbLength, tpb);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.startTransaction(status: IStatus; tpbLength: Cardinal; tpb: PByte): ITransaction;
begin
  Result := TAttachmentVTable(vTable).startTransaction(Self, status, tpbLength, tpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.reconnectTransaction(status: IStatus; length: Cardinal; id: PByte): ITransaction;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.reconnectTransaction(@ReferenceCounted.Versioned.SelfOffsetPtr, status, length, id);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.reconnectTransaction(status: IStatus; length: Cardinal; id: PByte): ITransaction;
begin
  Result := TAttachmentVTable(vTable).reconnectTransaction(Self, status, length, id);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.compileRequest(status: IStatus; blrLength: Cardinal; blr: PByte): IRequest;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.compileRequest(@ReferenceCounted.Versioned.SelfOffsetPtr, status, blrLength, blr);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.compileRequest(status: IStatus; blrLength: Cardinal; blr: PByte): IRequest;
begin
  Result := TAttachmentVTable(vTable).compileRequest(Self, status, blrLength, blr);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.transactRequest(status: IStatus; transaction: ITransaction; blrLength: Cardinal; blr: PByte; inMsgLength: Cardinal; inMsg: PByte; outMsgLength: Cardinal; outMsg: PByte);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.transactRequest(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, blrLength, blr, inMsgLength, inMsg, outMsgLength, outMsg);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.transactRequest(status: IStatus; transaction: ITransaction; blrLength: Cardinal; blr: PByte; inMsgLength: Cardinal; inMsg: PByte; outMsgLength: Cardinal; outMsg: PByte);
begin
  TAttachmentVTable(vTable).transactRequest(Self, status, transaction, blrLength, blr, inMsgLength, inMsg, outMsgLength, outMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.createBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.createBlob(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, id, bpbLength, bpb);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.createBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob;
begin
  Result := TAttachmentVTable(vTable).createBlob(Self, status, transaction, id, bpbLength, bpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.openBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.openBlob(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, id, bpbLength, bpb);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.openBlob(status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob;
begin
  Result := TAttachmentVTable(vTable).openBlob(Self, status, transaction, id, bpbLength, bpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.getSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte): Integer;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.getSlice(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.getSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte): Integer;
begin
  Result := TAttachmentVTable(vTable).getSlice(Self, status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.putSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.putSlice(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.putSlice(status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte);
begin
  TAttachmentVTable(vTable).putSlice(Self, status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.executeDyn(status: IStatus; transaction: ITransaction; length: Cardinal; dyn: PByte);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.executeDyn(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, length, dyn);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.executeDyn(status: IStatus; transaction: ITransaction; length: Cardinal; dyn: PByte);
begin
  TAttachmentVTable(vTable).executeDyn(Self, status, transaction, length, dyn);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.prepare(status: IStatus; tra: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): IStatement;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.prepare(@ReferenceCounted.Versioned.SelfOffsetPtr, status, tra, stmtLength, sqlStmt, dialect, flags);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.prepare(status: IStatus; tra: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): IStatement;
begin
  Result := TAttachmentVTable(vTable).prepare(Self, status, tra, stmtLength, sqlStmt, dialect, flags);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.execute(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.execute(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, outBuffer);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.execute(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction;
begin
  Result := TAttachmentVTable(vTable).execute(Self, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, outBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.openCursor(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): IResultSet;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.openCursor(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, cursorName, cursorFlags);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.openCursor(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): IResultSet;
begin
  Result := TAttachmentVTable(vTable).openCursor(Self, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, cursorName, cursorFlags);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.queEvents(status: IStatus; callback: IEventCallback; length: Cardinal; events: PByte): IEvents;
begin
  Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.queEvents(@ReferenceCounted.Versioned.SelfOffsetPtr, status, callback, length, events);
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.queEvents(status: IStatus; callback: IEventCallback; length: Cardinal; events: PByte): IEvents;
begin
  Result := TAttachmentVTable(vTable).queEvents(Self, status, callback, length, events);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.cancelOperation(status: IStatus; option: Integer);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.cancelOperation(@ReferenceCounted.Versioned.SelfOffsetPtr, status, option);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.cancelOperation(status: IStatus; option: Integer);
begin
  TAttachmentVTable(vTable).cancelOperation(Self, status, option);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.ping(status: IStatus);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.ping(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.ping(status: IStatus);
begin
  TAttachmentVTable(vTable).ping(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.deprecatedDetach(status: IStatus);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.deprecatedDetach(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.deprecatedDetach(status: IStatus);
begin
  TAttachmentVTable(vTable).deprecatedDetach(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.deprecatedDropDatabase(status: IStatus);
begin
  PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.deprecatedDropDatabase(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.deprecatedDropDatabase(status: IStatus);
begin
  TAttachmentVTable(vTable).deprecatedDropDatabase(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.getIdleTimeout(status: IStatus): Cardinal;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
    Result := 0;
  end
  else begin
    Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.getIdleTimeout(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.getIdleTimeout(status: IStatus): Cardinal;
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
    Result := 0;
  end
  else begin
    Result := TAttachmentVTable(vTable).getIdleTimeout(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.setIdleTimeout(status: IStatus; timeOut: Cardinal);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
  end
  else begin
    PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.setIdleTimeout(@ReferenceCounted.Versioned.SelfOffsetPtr, status, timeOut);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.setIdleTimeout(status: IStatus; timeOut: Cardinal);
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
  end
  else begin
    TAttachmentVTable(vTable).setIdleTimeout(Self, status, timeOut);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.getStatementTimeout(status: IStatus): Cardinal;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
    Result := 0;
  end
  else begin
    Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.getStatementTimeout(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.getStatementTimeout(status: IStatus): Cardinal;
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
    Result := 0;
  end
  else begin
    Result := TAttachmentVTable(vTable).getStatementTimeout(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.setStatementTimeout(status: IStatus; timeOut: Cardinal);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
  end
  else begin
    PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.setStatementTimeout(@ReferenceCounted.Versioned.SelfOffsetPtr, status, timeOut);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.setStatementTimeout(status: IStatus; timeOut: Cardinal);
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
  end
  else begin
    TAttachmentVTable(vTable).setStatementTimeout(Self, status, timeOut);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.createBatch(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
    Result := nil;
  end
  else begin
    Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.createBatch(@ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, parLength, par);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.createBatch(status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch;
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
    Result := nil;
  end
  else begin
    Result := TAttachmentVTable(vTable).createBatch(Self, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, parLength, par);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAttachment.createReplicator(status: IStatus): IReplicator;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
    Result := nil;
  end
  else begin
    Result := PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.createReplicator(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IAttachment.createReplicator(status: IStatus): IReplicator;
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
    Result := nil;
  end
  else begin
    Result := TAttachmentVTable(vTable).createReplicator(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.detach(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
    end
    else begin
      deprecatedDetach(status);
    end
  end
  else begin
    PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.detach(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.detach(status: IStatus);
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
    end
    else begin
      deprecatedDetach(status);
    end
  end
  else begin
    TAttachmentVTable(vTable).detach(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TAttachment.dropDatabase(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIAttachment_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIAttachment), ReferenceCounted.Versioned.vTable^.version, cIAttachment_VERSION);
    end
    else begin
      deprecatedDropDatabase(status);
    end
  end
  else begin
    PAttachmentVTable(ReferenceCounted.Versioned.vTable)^.dropDatabase(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IAttachment.dropDatabase(status: IStatus);
begin
  if (vTable.version < cIAttachment_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIAttachment), vTable.version, cIAttachment_VERSION);
    end
    else begin
      deprecatedDropDatabase(status);
    end
  end
  else begin
    TAttachmentVTable(vTable).dropDatabase(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TService.deprecatedDetach(status: IStatus);
begin
  PServiceVTable(ReferenceCounted.Versioned.vTable)^.deprecatedDetach(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IService.deprecatedDetach(status: IStatus);
begin
  TServiceVTable(vTable).deprecatedDetach(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TService.query(status: IStatus; sendLength: Cardinal; sendItems: PByte; receiveLength: Cardinal; receiveItems: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  PServiceVTable(ReferenceCounted.Versioned.vTable)^.query(@ReferenceCounted.Versioned.SelfOffsetPtr, status, sendLength, sendItems, receiveLength, receiveItems, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IService.query(status: IStatus; sendLength: Cardinal; sendItems: PByte; receiveLength: Cardinal; receiveItems: PByte; bufferLength: Cardinal; buffer: PByte);
begin
  TServiceVTable(vTable).query(Self, status, sendLength, sendItems, receiveLength, receiveItems, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TService.start(status: IStatus; spbLength: Cardinal; spb: PByte);
begin
  PServiceVTable(ReferenceCounted.Versioned.vTable)^.start(@ReferenceCounted.Versioned.SelfOffsetPtr, status, spbLength, spb);
{$ELSE !WITH_RECORD_METHODS}
procedure IService.start(status: IStatus; spbLength: Cardinal; spb: PByte);
begin
  TServiceVTable(vTable).start(Self, status, spbLength, spb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TService.detach(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIService_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIService), ReferenceCounted.Versioned.vTable^.version, cIService_VERSION);
    end
    else begin
      deprecatedDetach(status);
    end
  end
  else begin
    PServiceVTable(ReferenceCounted.Versioned.vTable)^.detach(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IService.detach(status: IStatus);
begin
  if (vTable.version < cIService_VERSION) then begin
    if FB_UsedInYValve then begin
      setVersionError(status, Pointer(sIService), vTable.version, cIService_VERSION);
    end
    else begin
      deprecatedDetach(status);
    end
  end
  else begin
    TServiceVTable(vTable).detach(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TService.cancel(status: IStatus);
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIService_VERSION) then begin
    setVersionError(status, Pointer(sIService), ReferenceCounted.Versioned.vTable^.version, cIService_VERSION);
  end
  else begin
    PServiceVTable(ReferenceCounted.Versioned.vTable)^.cancel(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IService.cancel(status: IStatus);
begin
  if (vTable.version < cIService_VERSION) then begin
    setVersionError(status, Pointer(sIService), vTable.version, cIService_VERSION);
  end
  else begin
    TServiceVTable(vTable).cancel(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TProvider.attachDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment;
begin
  Result := PProviderVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.attachDatabase(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, fileName, dpbLength, dpb);
{$ELSE !WITH_RECORD_METHODS}
function IProvider.attachDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment;
begin
  Result := TProviderVTable(vTable).attachDatabase(Self, status, fileName, dpbLength, dpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TProvider.createDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment;
begin
  Result := PProviderVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.createDatabase(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, fileName, dpbLength, dpb);
{$ELSE !WITH_RECORD_METHODS}
function IProvider.createDatabase(status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment;
begin
  Result := TProviderVTable(vTable).createDatabase(Self, status, fileName, dpbLength, dpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TProvider.attachServiceManager(status: IStatus; service: PAnsiChar; spbLength: Cardinal; spb: PByte): IService;
begin
  Result := PProviderVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.attachServiceManager(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, service, spbLength, spb);
{$ELSE !WITH_RECORD_METHODS}
function IProvider.attachServiceManager(status: IStatus; service: PAnsiChar; spbLength: Cardinal; spb: PByte): IService;
begin
  Result := TProviderVTable(vTable).attachServiceManager(Self, status, service, spbLength, spb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProvider.shutdown(status: IStatus; timeout: Cardinal; reason: Integer);
begin
  PProviderVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.shutdown(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, timeout, reason);
{$ELSE !WITH_RECORD_METHODS}
procedure IProvider.shutdown(status: IStatus; timeout: Cardinal; reason: Integer);
begin
  TProviderVTable(vTable).shutdown(Self, status, timeout, reason);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProvider.setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback);
begin
  PProviderVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.setDbCryptCallback(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, cryptCallback);
{$ELSE !WITH_RECORD_METHODS}
procedure IProvider.setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback);
begin
  TProviderVTable(vTable).setDbCryptCallback(Self, status, cryptCallback);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDtcStart.addAttachment(status: IStatus; att: IAttachment);
begin
  PDtcStartVTable(Disposable.Versioned.vTable)^.addAttachment(@Disposable.Versioned.SelfOffsetPtr, status, att);
{$ELSE !WITH_RECORD_METHODS}
procedure IDtcStart.addAttachment(status: IStatus; att: IAttachment);
begin
  TDtcStartVTable(vTable).addAttachment(Self, status, att);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDtcStart.addWithTpb(status: IStatus; att: IAttachment; length: Cardinal; tpb: PByte);
begin
  PDtcStartVTable(Disposable.Versioned.vTable)^.addWithTpb(@Disposable.Versioned.SelfOffsetPtr, status, att, length, tpb);
{$ELSE !WITH_RECORD_METHODS}
procedure IDtcStart.addWithTpb(status: IStatus; att: IAttachment; length: Cardinal; tpb: PByte);
begin
  TDtcStartVTable(vTable).addWithTpb(Self, status, att, length, tpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TDtcStart.start(status: IStatus): ITransaction;
begin
  Result := PDtcStartVTable(Disposable.Versioned.vTable)^.start(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IDtcStart.start(status: IStatus): ITransaction;
begin
  Result := TDtcStartVTable(vTable).start(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TDtc.join(status: IStatus; one: ITransaction; two: ITransaction): ITransaction;
begin
  Result := PDtcVTable(Versioned.vTable)^.join(@Versioned.SelfOffsetPtr, status, one, two);
{$ELSE !WITH_RECORD_METHODS}
function IDtc.join(status: IStatus; one: ITransaction; two: ITransaction): ITransaction;
begin
  Result := TDtcVTable(vTable).join(Self, status, one, two);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TDtc.startBuilder(status: IStatus): IDtcStart;
begin
  Result := PDtcVTable(Versioned.vTable)^.startBuilder(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IDtc.startBuilder(status: IStatus): IDtcStart;
begin
  Result := TDtcVTable(vTable).startBuilder(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWriter.reset();
begin
  PWriterVTable(Versioned.vTable)^.reset(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
procedure IWriter.reset();
begin
  TWriterVTable(vTable).reset(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWriter.add(status: IStatus; name: PAnsiChar);
begin
  PWriterVTable(Versioned.vTable)^.add(@Versioned.SelfOffsetPtr, status, name);
{$ELSE !WITH_RECORD_METHODS}
procedure IWriter.add(status: IStatus; name: PAnsiChar);
begin
  TWriterVTable(vTable).add(Self, status, name);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWriter.setType(status: IStatus; value: PAnsiChar);
begin
  PWriterVTable(Versioned.vTable)^.setType(@Versioned.SelfOffsetPtr, status, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IWriter.setType(status: IStatus; value: PAnsiChar);
begin
  TWriterVTable(vTable).setType(Self, status, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWriter.setDb(status: IStatus; value: PAnsiChar);
begin
  PWriterVTable(Versioned.vTable)^.setDb(@Versioned.SelfOffsetPtr, status, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IWriter.setDb(status: IStatus; value: PAnsiChar);
begin
  TWriterVTable(vTable).setDb(Self, status, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TServerBlock.getLogin(): PAnsiChar;
begin
  Result := PServerBlockVTable(Versioned.vTable)^.getLogin(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IServerBlock.getLogin(): PAnsiChar;
begin
  Result := TServerBlockVTable(vTable).getLogin(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TServerBlock.getData(length: PCardinal): PByte;
begin
  Result := PServerBlockVTable(Versioned.vTable)^.getData(@Versioned.SelfOffsetPtr, length);
{$ELSE !WITH_RECORD_METHODS}
function IServerBlock.getData(length: PCardinal): PByte;
begin
  Result := TServerBlockVTable(vTable).getData(Self, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TServerBlock.putData(status: IStatus; length: Cardinal; data: Pointer);
begin
  PServerBlockVTable(Versioned.vTable)^.putData(@Versioned.SelfOffsetPtr, status, length, data);
{$ELSE !WITH_RECORD_METHODS}
procedure IServerBlock.putData(status: IStatus; length: Cardinal; data: Pointer);
begin
  TServerBlockVTable(vTable).putData(Self, status, length, data);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TServerBlock.newKey(status: IStatus): ICryptKey;
begin
  Result := PServerBlockVTable(Versioned.vTable)^.newKey(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IServerBlock.newKey(status: IStatus): ICryptKey;
begin
  Result := TServerBlockVTable(vTable).newKey(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TClientBlock.getLogin(): PAnsiChar;
begin
  Result := PClientBlockVTable(ReferenceCounted.Versioned.vTable)^.getLogin(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IClientBlock.getLogin(): PAnsiChar;
begin
  Result := TClientBlockVTable(vTable).getLogin(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TClientBlock.getPassword(): PAnsiChar;
begin
  Result := PClientBlockVTable(ReferenceCounted.Versioned.vTable)^.getPassword(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IClientBlock.getPassword(): PAnsiChar;
begin
  Result := TClientBlockVTable(vTable).getPassword(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TClientBlock.getData(length: PCardinal): PByte;
begin
  Result := PClientBlockVTable(ReferenceCounted.Versioned.vTable)^.getData(@ReferenceCounted.Versioned.SelfOffsetPtr, length);
{$ELSE !WITH_RECORD_METHODS}
function IClientBlock.getData(length: PCardinal): PByte;
begin
  Result := TClientBlockVTable(vTable).getData(Self, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TClientBlock.putData(status: IStatus; length: Cardinal; data: Pointer);
begin
  PClientBlockVTable(ReferenceCounted.Versioned.vTable)^.putData(@ReferenceCounted.Versioned.SelfOffsetPtr, status, length, data);
{$ELSE !WITH_RECORD_METHODS}
procedure IClientBlock.putData(status: IStatus; length: Cardinal; data: Pointer);
begin
  TClientBlockVTable(vTable).putData(Self, status, length, data);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TClientBlock.newKey(status: IStatus): ICryptKey;
begin
  Result := PClientBlockVTable(ReferenceCounted.Versioned.vTable)^.newKey(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IClientBlock.newKey(status: IStatus): ICryptKey;
begin
  Result := TClientBlockVTable(vTable).newKey(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TClientBlock.getAuthBlock(status: IStatus): IAuthBlock;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cIClientBlock_VERSION) then begin
    setVersionError(status, Pointer(sIClientBlock), ReferenceCounted.Versioned.vTable^.version, cIClientBlock_VERSION);
    Result := nil;
  end
  else begin
    Result := PClientBlockVTable(ReferenceCounted.Versioned.vTable)^.getAuthBlock(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IClientBlock.getAuthBlock(status: IStatus): IAuthBlock;
begin
  if (vTable.version < cIClientBlock_VERSION) then begin
    setVersionError(status, Pointer(sIClientBlock), vTable.version, cIClientBlock_VERSION);
    Result := nil;
  end
  else begin
    Result := TClientBlockVTable(vTable).getAuthBlock(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TServer.authenticate(status: IStatus; sBlock: IServerBlock; writerInterface: IWriter): Integer;
begin
  Result := PServerVTable(Auth.PluginBase.ReferenceCounted.Versioned.vTable)^.authenticate(@Auth.PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, sBlock, writerInterface);
{$ELSE !WITH_RECORD_METHODS}
function IServer.authenticate(status: IStatus; sBlock: IServerBlock; writerInterface: IWriter): Integer;
begin
  Result := TServerVTable(vTable).authenticate(Self, status, sBlock, writerInterface);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TServer.setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback);
begin
  if (Auth.PluginBase.ReferenceCounted.Versioned.vTable^.version < cIServer_VERSION) then begin
    setVersionError(status, Pointer(sIServer), Auth.PluginBase.ReferenceCounted.Versioned.vTable^.version, cIServer_VERSION);
  end
  else begin
    PServerVTable(Auth.PluginBase.ReferenceCounted.Versioned.vTable)^.setDbCryptCallback(@Auth.PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, cryptCallback);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IServer.setDbCryptCallback(status: IStatus; cryptCallback: ICryptKeyCallback);
begin
  if (vTable.version < cIServer_VERSION) then begin
    setVersionError(status, Pointer(sIServer), vTable.version, cIServer_VERSION);
  end
  else begin
    TServerVTable(vTable).setDbCryptCallback(Self, status, cryptCallback);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TClient.authenticate(status: IStatus; cBlock: IClientBlock): Integer;
begin
  Result := PClientVTable(Auth.PluginBase.ReferenceCounted.Versioned.vTable)^.authenticate(@Auth.PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, cBlock);
{$ELSE !WITH_RECORD_METHODS}
function IClient.authenticate(status: IStatus; cBlock: IClientBlock): Integer;
begin
  Result := TClientVTable(vTable).authenticate(Self, status, cBlock);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUserField.entered(): Integer;
begin
  Result := PUserFieldVTable(Versioned.vTable)^.entered(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUserField.entered(): Integer;
begin
  Result := TUserFieldVTable(vTable).entered(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUserField.specified(): Integer;
begin
  Result := PUserFieldVTable(Versioned.vTable)^.specified(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUserField.specified(): Integer;
begin
  Result := TUserFieldVTable(vTable).specified(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUserField.setEntered(status: IStatus; newValue: Integer);
begin
  PUserFieldVTable(Versioned.vTable)^.setEntered(@Versioned.SelfOffsetPtr, status, newValue);
{$ELSE !WITH_RECORD_METHODS}
procedure IUserField.setEntered(status: IStatus; newValue: Integer);
begin
  TUserFieldVTable(vTable).setEntered(Self, status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TCharUserField.get(): PAnsiChar;
begin
  Result := PCharUserFieldVTable(UserField.Versioned.vTable)^.get(@UserField.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ICharUserField.get(): PAnsiChar;
begin
  Result := TCharUserFieldVTable(vTable).get(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TCharUserField.set_(status: IStatus; newValue: PAnsiChar);
begin
  PCharUserFieldVTable(UserField.Versioned.vTable)^.set_(@UserField.Versioned.SelfOffsetPtr, status, newValue);
{$ELSE !WITH_RECORD_METHODS}
procedure ICharUserField.set_(status: IStatus; newValue: PAnsiChar);
begin
  TCharUserFieldVTable(vTable).set_(Self, status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TIntUserField.get(): Integer;
begin
  Result := PIntUserFieldVTable(UserField.Versioned.vTable)^.get(@UserField.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IIntUserField.get(): Integer;
begin
  Result := TIntUserFieldVTable(vTable).get(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TIntUserField.set_(status: IStatus; newValue: Integer);
begin
  PIntUserFieldVTable(UserField.Versioned.vTable)^.set_(@UserField.Versioned.SelfOffsetPtr, status, newValue);
{$ELSE !WITH_RECORD_METHODS}
procedure IIntUserField.set_(status: IStatus; newValue: Integer);
begin
  TIntUserFieldVTable(vTable).set_(Self, status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.operation(): Cardinal;
begin
  Result := PUserVTable(Versioned.vTable)^.operation(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.operation(): Cardinal;
begin
  Result := TUserVTable(vTable).operation(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.userName(): ICharUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.userName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.userName(): ICharUserField;
begin
  Result := TUserVTable(vTable).userName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.password(): ICharUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.password(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.password(): ICharUserField;
begin
  Result := TUserVTable(vTable).password(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.firstName(): ICharUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.firstName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.firstName(): ICharUserField;
begin
  Result := TUserVTable(vTable).firstName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.lastName(): ICharUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.lastName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.lastName(): ICharUserField;
begin
  Result := TUserVTable(vTable).lastName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.middleName(): ICharUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.middleName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.middleName(): ICharUserField;
begin
  Result := TUserVTable(vTable).middleName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.comment(): ICharUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.comment(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.comment(): ICharUserField;
begin
  Result := TUserVTable(vTable).comment(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.attributes(): ICharUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.attributes(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.attributes(): ICharUserField;
begin
  Result := TUserVTable(vTable).attributes(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.active(): IIntUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.active(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.active(): IIntUserField;
begin
  Result := TUserVTable(vTable).active(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUser.admin(): IIntUserField;
begin
  Result := PUserVTable(Versioned.vTable)^.admin(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUser.admin(): IIntUserField;
begin
  Result := TUserVTable(vTable).admin(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUser.clear(status: IStatus);
begin
  PUserVTable(Versioned.vTable)^.clear(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IUser.clear(status: IStatus);
begin
  TUserVTable(vTable).clear(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TListUsers.list(status: IStatus; user: IUser);
begin
  PListUsersVTable(Versioned.vTable)^.list(@Versioned.SelfOffsetPtr, status, user);
{$ELSE !WITH_RECORD_METHODS}
procedure IListUsers.list(status: IStatus; user: IUser);
begin
  TListUsersVTable(vTable).list(Self, status, user);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TLogonInfo.name(): PAnsiChar;
begin
  Result := PLogonInfoVTable(Versioned.vTable)^.name(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ILogonInfo.name(): PAnsiChar;
begin
  Result := TLogonInfoVTable(vTable).name(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TLogonInfo.role(): PAnsiChar;
begin
  Result := PLogonInfoVTable(Versioned.vTable)^.role(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ILogonInfo.role(): PAnsiChar;
begin
  Result := TLogonInfoVTable(vTable).role(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TLogonInfo.networkProtocol(): PAnsiChar;
begin
  Result := PLogonInfoVTable(Versioned.vTable)^.networkProtocol(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ILogonInfo.networkProtocol(): PAnsiChar;
begin
  Result := TLogonInfoVTable(vTable).networkProtocol(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TLogonInfo.remoteAddress(): PAnsiChar;
begin
  Result := PLogonInfoVTable(Versioned.vTable)^.remoteAddress(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ILogonInfo.remoteAddress(): PAnsiChar;
begin
  Result := TLogonInfoVTable(vTable).remoteAddress(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TLogonInfo.authBlock(length: PCardinal): PByte;
begin
  Result := PLogonInfoVTable(Versioned.vTable)^.authBlock(@Versioned.SelfOffsetPtr, length);
{$ELSE !WITH_RECORD_METHODS}
function ILogonInfo.authBlock(length: PCardinal): PByte;
begin
  Result := TLogonInfoVTable(vTable).authBlock(Self, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TLogonInfo.attachment(status: IStatus): IAttachment;
begin
  if (Versioned.vTable^.version < cILogonInfo_VERSION) then begin
    setVersionError(status, Pointer(sILogonInfo), Versioned.vTable^.version, cILogonInfo_VERSION);
    Result := nil;
  end
  else begin
    Result := PLogonInfoVTable(Versioned.vTable)^.attachment(@Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ILogonInfo.attachment(status: IStatus): IAttachment;
begin
  if (vTable.version < cILogonInfo_VERSION) then begin
    setVersionError(status, Pointer(sILogonInfo), vTable.version, cILogonInfo_VERSION);
    Result := nil;
  end
  else begin
    Result := TLogonInfoVTable(vTable).attachment(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TLogonInfo.transaction(status: IStatus): ITransaction;
begin
  if (Versioned.vTable^.version < cILogonInfo_VERSION) then begin
    setVersionError(status, Pointer(sILogonInfo), Versioned.vTable^.version, cILogonInfo_VERSION);
    Result := nil;
  end
  else begin
    Result := PLogonInfoVTable(Versioned.vTable)^.transaction(@Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ILogonInfo.transaction(status: IStatus): ITransaction;
begin
  if (vTable.version < cILogonInfo_VERSION) then begin
    setVersionError(status, Pointer(sILogonInfo), vTable.version, cILogonInfo_VERSION);
    Result := nil;
  end
  else begin
    Result := TLogonInfoVTable(vTable).transaction(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TManagement.start(status: IStatus; logonInfo: ILogonInfo);
begin
  PManagementVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.start(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, logonInfo);
{$ELSE !WITH_RECORD_METHODS}
procedure IManagement.start(status: IStatus; logonInfo: ILogonInfo);
begin
  TManagementVTable(vTable).start(Self, status, logonInfo);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TManagement.execute(status: IStatus; user: IUser; callback: IListUsers): Integer;
begin
  Result := PManagementVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.execute(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, user, callback);
{$ELSE !WITH_RECORD_METHODS}
function IManagement.execute(status: IStatus; user: IUser; callback: IListUsers): Integer;
begin
  Result := TManagementVTable(vTable).execute(Self, status, user, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TManagement.commit(status: IStatus);
begin
  PManagementVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.commit(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IManagement.commit(status: IStatus);
begin
  TManagementVTable(vTable).commit(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TManagement.rollback(status: IStatus);
begin
  PManagementVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.rollback(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IManagement.rollback(status: IStatus);
begin
  TManagementVTable(vTable).rollback(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAuthBlock.getType(): PAnsiChar;
begin
  Result := PAuthBlockVTable(Versioned.vTable)^.getType(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IAuthBlock.getType(): PAnsiChar;
begin
  Result := TAuthBlockVTable(vTable).getType(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAuthBlock.getName(): PAnsiChar;
begin
  Result := PAuthBlockVTable(Versioned.vTable)^.getName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IAuthBlock.getName(): PAnsiChar;
begin
  Result := TAuthBlockVTable(vTable).getName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAuthBlock.getPlugin(): PAnsiChar;
begin
  Result := PAuthBlockVTable(Versioned.vTable)^.getPlugin(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IAuthBlock.getPlugin(): PAnsiChar;
begin
  Result := TAuthBlockVTable(vTable).getPlugin(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAuthBlock.getSecurityDb(): PAnsiChar;
begin
  Result := PAuthBlockVTable(Versioned.vTable)^.getSecurityDb(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IAuthBlock.getSecurityDb(): PAnsiChar;
begin
  Result := TAuthBlockVTable(vTable).getSecurityDb(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAuthBlock.getOriginalPlugin(): PAnsiChar;
begin
  Result := PAuthBlockVTable(Versioned.vTable)^.getOriginalPlugin(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IAuthBlock.getOriginalPlugin(): PAnsiChar;
begin
  Result := TAuthBlockVTable(vTable).getOriginalPlugin(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAuthBlock.next(status: IStatus): Boolean;
begin
  Result := PAuthBlockVTable(Versioned.vTable)^.next(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IAuthBlock.next(status: IStatus): Boolean;
begin
  Result := TAuthBlockVTable(vTable).next(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TAuthBlock.first(status: IStatus): Boolean;
begin
  Result := PAuthBlockVTable(Versioned.vTable)^.first(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IAuthBlock.first(status: IStatus): Boolean;
begin
  Result := TAuthBlockVTable(vTable).first(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TWireCryptPlugin.getKnownTypes(status: IStatus): PAnsiChar;
begin
  Result := PWireCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.getKnownTypes(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IWireCryptPlugin.getKnownTypes(status: IStatus): PAnsiChar;
begin
  Result := TWireCryptPluginVTable(vTable).getKnownTypes(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWireCryptPlugin.setKey(status: IStatus; key: ICryptKey);
begin
  PWireCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.setKey(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, key);
{$ELSE !WITH_RECORD_METHODS}
procedure IWireCryptPlugin.setKey(status: IStatus; key: ICryptKey);
begin
  TWireCryptPluginVTable(vTable).setKey(Self, status, key);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWireCryptPlugin.encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  PWireCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.encrypt(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IWireCryptPlugin.encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  TWireCryptPluginVTable(vTable).encrypt(Self, status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWireCryptPlugin.decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  PWireCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.decrypt(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IWireCryptPlugin.decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  TWireCryptPluginVTable(vTable).decrypt(Self, status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TWireCryptPlugin.getSpecificData(status: IStatus; keyType: PAnsiChar; length: PCardinal): PByte;
begin
  if (PluginBase.ReferenceCounted.Versioned.vTable^.version < cIWireCryptPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIWireCryptPlugin), PluginBase.ReferenceCounted.Versioned.vTable^.version, cIWireCryptPlugin_VERSION);
    Result := nil;
  end
  else begin
    Result := PWireCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.getSpecificData(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, keyType, length);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IWireCryptPlugin.getSpecificData(status: IStatus; keyType: PAnsiChar; length: PCardinal): PByte;
begin
  if (vTable.version < cIWireCryptPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIWireCryptPlugin), vTable.version, cIWireCryptPlugin_VERSION);
    Result := nil;
  end
  else begin
    Result := TWireCryptPluginVTable(vTable).getSpecificData(Self, status, keyType, length);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TWireCryptPlugin.setSpecificData(status: IStatus; keyType: PAnsiChar; length: Cardinal; data: PByte);
begin
  if (PluginBase.ReferenceCounted.Versioned.vTable^.version < cIWireCryptPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIWireCryptPlugin), PluginBase.ReferenceCounted.Versioned.vTable^.version, cIWireCryptPlugin_VERSION);
  end
  else begin
    PWireCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.setSpecificData(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, keyType, length, data);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IWireCryptPlugin.setSpecificData(status: IStatus; keyType: PAnsiChar; length: Cardinal; data: PByte);
begin
  if (vTable.version < cIWireCryptPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIWireCryptPlugin), vTable.version, cIWireCryptPlugin_VERSION);
  end
  else begin
    TWireCryptPluginVTable(vTable).setSpecificData(Self, status, keyType, length, data);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TCryptKeyCallback.callback(dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal;
begin
  Result := PCryptKeyCallbackVTable(Versioned.vTable)^.callback(@Versioned.SelfOffsetPtr, dataLength, data, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
function ICryptKeyCallback.callback(dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal;
begin
  Result := TCryptKeyCallbackVTable(vTable).callback(Self, dataLength, data, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TKeyHolderPlugin.keyCallback(status: IStatus; callback: ICryptKeyCallback): Integer;
begin
  Result := PKeyHolderPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.keyCallback(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, callback);
{$ELSE !WITH_RECORD_METHODS}
function IKeyHolderPlugin.keyCallback(status: IStatus; callback: ICryptKeyCallback): Integer;
begin
  Result := TKeyHolderPluginVTable(vTable).keyCallback(Self, status, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TKeyHolderPlugin.keyHandle(status: IStatus; keyName: PAnsiChar): ICryptKeyCallback;
begin
  Result := PKeyHolderPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.keyHandle(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, keyName);
{$ELSE !WITH_RECORD_METHODS}
function IKeyHolderPlugin.keyHandle(status: IStatus; keyName: PAnsiChar): ICryptKeyCallback;
begin
  Result := TKeyHolderPluginVTable(vTable).keyHandle(Self, status, keyName);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TKeyHolderPlugin.useOnlyOwnKeys(status: IStatus): Boolean;
begin
  if (PluginBase.ReferenceCounted.Versioned.vTable^.version < cIKeyHolderPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIKeyHolderPlugin), PluginBase.ReferenceCounted.Versioned.vTable^.version, cIKeyHolderPlugin_VERSION);
    Result := false;
  end
  else begin
    Result := PKeyHolderPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.useOnlyOwnKeys(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IKeyHolderPlugin.useOnlyOwnKeys(status: IStatus): Boolean;
begin
  if (vTable.version < cIKeyHolderPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIKeyHolderPlugin), vTable.version, cIKeyHolderPlugin_VERSION);
    Result := false;
  end
  else begin
    Result := TKeyHolderPluginVTable(vTable).useOnlyOwnKeys(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TKeyHolderPlugin.chainHandle(status: IStatus): ICryptKeyCallback;
begin
  if (PluginBase.ReferenceCounted.Versioned.vTable^.version < cIKeyHolderPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIKeyHolderPlugin), PluginBase.ReferenceCounted.Versioned.vTable^.version, cIKeyHolderPlugin_VERSION);
    Result := nil;
  end
  else begin
    Result := PKeyHolderPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.chainHandle(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IKeyHolderPlugin.chainHandle(status: IStatus): ICryptKeyCallback;
begin
  if (vTable.version < cIKeyHolderPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIKeyHolderPlugin), vTable.version, cIKeyHolderPlugin_VERSION);
    Result := nil;
  end
  else begin
    Result := TKeyHolderPluginVTable(vTable).chainHandle(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TDbCryptInfo.getDatabaseFullPath(status: IStatus): PAnsiChar;
begin
  Result := PDbCryptInfoVTable(ReferenceCounted.Versioned.vTable)^.getDatabaseFullPath(@ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IDbCryptInfo.getDatabaseFullPath(status: IStatus): PAnsiChar;
begin
  Result := TDbCryptInfoVTable(vTable).getDatabaseFullPath(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDbCryptPlugin.setKey(status: IStatus; length: Cardinal; sources: PIKeyHolderPlugin; keyName: PAnsiChar);
begin
  PDbCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.setKey(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, length, sources, keyName);
{$ELSE !WITH_RECORD_METHODS}
procedure IDbCryptPlugin.setKey(status: IStatus; length: Cardinal; sources: PIKeyHolderPlugin; keyName: PAnsiChar);
begin
  TDbCryptPluginVTable(vTable).setKey(Self, status, length, sources, keyName);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDbCryptPlugin.encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  PDbCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.encrypt(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IDbCryptPlugin.encrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  TDbCryptPluginVTable(vTable).encrypt(Self, status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDbCryptPlugin.decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  PDbCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.decrypt(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IDbCryptPlugin.decrypt(status: IStatus; length: Cardinal; from: Pointer; to_: Pointer);
begin
  TDbCryptPluginVTable(vTable).decrypt(Self, status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDbCryptPlugin.setInfo(status: IStatus; info: IDbCryptInfo);
begin
  if (PluginBase.ReferenceCounted.Versioned.vTable^.version < cIDbCryptPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIDbCryptPlugin), PluginBase.ReferenceCounted.Versioned.vTable^.version, cIDbCryptPlugin_VERSION);
  end
  else begin
    PDbCryptPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.setInfo(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, info);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IDbCryptPlugin.setInfo(status: IStatus; info: IDbCryptInfo);
begin
  if (vTable.version < cIDbCryptPlugin_VERSION) then begin
    setVersionError(status, Pointer(sIDbCryptPlugin), vTable.version, cIDbCryptPlugin_VERSION);
  end
  else begin
    TDbCryptPluginVTable(vTable).setInfo(Self, status, info);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getMaster(): IMaster;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getMaster(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getMaster(): IMaster;
begin
  Result := TExternalContextVTable(vTable).getMaster(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getEngine(status: IStatus): IExternalEngine;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getEngine(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getEngine(status: IStatus): IExternalEngine;
begin
  Result := TExternalContextVTable(vTable).getEngine(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getAttachment(status: IStatus): IAttachment;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getAttachment(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getAttachment(status: IStatus): IAttachment;
begin
  Result := TExternalContextVTable(vTable).getAttachment(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getTransaction(status: IStatus): ITransaction;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getTransaction(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getTransaction(status: IStatus): ITransaction;
begin
  Result := TExternalContextVTable(vTable).getTransaction(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getUserName(): PAnsiChar;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getUserName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getUserName(): PAnsiChar;
begin
  Result := TExternalContextVTable(vTable).getUserName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getDatabaseName(): PAnsiChar;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getDatabaseName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getDatabaseName(): PAnsiChar;
begin
  Result := TExternalContextVTable(vTable).getDatabaseName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getClientCharSet(): PAnsiChar;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getClientCharSet(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getClientCharSet(): PAnsiChar;
begin
  Result := TExternalContextVTable(vTable).getClientCharSet(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.obtainInfoCode(): Integer;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.obtainInfoCode(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.obtainInfoCode(): Integer;
begin
  Result := TExternalContextVTable(vTable).obtainInfoCode(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.getInfo(code: Integer): Pointer;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.getInfo(@Versioned.SelfOffsetPtr, code);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.getInfo(code: Integer): Pointer;
begin
  Result := TExternalContextVTable(vTable).getInfo(Self, code);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalContext.setInfo(code: Integer; value: Pointer): Pointer;
begin
  Result := PExternalContextVTable(Versioned.vTable)^.setInfo(@Versioned.SelfOffsetPtr, code, value);
{$ELSE !WITH_RECORD_METHODS}
function IExternalContext.setInfo(code: Integer; value: Pointer): Pointer;
begin
  Result := TExternalContextVTable(vTable).setInfo(Self, code, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalResultSet.fetch(status: IStatus): Boolean;
begin
  Result := PExternalResultSetVTable(Disposable.Versioned.vTable)^.fetch(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IExternalResultSet.fetch(status: IStatus): Boolean;
begin
  Result := TExternalResultSetVTable(vTable).fetch(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalFunction.getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
  PExternalFunctionVTable(Disposable.Versioned.vTable)^.getCharSet(@Disposable.Versioned.SelfOffsetPtr, status, context, name, nameSize);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalFunction.getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
  TExternalFunctionVTable(vTable).getCharSet(Self, status, context, name, nameSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalFunction.execute(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer);
begin
  PExternalFunctionVTable(Disposable.Versioned.vTable)^.execute(@Disposable.Versioned.SelfOffsetPtr, status, context, inMsg, outMsg);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalFunction.execute(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer);
begin
  TExternalFunctionVTable(vTable).execute(Self, status, context, inMsg, outMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalProcedure.getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
  PExternalProcedureVTable(Disposable.Versioned.vTable)^.getCharSet(@Disposable.Versioned.SelfOffsetPtr, status, context, name, nameSize);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalProcedure.getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
  TExternalProcedureVTable(vTable).getCharSet(Self, status, context, name, nameSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalProcedure.open(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer): IExternalResultSet;
begin
  Result := PExternalProcedureVTable(Disposable.Versioned.vTable)^.open(@Disposable.Versioned.SelfOffsetPtr, status, context, inMsg, outMsg);
{$ELSE !WITH_RECORD_METHODS}
function IExternalProcedure.open(status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer): IExternalResultSet;
begin
  Result := TExternalProcedureVTable(vTable).open(Self, status, context, inMsg, outMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalTrigger.getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
  PExternalTriggerVTable(Disposable.Versioned.vTable)^.getCharSet(@Disposable.Versioned.SelfOffsetPtr, status, context, name, nameSize);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalTrigger.getCharSet(status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
  TExternalTriggerVTable(vTable).getCharSet(Self, status, context, name, nameSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalTrigger.execute(status: IStatus; context: IExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer);
begin
  PExternalTriggerVTable(Disposable.Versioned.vTable)^.execute(@Disposable.Versioned.SelfOffsetPtr, status, context, action, oldMsg, newMsg);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalTrigger.execute(status: IStatus; context: IExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer);
begin
  TExternalTriggerVTable(vTable).execute(Self, status, context, action, oldMsg, newMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getPackage(status: IStatus): PAnsiChar;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getPackage(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getPackage(status: IStatus): PAnsiChar;
begin
  Result := TRoutineMetadataVTable(vTable).getPackage(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getName(status: IStatus): PAnsiChar;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getName(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getName(status: IStatus): PAnsiChar;
begin
  Result := TRoutineMetadataVTable(vTable).getName(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getEntryPoint(status: IStatus): PAnsiChar;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getEntryPoint(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getEntryPoint(status: IStatus): PAnsiChar;
begin
  Result := TRoutineMetadataVTable(vTable).getEntryPoint(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getBody(status: IStatus): PAnsiChar;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getBody(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getBody(status: IStatus): PAnsiChar;
begin
  Result := TRoutineMetadataVTable(vTable).getBody(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getInputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getInputMetadata(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getInputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TRoutineMetadataVTable(vTable).getInputMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getOutputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getOutputMetadata(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getOutputMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TRoutineMetadataVTable(vTable).getOutputMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getTriggerMetadata(status: IStatus): IMessageMetadata;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getTriggerMetadata(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getTriggerMetadata(status: IStatus): IMessageMetadata;
begin
  Result := TRoutineMetadataVTable(vTable).getTriggerMetadata(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getTriggerTable(status: IStatus): PAnsiChar;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getTriggerTable(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getTriggerTable(status: IStatus): PAnsiChar;
begin
  Result := TRoutineMetadataVTable(vTable).getTriggerTable(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TRoutineMetadata.getTriggerType(status: IStatus): Cardinal;
begin
  Result := PRoutineMetadataVTable(Versioned.vTable)^.getTriggerType(@Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IRoutineMetadata.getTriggerType(status: IStatus): Cardinal;
begin
  Result := TRoutineMetadataVTable(vTable).getTriggerType(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalEngine.open(status: IStatus; context: IExternalContext; charSet: PAnsiChar; charSetSize: Cardinal);
begin
  PExternalEngineVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.open(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, context, charSet, charSetSize);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalEngine.open(status: IStatus; context: IExternalContext; charSet: PAnsiChar; charSetSize: Cardinal);
begin
  TExternalEngineVTable(vTable).open(Self, status, context, charSet, charSetSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalEngine.openAttachment(status: IStatus; context: IExternalContext);
begin
  PExternalEngineVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.openAttachment(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, context);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalEngine.openAttachment(status: IStatus; context: IExternalContext);
begin
  TExternalEngineVTable(vTable).openAttachment(Self, status, context);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TExternalEngine.closeAttachment(status: IStatus; context: IExternalContext);
begin
  PExternalEngineVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.closeAttachment(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, context);
{$ELSE !WITH_RECORD_METHODS}
procedure IExternalEngine.closeAttachment(status: IStatus; context: IExternalContext);
begin
  TExternalEngineVTable(vTable).closeAttachment(Self, status, context);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalEngine.makeFunction(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalFunction;
begin
  Result := PExternalEngineVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.makeFunction(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
function IExternalEngine.makeFunction(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalFunction;
begin
  Result := TExternalEngineVTable(vTable).makeFunction(Self, status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalEngine.makeProcedure(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalProcedure;
begin
  Result := PExternalEngineVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.makeProcedure(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
function IExternalEngine.makeProcedure(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalProcedure;
begin
  Result := TExternalEngineVTable(vTable).makeProcedure(Self, status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TExternalEngine.makeTrigger(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder): IExternalTrigger;
begin
  Result := PExternalEngineVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.makeTrigger(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, context, metadata, fieldsBuilder);
{$ELSE !WITH_RECORD_METHODS}
function IExternalEngine.makeTrigger(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder): IExternalTrigger;
begin
  Result := TExternalEngineVTable(vTable).makeTrigger(Self, status, context, metadata, fieldsBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTimer.handler();
begin
  PTimerVTable(ReferenceCounted.Versioned.vTable)^.handler(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
procedure ITimer.handler();
begin
  TTimerVTable(vTable).handler(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTimerControl.start(status: IStatus; timer: ITimer; microSeconds: UInt64);
begin
  PTimerControlVTable(Versioned.vTable)^.start(@Versioned.SelfOffsetPtr, status, timer, microSeconds);
{$ELSE !WITH_RECORD_METHODS}
procedure ITimerControl.start(status: IStatus; timer: ITimer; microSeconds: UInt64);
begin
  TTimerControlVTable(vTable).start(Self, status, timer, microSeconds);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TTimerControl.stop(status: IStatus; timer: ITimer);
begin
  PTimerControlVTable(Versioned.vTable)^.stop(@Versioned.SelfOffsetPtr, status, timer);
{$ELSE !WITH_RECORD_METHODS}
procedure ITimerControl.stop(status: IStatus; timer: ITimer);
begin
  TTimerControlVTable(vTable).stop(Self, status, timer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TVersionCallback.callback(status: IStatus; text: PAnsiChar);
begin
  PVersionCallbackVTable(Versioned.vTable)^.callback(@Versioned.SelfOffsetPtr, status, text);
{$ELSE !WITH_RECORD_METHODS}
procedure IVersionCallback.callback(status: IStatus; text: PAnsiChar);
begin
  TVersionCallbackVTable(vTable).callback(Self, status, text);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.getFbVersion(status: IStatus; att: IAttachment; callback: IVersionCallback);
begin
  PUtilVTable(Versioned.vTable)^.getFbVersion(@Versioned.SelfOffsetPtr, status, att, callback);
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.getFbVersion(status: IStatus; att: IAttachment; callback: IVersionCallback);
begin
  TUtilVTable(vTable).getFbVersion(Self, status, att, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.loadBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean);
begin
  PUtilVTable(Versioned.vTable)^.loadBlob(@Versioned.SelfOffsetPtr, status, blobId, att, tra, file_, txt);
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.loadBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean);
begin
  TUtilVTable(vTable).loadBlob(Self, status, blobId, att, tra, file_, txt);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.dumpBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean);
begin
  PUtilVTable(Versioned.vTable)^.dumpBlob(@Versioned.SelfOffsetPtr, status, blobId, att, tra, file_, txt);
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.dumpBlob(status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean);
begin
  TUtilVTable(vTable).dumpBlob(Self, status, blobId, att, tra, file_, txt);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.getPerfCounters(status: IStatus; att: IAttachment; countersSet: PAnsiChar; counters: PInt64);
begin
  PUtilVTable(Versioned.vTable)^.getPerfCounters(@Versioned.SelfOffsetPtr, status, att, countersSet, counters);
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.getPerfCounters(status: IStatus; att: IAttachment; countersSet: PAnsiChar; counters: PInt64);
begin
  TUtilVTable(vTable).getPerfCounters(Self, status, att, countersSet, counters);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.executeCreateDatabase(status: IStatus; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: PBoolean): IAttachment;
begin
  Result := PUtilVTable(Versioned.vTable)^.executeCreateDatabase(@Versioned.SelfOffsetPtr, status, stmtLength, creatDBstatement, dialect, stmtIsCreateDb);
{$ELSE !WITH_RECORD_METHODS}
function IUtil.executeCreateDatabase(status: IStatus; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: PBoolean): IAttachment;
begin
  Result := TUtilVTable(vTable).executeCreateDatabase(Self, status, stmtLength, creatDBstatement, dialect, stmtIsCreateDb);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.decodeDate(date: TISC_DATE; year: PCardinal; month: PCardinal; day: PCardinal);
begin
  PUtilVTable(Versioned.vTable)^.decodeDate(@Versioned.SelfOffsetPtr, date, year, month, day);
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.decodeDate(date: TISC_DATE; year: PCardinal; month: PCardinal; day: PCardinal);
begin
  TUtilVTable(vTable).decodeDate(Self, date, year, month, day);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.decodeTime(time: TISC_TIME; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal);
begin
  PUtilVTable(Versioned.vTable)^.decodeTime(@Versioned.SelfOffsetPtr, time, hours, minutes, seconds, fractions);
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.decodeTime(time: TISC_TIME; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal);
begin
  TUtilVTable(vTable).decodeTime(Self, time, hours, minutes, seconds, fractions);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.encodeDate(year: Cardinal; month: Cardinal; day: Cardinal): TISC_DATE;
begin
  Result := PUtilVTable(Versioned.vTable)^.encodeDate(@Versioned.SelfOffsetPtr, year, month, day);
{$ELSE !WITH_RECORD_METHODS}
function IUtil.encodeDate(year: Cardinal; month: Cardinal; day: Cardinal): TISC_DATE;
begin
  Result := TUtilVTable(vTable).encodeDate(Self, year, month, day);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.encodeTime(hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): TISC_TIME;
begin
  Result := PUtilVTable(Versioned.vTable)^.encodeTime(@Versioned.SelfOffsetPtr, hours, minutes, seconds, fractions);
{$ELSE !WITH_RECORD_METHODS}
function IUtil.encodeTime(hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): TISC_TIME;
begin
  Result := TUtilVTable(vTable).encodeTime(Self, hours, minutes, seconds, fractions);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.formatStatus(buffer: PAnsiChar; bufferSize: Cardinal; status: IStatus): Cardinal;
begin
  Result := PUtilVTable(Versioned.vTable)^.formatStatus(@Versioned.SelfOffsetPtr, buffer, bufferSize, status);
{$ELSE !WITH_RECORD_METHODS}
function IUtil.formatStatus(buffer: PAnsiChar; bufferSize: Cardinal; status: IStatus): Cardinal;
begin
  Result := TUtilVTable(vTable).formatStatus(Self, buffer, bufferSize, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.getClientVersion(): Cardinal;
begin
  Result := PUtilVTable(Versioned.vTable)^.getClientVersion(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUtil.getClientVersion(): Cardinal;
begin
  Result := TUtilVTable(vTable).getClientVersion(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.getXpbBuilder(status: IStatus; kind: Cardinal; buf: PByte; len: Cardinal): IXpbBuilder;
begin
  Result := PUtilVTable(Versioned.vTable)^.getXpbBuilder(@Versioned.SelfOffsetPtr, status, kind, buf, len);
{$ELSE !WITH_RECORD_METHODS}
function IUtil.getXpbBuilder(status: IStatus; kind: Cardinal; buf: PByte; len: Cardinal): IXpbBuilder;
begin
  Result := TUtilVTable(vTable).getXpbBuilder(Self, status, kind, buf, len);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.setOffsets(status: IStatus; metadata: IMessageMetadata; callback: IOffsetsCallback): Cardinal;
begin
  Result := PUtilVTable(Versioned.vTable)^.setOffsets(@Versioned.SelfOffsetPtr, status, metadata, callback);
{$ELSE !WITH_RECORD_METHODS}
function IUtil.setOffsets(status: IStatus; metadata: IMessageMetadata; callback: IOffsetsCallback): Cardinal;
begin
  Result := TUtilVTable(vTable).setOffsets(Self, status, metadata, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.getDecFloat16(status: IStatus): IDecFloat16;
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
    Result := nil;
  end
  else begin
    Result := PUtilVTable(Versioned.vTable)^.getDecFloat16(@Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IUtil.getDecFloat16(status: IStatus): IDecFloat16;
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
    Result := nil;
  end
  else begin
    Result := TUtilVTable(vTable).getDecFloat16(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.getDecFloat34(status: IStatus): IDecFloat34;
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
    Result := nil;
  end
  else begin
    Result := PUtilVTable(Versioned.vTable)^.getDecFloat34(@Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IUtil.getDecFloat34(status: IStatus): IDecFloat34;
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
    Result := nil;
  end
  else begin
    Result := TUtilVTable(vTable).getDecFloat34(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.decodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
  end
  else begin
    PUtilVTable(Versioned.vTable)^.decodeTimeTz(@Versioned.SelfOffsetPtr, status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.decodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
  end
  else begin
    TUtilVTable(vTable).decodeTimeTz(Self, status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.decodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
  end
  else begin
    PUtilVTable(Versioned.vTable)^.decodeTimeStampTz(@Versioned.SelfOffsetPtr, status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.decodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
  end
  else begin
    TUtilVTable(vTable).decodeTimeStampTz(Self, status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.encodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar);
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
  end
  else begin
    PUtilVTable(Versioned.vTable)^.encodeTimeTz(@Versioned.SelfOffsetPtr, status, timeTz, hours, minutes, seconds, fractions, timeZone);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.encodeTimeTz(status: IStatus; timeTz: PISC_TIME_TZ; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar);
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
  end
  else begin
    TUtilVTable(vTable).encodeTimeTz(Self, status, timeTz, hours, minutes, seconds, fractions, timeZone);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.encodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: Cardinal; month: Cardinal; day: Cardinal; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar);
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
  end
  else begin
    PUtilVTable(Versioned.vTable)^.encodeTimeStampTz(@Versioned.SelfOffsetPtr, status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZone);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.encodeTimeStampTz(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: Cardinal; month: Cardinal; day: Cardinal; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar);
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
  end
  else begin
    TUtilVTable(vTable).encodeTimeStampTz(Self, status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZone);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUtil.getInt128(status: IStatus): IInt128;
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
    Result := nil;
  end
  else begin
    Result := PUtilVTable(Versioned.vTable)^.getInt128(@Versioned.SelfOffsetPtr, status);
  end;
{$ELSE !WITH_RECORD_METHODS}
function IUtil.getInt128(status: IStatus): IInt128;
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
    Result := nil;
  end
  else begin
    Result := TUtilVTable(vTable).getInt128(Self, status);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.decodeTimeTzEx(status: IStatus; timeTz: PISC_TIME_TZ_EX; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
  end
  else begin
    PUtilVTable(Versioned.vTable)^.decodeTimeTzEx(@Versioned.SelfOffsetPtr, status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.decodeTimeTzEx(status: IStatus; timeTz: PISC_TIME_TZ_EX; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
  end
  else begin
    TUtilVTable(vTable).decodeTimeTzEx(Self, status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUtil.decodeTimeStampTzEx(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ_EX; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (Versioned.vTable^.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), Versioned.vTable^.version, cIUtil_VERSION);
  end
  else begin
    PUtilVTable(Versioned.vTable)^.decodeTimeStampTzEx(@Versioned.SelfOffsetPtr, status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ELSE !WITH_RECORD_METHODS}
procedure IUtil.decodeTimeStampTzEx(status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ_EX; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar);
begin
  if (vTable.version < cIUtil_VERSION) then begin
    setVersionError(status, Pointer(sIUtil), vTable.version, cIUtil_VERSION);
  end
  else begin
    TUtilVTable(vTable).decodeTimeStampTzEx(Self, status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TOffsetsCallback.setOffset(status: IStatus; index: Cardinal; offset: Cardinal; nullOffset: Cardinal);
begin
  POffsetsCallbackVTable(Versioned.vTable)^.setOffset(@Versioned.SelfOffsetPtr, status, index, offset, nullOffset);
{$ELSE !WITH_RECORD_METHODS}
procedure IOffsetsCallback.setOffset(status: IStatus; index: Cardinal; offset: Cardinal; nullOffset: Cardinal);
begin
  TOffsetsCallbackVTable(vTable).setOffset(Self, status, index, offset, nullOffset);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.clear(status: IStatus);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.clear(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.clear(status: IStatus);
begin
  TXpbBuilderVTable(vTable).clear(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.removeCurrent(status: IStatus);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.removeCurrent(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.removeCurrent(status: IStatus);
begin
  TXpbBuilderVTable(vTable).removeCurrent(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.insertInt(status: IStatus; tag: Byte; value: Integer);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.insertInt(@Disposable.Versioned.SelfOffsetPtr, status, tag, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.insertInt(status: IStatus; tag: Byte; value: Integer);
begin
  TXpbBuilderVTable(vTable).insertInt(Self, status, tag, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.insertBigInt(status: IStatus; tag: Byte; value: Int64);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.insertBigInt(@Disposable.Versioned.SelfOffsetPtr, status, tag, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.insertBigInt(status: IStatus; tag: Byte; value: Int64);
begin
  TXpbBuilderVTable(vTable).insertBigInt(Self, status, tag, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.insertBytes(status: IStatus; tag: Byte; bytes: Pointer; length: Cardinal);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.insertBytes(@Disposable.Versioned.SelfOffsetPtr, status, tag, bytes, length);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.insertBytes(status: IStatus; tag: Byte; bytes: Pointer; length: Cardinal);
begin
  TXpbBuilderVTable(vTable).insertBytes(Self, status, tag, bytes, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.insertString(status: IStatus; tag: Byte; str: PAnsiChar);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.insertString(@Disposable.Versioned.SelfOffsetPtr, status, tag, str);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.insertString(status: IStatus; tag: Byte; str: PAnsiChar);
begin
  TXpbBuilderVTable(vTable).insertString(Self, status, tag, str);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.insertTag(status: IStatus; tag: Byte);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.insertTag(@Disposable.Versioned.SelfOffsetPtr, status, tag);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.insertTag(status: IStatus; tag: Byte);
begin
  TXpbBuilderVTable(vTable).insertTag(Self, status, tag);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.isEof(status: IStatus): Boolean;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.isEof(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.isEof(status: IStatus): Boolean;
begin
  Result := TXpbBuilderVTable(vTable).isEof(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.moveNext(status: IStatus);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.moveNext(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.moveNext(status: IStatus);
begin
  TXpbBuilderVTable(vTable).moveNext(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TXpbBuilder.rewind(status: IStatus);
begin
  PXpbBuilderVTable(Disposable.Versioned.vTable)^.rewind(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IXpbBuilder.rewind(status: IStatus);
begin
  TXpbBuilderVTable(vTable).rewind(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.findFirst(status: IStatus; tag: Byte): Boolean;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.findFirst(@Disposable.Versioned.SelfOffsetPtr, status, tag);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.findFirst(status: IStatus; tag: Byte): Boolean;
begin
  Result := TXpbBuilderVTable(vTable).findFirst(Self, status, tag);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.findNext(status: IStatus): Boolean;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.findNext(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.findNext(status: IStatus): Boolean;
begin
  Result := TXpbBuilderVTable(vTable).findNext(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getTag(status: IStatus): Byte;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getTag(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getTag(status: IStatus): Byte;
begin
  Result := TXpbBuilderVTable(vTable).getTag(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getLength(status: IStatus): Cardinal;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getLength(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getLength(status: IStatus): Cardinal;
begin
  Result := TXpbBuilderVTable(vTable).getLength(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getInt(status: IStatus): Integer;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getInt(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getInt(status: IStatus): Integer;
begin
  Result := TXpbBuilderVTable(vTable).getInt(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getBigInt(status: IStatus): Int64;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getBigInt(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getBigInt(status: IStatus): Int64;
begin
  Result := TXpbBuilderVTable(vTable).getBigInt(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getString(status: IStatus): PAnsiChar;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getString(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getString(status: IStatus): PAnsiChar;
begin
  Result := TXpbBuilderVTable(vTable).getString(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getBytes(status: IStatus): PByte;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getBytes(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getBytes(status: IStatus): PByte;
begin
  Result := TXpbBuilderVTable(vTable).getBytes(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getBufferLength(status: IStatus): Cardinal;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getBufferLength(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getBufferLength(status: IStatus): Cardinal;
begin
  Result := TXpbBuilderVTable(vTable).getBufferLength(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TXpbBuilder.getBuffer(status: IStatus): PByte;
begin
  Result := PXpbBuilderVTable(Disposable.Versioned.vTable)^.getBuffer(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
function IXpbBuilder.getBuffer(status: IStatus): PByte;
begin
  Result := TXpbBuilderVTable(vTable).getBuffer(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getKind(): Cardinal;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getKind(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getKind(): Cardinal;
begin
  Result := TTraceConnectionVTable(vTable).getKind(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getProcessID(): Integer;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getProcessID(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getProcessID(): Integer;
begin
  Result := TTraceConnectionVTable(vTable).getProcessID(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getUserName(): PAnsiChar;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getUserName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getUserName(): PAnsiChar;
begin
  Result := TTraceConnectionVTable(vTable).getUserName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getRoleName(): PAnsiChar;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getRoleName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getRoleName(): PAnsiChar;
begin
  Result := TTraceConnectionVTable(vTable).getRoleName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getCharSet(): PAnsiChar;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getCharSet(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getCharSet(): PAnsiChar;
begin
  Result := TTraceConnectionVTable(vTable).getCharSet(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getRemoteProtocol(): PAnsiChar;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getRemoteProtocol(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getRemoteProtocol(): PAnsiChar;
begin
  Result := TTraceConnectionVTable(vTable).getRemoteProtocol(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getRemoteAddress(): PAnsiChar;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getRemoteAddress(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getRemoteAddress(): PAnsiChar;
begin
  Result := TTraceConnectionVTable(vTable).getRemoteAddress(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getRemoteProcessID(): Integer;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getRemoteProcessID(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getRemoteProcessID(): Integer;
begin
  Result := TTraceConnectionVTable(vTable).getRemoteProcessID(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceConnection.getRemoteProcessName(): PAnsiChar;
begin
  Result := PTraceConnectionVTable(Versioned.vTable)^.getRemoteProcessName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceConnection.getRemoteProcessName(): PAnsiChar;
begin
  Result := TTraceConnectionVTable(vTable).getRemoteProcessName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceDatabaseConnection.getConnectionID(): Int64;
begin
  Result := PTraceDatabaseConnectionVTable(TraceConnection.Versioned.vTable)^.getConnectionID(@TraceConnection.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceDatabaseConnection.getConnectionID(): Int64;
begin
  Result := TTraceDatabaseConnectionVTable(vTable).getConnectionID(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceDatabaseConnection.getDatabaseName(): PAnsiChar;
begin
  Result := PTraceDatabaseConnectionVTable(TraceConnection.Versioned.vTable)^.getDatabaseName(@TraceConnection.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceDatabaseConnection.getDatabaseName(): PAnsiChar;
begin
  Result := TTraceDatabaseConnectionVTable(vTable).getDatabaseName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTransaction.getTransactionID(): Int64;
begin
  Result := PTraceTransactionVTable(Versioned.vTable)^.getTransactionID(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTransaction.getTransactionID(): Int64;
begin
  Result := TTraceTransactionVTable(vTable).getTransactionID(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTransaction.getReadOnly(): Boolean;
begin
  Result := PTraceTransactionVTable(Versioned.vTable)^.getReadOnly(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTransaction.getReadOnly(): Boolean;
begin
  Result := TTraceTransactionVTable(vTable).getReadOnly(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTransaction.getWait(): Integer;
begin
  Result := PTraceTransactionVTable(Versioned.vTable)^.getWait(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTransaction.getWait(): Integer;
begin
  Result := TTraceTransactionVTable(vTable).getWait(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTransaction.getIsolation(): Cardinal;
begin
  Result := PTraceTransactionVTable(Versioned.vTable)^.getIsolation(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTransaction.getIsolation(): Cardinal;
begin
  Result := TTraceTransactionVTable(vTable).getIsolation(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTransaction.getPerf(): PPerformanceInfo;
begin
  Result := PTraceTransactionVTable(Versioned.vTable)^.getPerf(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTransaction.getPerf(): PPerformanceInfo;
begin
  Result := TTraceTransactionVTable(vTable).getPerf(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTransaction.getInitialID(): Int64;
begin
  if (Versioned.vTable^.version < cITraceTransaction_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := PTraceTransactionVTable(Versioned.vTable)^.getInitialID(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceTransaction.getInitialID(): Int64;
begin
  if (vTable.version < cITraceTransaction_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := TTraceTransactionVTable(vTable).getInitialID(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTransaction.getPreviousID(): Int64;
begin
  if (Versioned.vTable^.version < cITraceTransaction_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := PTraceTransactionVTable(Versioned.vTable)^.getPreviousID(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceTransaction.getPreviousID(): Int64;
begin
  if (vTable.version < cITraceTransaction_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := TTraceTransactionVTable(vTable).getPreviousID(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceParams.getCount(): Cardinal;
begin
  Result := PTraceParamsVTable(Versioned.vTable)^.getCount(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceParams.getCount(): Cardinal;
begin
  Result := TTraceParamsVTable(vTable).getCount(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceParams.getParam(idx: Cardinal): Pdsc;
begin
  Result := PTraceParamsVTable(Versioned.vTable)^.getParam(@Versioned.SelfOffsetPtr, idx);
{$ELSE !WITH_RECORD_METHODS}
function ITraceParams.getParam(idx: Cardinal): Pdsc;
begin
  Result := TTraceParamsVTable(vTable).getParam(Self, idx);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceParams.getTextUTF8(status: IStatus; idx: Cardinal): PAnsiChar;
begin
  if (Versioned.vTable^.version < cITraceParams_VERSION) then begin
    setVersionError(status, Pointer(sITraceParams), Versioned.vTable^.version, cITraceParams_VERSION);
    Result := nil;
  end
  else begin
    Result := PTraceParamsVTable(Versioned.vTable)^.getTextUTF8(@Versioned.SelfOffsetPtr, status, idx);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceParams.getTextUTF8(status: IStatus; idx: Cardinal): PAnsiChar;
begin
  if (vTable.version < cITraceParams_VERSION) then begin
    setVersionError(status, Pointer(sITraceParams), vTable.version, cITraceParams_VERSION);
    Result := nil;
  end
  else begin
    Result := TTraceParamsVTable(vTable).getTextUTF8(Self, status, idx);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceStatement.getStmtID(): Int64;
begin
  Result := PTraceStatementVTable(Versioned.vTable)^.getStmtID(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceStatement.getStmtID(): Int64;
begin
  Result := TTraceStatementVTable(vTable).getStmtID(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceStatement.getPerf(): PPerformanceInfo;
begin
  Result := PTraceStatementVTable(Versioned.vTable)^.getPerf(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceStatement.getPerf(): PPerformanceInfo;
begin
  Result := TTraceStatementVTable(vTable).getPerf(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSQLStatement.getText(): PAnsiChar;
begin
  Result := PTraceSQLStatementVTable(TraceStatement.Versioned.vTable)^.getText(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSQLStatement.getText(): PAnsiChar;
begin
  Result := TTraceSQLStatementVTable(vTable).getText(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSQLStatement.getPlan(): PAnsiChar;
begin
  Result := PTraceSQLStatementVTable(TraceStatement.Versioned.vTable)^.getPlan(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSQLStatement.getPlan(): PAnsiChar;
begin
  Result := TTraceSQLStatementVTable(vTable).getPlan(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSQLStatement.getInputs(): ITraceParams;
begin
  Result := PTraceSQLStatementVTable(TraceStatement.Versioned.vTable)^.getInputs(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSQLStatement.getInputs(): ITraceParams;
begin
  Result := TTraceSQLStatementVTable(vTable).getInputs(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSQLStatement.getTextUTF8(): PAnsiChar;
begin
  Result := PTraceSQLStatementVTable(TraceStatement.Versioned.vTable)^.getTextUTF8(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSQLStatement.getTextUTF8(): PAnsiChar;
begin
  Result := TTraceSQLStatementVTable(vTable).getTextUTF8(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSQLStatement.getExplainedPlan(): PAnsiChar;
begin
  Result := PTraceSQLStatementVTable(TraceStatement.Versioned.vTable)^.getExplainedPlan(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSQLStatement.getExplainedPlan(): PAnsiChar;
begin
  Result := TTraceSQLStatementVTable(vTable).getExplainedPlan(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceBLRStatement.getData(): PByte;
begin
  Result := PTraceBLRStatementVTable(TraceStatement.Versioned.vTable)^.getData(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceBLRStatement.getData(): PByte;
begin
  Result := TTraceBLRStatementVTable(vTable).getData(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceBLRStatement.getDataLength(): Cardinal;
begin
  Result := PTraceBLRStatementVTable(TraceStatement.Versioned.vTable)^.getDataLength(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceBLRStatement.getDataLength(): Cardinal;
begin
  Result := TTraceBLRStatementVTable(vTable).getDataLength(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceBLRStatement.getText(): PAnsiChar;
begin
  Result := PTraceBLRStatementVTable(TraceStatement.Versioned.vTable)^.getText(@TraceStatement.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceBLRStatement.getText(): PAnsiChar;
begin
  Result := TTraceBLRStatementVTable(vTable).getText(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceDYNRequest.getData(): PByte;
begin
  Result := PTraceDYNRequestVTable(Versioned.vTable)^.getData(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceDYNRequest.getData(): PByte;
begin
  Result := TTraceDYNRequestVTable(vTable).getData(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceDYNRequest.getDataLength(): Cardinal;
begin
  Result := PTraceDYNRequestVTable(Versioned.vTable)^.getDataLength(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceDYNRequest.getDataLength(): Cardinal;
begin
  Result := TTraceDYNRequestVTable(vTable).getDataLength(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceDYNRequest.getText(): PAnsiChar;
begin
  Result := PTraceDYNRequestVTable(Versioned.vTable)^.getText(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceDYNRequest.getText(): PAnsiChar;
begin
  Result := TTraceDYNRequestVTable(vTable).getText(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceContextVariable.getNameSpace(): PAnsiChar;
begin
  Result := PTraceContextVariableVTable(Versioned.vTable)^.getNameSpace(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceContextVariable.getNameSpace(): PAnsiChar;
begin
  Result := TTraceContextVariableVTable(vTable).getNameSpace(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceContextVariable.getVarName(): PAnsiChar;
begin
  Result := PTraceContextVariableVTable(Versioned.vTable)^.getVarName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceContextVariable.getVarName(): PAnsiChar;
begin
  Result := TTraceContextVariableVTable(vTable).getVarName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceContextVariable.getVarValue(): PAnsiChar;
begin
  Result := PTraceContextVariableVTable(Versioned.vTable)^.getVarValue(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceContextVariable.getVarValue(): PAnsiChar;
begin
  Result := TTraceContextVariableVTable(vTable).getVarValue(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceProcedure.getProcName(): PAnsiChar;
begin
  Result := PTraceProcedureVTable(Versioned.vTable)^.getProcName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceProcedure.getProcName(): PAnsiChar;
begin
  Result := TTraceProcedureVTable(vTable).getProcName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceProcedure.getInputs(): ITraceParams;
begin
  Result := PTraceProcedureVTable(Versioned.vTable)^.getInputs(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceProcedure.getInputs(): ITraceParams;
begin
  Result := TTraceProcedureVTable(vTable).getInputs(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceProcedure.getPerf(): PPerformanceInfo;
begin
  Result := PTraceProcedureVTable(Versioned.vTable)^.getPerf(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceProcedure.getPerf(): PPerformanceInfo;
begin
  Result := TTraceProcedureVTable(vTable).getPerf(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceProcedure.getStmtID(): Int64;
begin
  if (Versioned.vTable^.version < cITraceProcedure_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := PTraceProcedureVTable(Versioned.vTable)^.getStmtID(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceProcedure.getStmtID(): Int64;
begin
  if (vTable.version < cITraceProcedure_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := TTraceProcedureVTable(vTable).getStmtID(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceProcedure.getPlan(): PAnsiChar;
begin
  if (Versioned.vTable^.version < cITraceProcedure_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := PTraceProcedureVTable(Versioned.vTable)^.getPlan(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceProcedure.getPlan(): PAnsiChar;
begin
  if (vTable.version < cITraceProcedure_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := TTraceProcedureVTable(vTable).getPlan(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceProcedure.getExplainedPlan(): PAnsiChar;
begin
  if (Versioned.vTable^.version < cITraceProcedure_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := PTraceProcedureVTable(Versioned.vTable)^.getExplainedPlan(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceProcedure.getExplainedPlan(): PAnsiChar;
begin
  if (vTable.version < cITraceProcedure_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := TTraceProcedureVTable(vTable).getExplainedPlan(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFunction.getFuncName(): PAnsiChar;
begin
  Result := PTraceFunctionVTable(Versioned.vTable)^.getFuncName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceFunction.getFuncName(): PAnsiChar;
begin
  Result := TTraceFunctionVTable(vTable).getFuncName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFunction.getInputs(): ITraceParams;
begin
  Result := PTraceFunctionVTable(Versioned.vTable)^.getInputs(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceFunction.getInputs(): ITraceParams;
begin
  Result := TTraceFunctionVTable(vTable).getInputs(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFunction.getResult(): ITraceParams;
begin
  Result := PTraceFunctionVTable(Versioned.vTable)^.getResult(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceFunction.getResult(): ITraceParams;
begin
  Result := TTraceFunctionVTable(vTable).getResult(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFunction.getPerf(): PPerformanceInfo;
begin
  Result := PTraceFunctionVTable(Versioned.vTable)^.getPerf(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceFunction.getPerf(): PPerformanceInfo;
begin
  Result := TTraceFunctionVTable(vTable).getPerf(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFunction.getStmtID(): Int64;
begin
  if (Versioned.vTable^.version < cITraceFunction_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := PTraceFunctionVTable(Versioned.vTable)^.getStmtID(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceFunction.getStmtID(): Int64;
begin
  if (vTable.version < cITraceFunction_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := TTraceFunctionVTable(vTable).getStmtID(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFunction.getPlan(): PAnsiChar;
begin
  if (Versioned.vTable^.version < cITraceFunction_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := PTraceFunctionVTable(Versioned.vTable)^.getPlan(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceFunction.getPlan(): PAnsiChar;
begin
  if (vTable.version < cITraceFunction_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := TTraceFunctionVTable(vTable).getPlan(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFunction.getExplainedPlan(): PAnsiChar;
begin
  if (Versioned.vTable^.version < cITraceFunction_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := PTraceFunctionVTable(Versioned.vTable)^.getExplainedPlan(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceFunction.getExplainedPlan(): PAnsiChar;
begin
  if (vTable.version < cITraceFunction_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := TTraceFunctionVTable(vTable).getExplainedPlan(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getTriggerName(): PAnsiChar;
begin
  Result := PTraceTriggerVTable(Versioned.vTable)^.getTriggerName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getTriggerName(): PAnsiChar;
begin
  Result := TTraceTriggerVTable(vTable).getTriggerName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getRelationName(): PAnsiChar;
begin
  Result := PTraceTriggerVTable(Versioned.vTable)^.getRelationName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getRelationName(): PAnsiChar;
begin
  Result := TTraceTriggerVTable(vTable).getRelationName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getAction(): Integer;
begin
  Result := PTraceTriggerVTable(Versioned.vTable)^.getAction(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getAction(): Integer;
begin
  Result := TTraceTriggerVTable(vTable).getAction(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getWhich(): Integer;
begin
  Result := PTraceTriggerVTable(Versioned.vTable)^.getWhich(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getWhich(): Integer;
begin
  Result := TTraceTriggerVTable(vTable).getWhich(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getPerf(): PPerformanceInfo;
begin
  Result := PTraceTriggerVTable(Versioned.vTable)^.getPerf(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getPerf(): PPerformanceInfo;
begin
  Result := TTraceTriggerVTable(vTable).getPerf(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getStmtID(): Int64;
begin
  if (Versioned.vTable^.version < cITraceTrigger_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := PTraceTriggerVTable(Versioned.vTable)^.getStmtID(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getStmtID(): Int64;
begin
  if (vTable.version < cITraceTrigger_VERSION) then begin
    Result := 0;
  end
  else begin
    Result := TTraceTriggerVTable(vTable).getStmtID(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getPlan(): PAnsiChar;
begin
  if (Versioned.vTable^.version < cITraceTrigger_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := PTraceTriggerVTable(Versioned.vTable)^.getPlan(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getPlan(): PAnsiChar;
begin
  if (vTable.version < cITraceTrigger_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := TTraceTriggerVTable(vTable).getPlan(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceTrigger.getExplainedPlan(): PAnsiChar;
begin
  if (Versioned.vTable^.version < cITraceTrigger_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := PTraceTriggerVTable(Versioned.vTable)^.getExplainedPlan(@Versioned.SelfOffsetPtr);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceTrigger.getExplainedPlan(): PAnsiChar;
begin
  if (vTable.version < cITraceTrigger_VERSION) then begin
    Result := nil;
  end
  else begin
    Result := TTraceTriggerVTable(vTable).getExplainedPlan(Self);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceServiceConnection.getServiceID(): Pointer;
begin
  Result := PTraceServiceConnectionVTable(TraceConnection.Versioned.vTable)^.getServiceID(@TraceConnection.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceServiceConnection.getServiceID(): Pointer;
begin
  Result := TTraceServiceConnectionVTable(vTable).getServiceID(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceServiceConnection.getServiceMgr(): PAnsiChar;
begin
  Result := PTraceServiceConnectionVTable(TraceConnection.Versioned.vTable)^.getServiceMgr(@TraceConnection.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceServiceConnection.getServiceMgr(): PAnsiChar;
begin
  Result := TTraceServiceConnectionVTable(vTable).getServiceMgr(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceServiceConnection.getServiceName(): PAnsiChar;
begin
  Result := PTraceServiceConnectionVTable(TraceConnection.Versioned.vTable)^.getServiceName(@TraceConnection.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceServiceConnection.getServiceName(): PAnsiChar;
begin
  Result := TTraceServiceConnectionVTable(vTable).getServiceName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceStatusVector.hasError(): Boolean;
begin
  Result := PTraceStatusVectorVTable(Versioned.vTable)^.hasError(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceStatusVector.hasError(): Boolean;
begin
  Result := TTraceStatusVectorVTable(vTable).hasError(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceStatusVector.hasWarning(): Boolean;
begin
  Result := PTraceStatusVectorVTable(Versioned.vTable)^.hasWarning(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceStatusVector.hasWarning(): Boolean;
begin
  Result := TTraceStatusVectorVTable(vTable).hasWarning(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceStatusVector.getStatus(): IStatus;
begin
  Result := PTraceStatusVectorVTable(Versioned.vTable)^.getStatus(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceStatusVector.getStatus(): IStatus;
begin
  Result := TTraceStatusVectorVTable(vTable).getStatus(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceStatusVector.getText(): PAnsiChar;
begin
  Result := PTraceStatusVectorVTable(Versioned.vTable)^.getText(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceStatusVector.getText(): PAnsiChar;
begin
  Result := TTraceStatusVectorVTable(vTable).getText(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSweepInfo.getOIT(): Int64;
begin
  Result := PTraceSweepInfoVTable(Versioned.vTable)^.getOIT(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSweepInfo.getOIT(): Int64;
begin
  Result := TTraceSweepInfoVTable(vTable).getOIT(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSweepInfo.getOST(): Int64;
begin
  Result := PTraceSweepInfoVTable(Versioned.vTable)^.getOST(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSweepInfo.getOST(): Int64;
begin
  Result := TTraceSweepInfoVTable(vTable).getOST(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSweepInfo.getOAT(): Int64;
begin
  Result := PTraceSweepInfoVTable(Versioned.vTable)^.getOAT(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSweepInfo.getOAT(): Int64;
begin
  Result := TTraceSweepInfoVTable(vTable).getOAT(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSweepInfo.getNext(): Int64;
begin
  Result := PTraceSweepInfoVTable(Versioned.vTable)^.getNext(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSweepInfo.getNext(): Int64;
begin
  Result := TTraceSweepInfoVTable(vTable).getNext(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceSweepInfo.getPerf(): PPerformanceInfo;
begin
  Result := PTraceSweepInfoVTable(Versioned.vTable)^.getPerf(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceSweepInfo.getPerf(): PPerformanceInfo;
begin
  Result := TTraceSweepInfoVTable(vTable).getPerf(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceLogWriter.write(buf: Pointer; size: Cardinal): Cardinal;
begin
  Result := PTraceLogWriterVTable(ReferenceCounted.Versioned.vTable)^.write(@ReferenceCounted.Versioned.SelfOffsetPtr, buf, size);
{$ELSE !WITH_RECORD_METHODS}
function ITraceLogWriter.write(buf: Pointer; size: Cardinal): Cardinal;
begin
  Result := TTraceLogWriterVTable(vTable).write(Self, buf, size);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceLogWriter.write_s(status: IStatus; buf: Pointer; size: Cardinal): Cardinal;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITraceLogWriter_VERSION) then begin
    setVersionError(status, Pointer(sITraceLogWriter), ReferenceCounted.Versioned.vTable^.version, cITraceLogWriter_VERSION);
    Result := 0;
  end
  else begin
    Result := PTraceLogWriterVTable(ReferenceCounted.Versioned.vTable)^.write_s(@ReferenceCounted.Versioned.SelfOffsetPtr, status, buf, size);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITraceLogWriter.write_s(status: IStatus; buf: Pointer; size: Cardinal): Cardinal;
begin
  if (vTable.version < cITraceLogWriter_VERSION) then begin
    setVersionError(status, Pointer(sITraceLogWriter), vTable.version, cITraceLogWriter_VERSION);
    Result := 0;
  end
  else begin
    Result := TTraceLogWriterVTable(vTable).write_s(Self, status, buf, size);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceInitInfo.getConfigText(): PAnsiChar;
begin
  Result := PTraceInitInfoVTable(Versioned.vTable)^.getConfigText(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceInitInfo.getConfigText(): PAnsiChar;
begin
  Result := TTraceInitInfoVTable(vTable).getConfigText(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceInitInfo.getTraceSessionID(): Integer;
begin
  Result := PTraceInitInfoVTable(Versioned.vTable)^.getTraceSessionID(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceInitInfo.getTraceSessionID(): Integer;
begin
  Result := TTraceInitInfoVTable(vTable).getTraceSessionID(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceInitInfo.getTraceSessionName(): PAnsiChar;
begin
  Result := PTraceInitInfoVTable(Versioned.vTable)^.getTraceSessionName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceInitInfo.getTraceSessionName(): PAnsiChar;
begin
  Result := TTraceInitInfoVTable(vTable).getTraceSessionName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceInitInfo.getFirebirdRootDirectory(): PAnsiChar;
begin
  Result := PTraceInitInfoVTable(Versioned.vTable)^.getFirebirdRootDirectory(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceInitInfo.getFirebirdRootDirectory(): PAnsiChar;
begin
  Result := TTraceInitInfoVTable(vTable).getFirebirdRootDirectory(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceInitInfo.getDatabaseName(): PAnsiChar;
begin
  Result := PTraceInitInfoVTable(Versioned.vTable)^.getDatabaseName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceInitInfo.getDatabaseName(): PAnsiChar;
begin
  Result := TTraceInitInfoVTable(vTable).getDatabaseName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceInitInfo.getConnection(): ITraceDatabaseConnection;
begin
  Result := PTraceInitInfoVTable(Versioned.vTable)^.getConnection(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceInitInfo.getConnection(): ITraceDatabaseConnection;
begin
  Result := TTraceInitInfoVTable(vTable).getConnection(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceInitInfo.getLogWriter(): ITraceLogWriter;
begin
  Result := PTraceInitInfoVTable(Versioned.vTable)^.getLogWriter(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceInitInfo.getLogWriter(): ITraceLogWriter;
begin
  Result := TTraceInitInfoVTable(vTable).getLogWriter(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_get_error(): PAnsiChar;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_get_error(@ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_get_error(): PAnsiChar;
begin
  Result := TTracePluginVTable(vTable).trace_get_error(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_attach(connection: ITraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_attach(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, create_db, att_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_attach(connection: ITraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_attach(Self, connection, create_db, att_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_detach(connection: ITraceDatabaseConnection; drop_db: Boolean): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_detach(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, drop_db);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_detach(connection: ITraceDatabaseConnection; drop_db: Boolean): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_detach(Self, connection, drop_db);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_transaction_start(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; tpb_length: Cardinal; tpb: PByte; tra_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_transaction_start(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, tpb_length, tpb, tra_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_transaction_start(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; tpb_length: Cardinal; tpb: PByte; tra_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_transaction_start(Self, connection, transaction, tpb_length, tpb, tra_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_transaction_end(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_transaction_end(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, commit, retain_context, tra_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_transaction_end(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_transaction_end(Self, connection, transaction, commit, retain_context, tra_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_proc_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; procedure_: ITraceProcedure; started: Boolean; proc_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_proc_execute(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, procedure_, started, proc_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_proc_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; procedure_: ITraceProcedure; started: Boolean; proc_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_proc_execute(Self, connection, transaction, procedure_, started, proc_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_trigger_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; trigger: ITraceTrigger; started: Boolean; trig_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_trigger_execute(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, trigger, started, trig_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_trigger_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; trigger: ITraceTrigger; started: Boolean; trig_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_trigger_execute(Self, connection, transaction, trigger, started, trig_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_set_context(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; variable: ITraceContextVariable): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_set_context(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, variable);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_set_context(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; variable: ITraceContextVariable): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_set_context(Self, connection, transaction, variable);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_dsql_prepare(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_dsql_prepare(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, statement, time_millis, req_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_dsql_prepare(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_dsql_prepare(Self, connection, transaction, statement, time_millis, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_dsql_free(connection: ITraceDatabaseConnection; statement: ITraceSQLStatement; option: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_dsql_free(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, statement, option);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_dsql_free(connection: ITraceDatabaseConnection; statement: ITraceSQLStatement; option: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_dsql_free(Self, connection, statement, option);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_dsql_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_dsql_execute(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, statement, started, req_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_dsql_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_dsql_execute(Self, connection, transaction, statement, started, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_blr_compile(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_blr_compile(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, statement, time_millis, req_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_blr_compile(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_blr_compile(Self, connection, transaction, statement, time_millis, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_blr_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; req_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_blr_execute(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, statement, req_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_blr_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; req_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_blr_execute(Self, connection, transaction, statement, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_dyn_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; request: ITraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_dyn_execute(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, request, time_millis, req_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_dyn_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; request: ITraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_dyn_execute(Self, connection, transaction, request, time_millis, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_service_attach(service: ITraceServiceConnection; att_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_service_attach(@ReferenceCounted.Versioned.SelfOffsetPtr, service, att_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_service_attach(service: ITraceServiceConnection; att_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_service_attach(Self, service, att_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_service_start(service: ITraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_service_start(@ReferenceCounted.Versioned.SelfOffsetPtr, service, switches_length, switches, start_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_service_start(service: ITraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_service_start(Self, service, switches_length, switches, start_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_service_query(service: ITraceServiceConnection; send_item_length: Cardinal; send_items: PByte; recv_item_length: Cardinal; recv_items: PByte; query_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_service_query(@ReferenceCounted.Versioned.SelfOffsetPtr, service, send_item_length, send_items, recv_item_length, recv_items, query_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_service_query(service: ITraceServiceConnection; send_item_length: Cardinal; send_items: PByte; recv_item_length: Cardinal; recv_items: PByte; query_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_service_query(Self, service, send_item_length, send_items, recv_item_length, recv_items, query_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_service_detach(service: ITraceServiceConnection; detach_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_service_detach(@ReferenceCounted.Versioned.SelfOffsetPtr, service, detach_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_service_detach(service: ITraceServiceConnection; detach_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_service_detach(Self, service, detach_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_event_error(connection: ITraceConnection; status: ITraceStatusVector; function_: PAnsiChar): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_event_error(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, status, function_);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_event_error(connection: ITraceConnection; status: ITraceStatusVector; function_: PAnsiChar): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_event_error(Self, connection, status, function_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_event_sweep(connection: ITraceDatabaseConnection; sweep: ITraceSweepInfo; sweep_state: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_event_sweep(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, sweep, sweep_state);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_event_sweep(connection: ITraceDatabaseConnection; sweep: ITraceSweepInfo; sweep_state: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_event_sweep(Self, connection, sweep, sweep_state);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_func_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; function_: ITraceFunction; started: Boolean; func_result: Cardinal): Boolean;
begin
  Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_func_execute(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, function_, started, func_result);
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_func_execute(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; function_: ITraceFunction; started: Boolean; func_result: Cardinal): Boolean;
begin
  Result := TTracePluginVTable(vTable).trace_func_execute(Self, connection, transaction, function_, started, func_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_dsql_restart(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; number: Cardinal): Boolean;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_dsql_restart(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, transaction, statement, number);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_dsql_restart(connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; number: Cardinal): Boolean;
begin
  if (vTable.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := TTracePluginVTable(vTable).trace_dsql_restart(Self, connection, transaction, statement, number);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_proc_compile(connection: ITraceDatabaseConnection; procedure_: ITraceProcedure; time_millis: Int64; proc_result: Cardinal): Boolean;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_proc_compile(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, procedure_, time_millis, proc_result);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_proc_compile(connection: ITraceDatabaseConnection; procedure_: ITraceProcedure; time_millis: Int64; proc_result: Cardinal): Boolean;
begin
  if (vTable.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := TTracePluginVTable(vTable).trace_proc_compile(Self, connection, procedure_, time_millis, proc_result);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_func_compile(connection: ITraceDatabaseConnection; function_: ITraceFunction; time_millis: Int64; func_result: Cardinal): Boolean;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_func_compile(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, function_, time_millis, func_result);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_func_compile(connection: ITraceDatabaseConnection; function_: ITraceFunction; time_millis: Int64; func_result: Cardinal): Boolean;
begin
  if (vTable.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := TTracePluginVTable(vTable).trace_func_compile(Self, connection, function_, time_millis, func_result);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTracePlugin.trace_trigger_compile(connection: ITraceDatabaseConnection; trigger: ITraceTrigger; time_millis: Int64; trig_result: Cardinal): Boolean;
begin
  if (ReferenceCounted.Versioned.vTable^.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := PTracePluginVTable(ReferenceCounted.Versioned.vTable)^.trace_trigger_compile(@ReferenceCounted.Versioned.SelfOffsetPtr, connection, trigger, time_millis, trig_result);
  end;
{$ELSE !WITH_RECORD_METHODS}
function ITracePlugin.trace_trigger_compile(connection: ITraceDatabaseConnection; trigger: ITraceTrigger; time_millis: Int64; trig_result: Cardinal): Boolean;
begin
  if (vTable.version < cITracePlugin_VERSION) then begin
    Result := false;
  end
  else begin
    Result := TTracePluginVTable(vTable).trace_trigger_compile(Self, connection, trigger, time_millis, trig_result);
  end;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFactory.trace_needs(): UInt64;
begin
  Result := PTraceFactoryVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.trace_needs(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function ITraceFactory.trace_needs(): UInt64;
begin
  Result := TTraceFactoryVTable(vTable).trace_needs(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TTraceFactory.trace_create(status: IStatus; init_info: ITraceInitInfo): ITracePlugin;
begin
  Result := PTraceFactoryVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.trace_create(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, init_info);
{$ELSE !WITH_RECORD_METHODS}
function ITraceFactory.trace_create(status: IStatus; init_info: ITraceInitInfo): ITracePlugin;
begin
  Result := TTraceFactoryVTable(vTable).trace_create(Self, status, init_info);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUdrFunctionFactory.setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder);
begin
  PUdrFunctionFactoryVTable(Disposable.Versioned.vTable)^.setup(@Disposable.Versioned.SelfOffsetPtr, status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
procedure IUdrFunctionFactory.setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder);
begin
  TUdrFunctionFactoryVTable(vTable).setup(Self, status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUdrFunctionFactory.newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalFunction;
begin
  Result := PUdrFunctionFactoryVTable(Disposable.Versioned.vTable)^.newItem(@Disposable.Versioned.SelfOffsetPtr, status, context, metadata);
{$ELSE !WITH_RECORD_METHODS}
function IUdrFunctionFactory.newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalFunction;
begin
  Result := TUdrFunctionFactoryVTable(vTable).newItem(Self, status, context, metadata);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUdrProcedureFactory.setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder);
begin
  PUdrProcedureFactoryVTable(Disposable.Versioned.vTable)^.setup(@Disposable.Versioned.SelfOffsetPtr, status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
procedure IUdrProcedureFactory.setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder);
begin
  TUdrProcedureFactoryVTable(vTable).setup(Self, status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUdrProcedureFactory.newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalProcedure;
begin
  Result := PUdrProcedureFactoryVTable(Disposable.Versioned.vTable)^.newItem(@Disposable.Versioned.SelfOffsetPtr, status, context, metadata);
{$ELSE !WITH_RECORD_METHODS}
function IUdrProcedureFactory.newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalProcedure;
begin
  Result := TUdrProcedureFactoryVTable(vTable).newItem(Self, status, context, metadata);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUdrTriggerFactory.setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder);
begin
  PUdrTriggerFactoryVTable(Disposable.Versioned.vTable)^.setup(@Disposable.Versioned.SelfOffsetPtr, status, context, metadata, fieldsBuilder);
{$ELSE !WITH_RECORD_METHODS}
procedure IUdrTriggerFactory.setup(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder);
begin
  TUdrTriggerFactoryVTable(vTable).setup(Self, status, context, metadata, fieldsBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUdrTriggerFactory.newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalTrigger;
begin
  Result := PUdrTriggerFactoryVTable(Disposable.Versioned.vTable)^.newItem(@Disposable.Versioned.SelfOffsetPtr, status, context, metadata);
{$ELSE !WITH_RECORD_METHODS}
function IUdrTriggerFactory.newItem(status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalTrigger;
begin
  Result := TUdrTriggerFactoryVTable(vTable).newItem(Self, status, context, metadata);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TUdrPlugin.getMaster(): IMaster;
begin
  Result := PUdrPluginVTable(Versioned.vTable)^.getMaster(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IUdrPlugin.getMaster(): IMaster;
begin
  Result := TUdrPluginVTable(vTable).getMaster(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUdrPlugin.registerFunction(status: IStatus; name: PAnsiChar; factory: IUdrFunctionFactory);
begin
  PUdrPluginVTable(Versioned.vTable)^.registerFunction(@Versioned.SelfOffsetPtr, status, name, factory);
{$ELSE !WITH_RECORD_METHODS}
procedure IUdrPlugin.registerFunction(status: IStatus; name: PAnsiChar; factory: IUdrFunctionFactory);
begin
  TUdrPluginVTable(vTable).registerFunction(Self, status, name, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUdrPlugin.registerProcedure(status: IStatus; name: PAnsiChar; factory: IUdrProcedureFactory);
begin
  PUdrPluginVTable(Versioned.vTable)^.registerProcedure(@Versioned.SelfOffsetPtr, status, name, factory);
{$ELSE !WITH_RECORD_METHODS}
procedure IUdrPlugin.registerProcedure(status: IStatus; name: PAnsiChar; factory: IUdrProcedureFactory);
begin
  TUdrPluginVTable(vTable).registerProcedure(Self, status, name, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TUdrPlugin.registerTrigger(status: IStatus; name: PAnsiChar; factory: IUdrTriggerFactory);
begin
  PUdrPluginVTable(Versioned.vTable)^.registerTrigger(@Versioned.SelfOffsetPtr, status, name, factory);
{$ELSE !WITH_RECORD_METHODS}
procedure IUdrPlugin.registerTrigger(status: IStatus; name: PAnsiChar; factory: IUdrTriggerFactory);
begin
  TUdrPluginVTable(vTable).registerTrigger(Self, status, name, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat16.toBcd(from: PFB_DEC16; sign: PInteger; bcd: PByte; exp: PInteger);
begin
  PDecFloat16VTable(Versioned.vTable)^.toBcd(@Versioned.SelfOffsetPtr, from, sign, bcd, exp);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat16.toBcd(from: PFB_DEC16; sign: PInteger; bcd: PByte; exp: PInteger);
begin
  TDecFloat16VTable(vTable).toBcd(Self, from, sign, bcd, exp);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat16.toString(status: IStatus; from: PFB_DEC16; bufferLength: Cardinal; buffer: PAnsiChar);
begin
  PDecFloat16VTable(Versioned.vTable)^.toString(@Versioned.SelfOffsetPtr, status, from, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat16.toString(status: IStatus; from: PFB_DEC16; bufferLength: Cardinal; buffer: PAnsiChar);
begin
  TDecFloat16VTable(vTable).toString(Self, status, from, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat16.fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC16);
begin
  PDecFloat16VTable(Versioned.vTable)^.fromBcd(@Versioned.SelfOffsetPtr, sign, bcd, exp, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat16.fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC16);
begin
  TDecFloat16VTable(vTable).fromBcd(Self, sign, bcd, exp, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat16.fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC16);
begin
  PDecFloat16VTable(Versioned.vTable)^.fromString(@Versioned.SelfOffsetPtr, status, from, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat16.fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC16);
begin
  TDecFloat16VTable(vTable).fromString(Self, status, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat34.toBcd(from: PFB_DEC34; sign: PInteger; bcd: PByte; exp: PInteger);
begin
  PDecFloat34VTable(Versioned.vTable)^.toBcd(@Versioned.SelfOffsetPtr, from, sign, bcd, exp);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat34.toBcd(from: PFB_DEC34; sign: PInteger; bcd: PByte; exp: PInteger);
begin
  TDecFloat34VTable(vTable).toBcd(Self, from, sign, bcd, exp);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat34.toString(status: IStatus; from: PFB_DEC34; bufferLength: Cardinal; buffer: PAnsiChar);
begin
  PDecFloat34VTable(Versioned.vTable)^.toString(@Versioned.SelfOffsetPtr, status, from, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat34.toString(status: IStatus; from: PFB_DEC34; bufferLength: Cardinal; buffer: PAnsiChar);
begin
  TDecFloat34VTable(vTable).toString(Self, status, from, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat34.fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC34);
begin
  PDecFloat34VTable(Versioned.vTable)^.fromBcd(@Versioned.SelfOffsetPtr, sign, bcd, exp, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat34.fromBcd(sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC34);
begin
  TDecFloat34VTable(vTable).fromBcd(Self, sign, bcd, exp, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TDecFloat34.fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC34);
begin
  PDecFloat34VTable(Versioned.vTable)^.fromString(@Versioned.SelfOffsetPtr, status, from, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IDecFloat34.fromString(status: IStatus; from: PAnsiChar; to_: PFB_DEC34);
begin
  TDecFloat34VTable(vTable).fromString(Self, status, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TInt128.toString(status: IStatus; from: PFB_I128; scale: Integer; bufferLength: Cardinal; buffer: PAnsiChar);
begin
  PInt128VTable(Versioned.vTable)^.toString(@Versioned.SelfOffsetPtr, status, from, scale, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
procedure IInt128.toString(status: IStatus; from: PFB_I128; scale: Integer; bufferLength: Cardinal; buffer: PAnsiChar);
begin
  TInt128VTable(vTable).toString(Self, status, from, scale, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TInt128.fromString(status: IStatus; scale: Integer; from: PAnsiChar; to_: PFB_I128);
begin
  PInt128VTable(Versioned.vTable)^.fromString(@Versioned.SelfOffsetPtr, status, scale, from, to_);
{$ELSE !WITH_RECORD_METHODS}
procedure IInt128.fromString(status: IStatus; scale: Integer; from: PAnsiChar; to_: PFB_I128);
begin
  TInt128VTable(vTable).fromString(Self, status, scale, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedField.getName(): PAnsiChar;
begin
  Result := PReplicatedFieldVTable(Versioned.vTable)^.getName(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedField.getName(): PAnsiChar;
begin
  Result := TReplicatedFieldVTable(vTable).getName(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedField.getType(): Cardinal;
begin
  Result := PReplicatedFieldVTable(Versioned.vTable)^.getType(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedField.getType(): Cardinal;
begin
  Result := TReplicatedFieldVTable(vTable).getType(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedField.getSubType(): Integer;
begin
  Result := PReplicatedFieldVTable(Versioned.vTable)^.getSubType(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedField.getSubType(): Integer;
begin
  Result := TReplicatedFieldVTable(vTable).getSubType(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedField.getScale(): Integer;
begin
  Result := PReplicatedFieldVTable(Versioned.vTable)^.getScale(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedField.getScale(): Integer;
begin
  Result := TReplicatedFieldVTable(vTable).getScale(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedField.getLength(): Cardinal;
begin
  Result := PReplicatedFieldVTable(Versioned.vTable)^.getLength(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedField.getLength(): Cardinal;
begin
  Result := TReplicatedFieldVTable(vTable).getLength(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedField.getCharSet(): Cardinal;
begin
  Result := PReplicatedFieldVTable(Versioned.vTable)^.getCharSet(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedField.getCharSet(): Cardinal;
begin
  Result := TReplicatedFieldVTable(vTable).getCharSet(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedField.getData(): Pointer;
begin
  Result := PReplicatedFieldVTable(Versioned.vTable)^.getData(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedField.getData(): Pointer;
begin
  Result := TReplicatedFieldVTable(vTable).getData(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedRecord.getCount(): Cardinal;
begin
  Result := PReplicatedRecordVTable(Versioned.vTable)^.getCount(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedRecord.getCount(): Cardinal;
begin
  Result := TReplicatedRecordVTable(vTable).getCount(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedRecord.getField(index: Cardinal): IReplicatedField;
begin
  Result := PReplicatedRecordVTable(Versioned.vTable)^.getField(@Versioned.SelfOffsetPtr, index);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedRecord.getField(index: Cardinal): IReplicatedField;
begin
  Result := TReplicatedRecordVTable(vTable).getField(Self, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedRecord.getRawLength(): Cardinal;
begin
  Result := PReplicatedRecordVTable(Versioned.vTable)^.getRawLength(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedRecord.getRawLength(): Cardinal;
begin
  Result := TReplicatedRecordVTable(vTable).getRawLength(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedRecord.getRawData(): PByte;
begin
  Result := PReplicatedRecordVTable(Versioned.vTable)^.getRawData(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedRecord.getRawData(): PByte;
begin
  Result := TReplicatedRecordVTable(vTable).getRawData(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.prepare(status: IStatus);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.prepare(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.prepare(status: IStatus);
begin
  TReplicatedTransactionVTable(vTable).prepare(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.commit(status: IStatus);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.commit(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.commit(status: IStatus);
begin
  TReplicatedTransactionVTable(vTable).commit(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.rollback(status: IStatus);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.rollback(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.rollback(status: IStatus);
begin
  TReplicatedTransactionVTable(vTable).rollback(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.startSavepoint(status: IStatus);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.startSavepoint(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.startSavepoint(status: IStatus);
begin
  TReplicatedTransactionVTable(vTable).startSavepoint(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.releaseSavepoint(status: IStatus);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.releaseSavepoint(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.releaseSavepoint(status: IStatus);
begin
  TReplicatedTransactionVTable(vTable).releaseSavepoint(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.rollbackSavepoint(status: IStatus);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.rollbackSavepoint(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.rollbackSavepoint(status: IStatus);
begin
  TReplicatedTransactionVTable(vTable).rollbackSavepoint(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.insertRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.insertRecord(@Disposable.Versioned.SelfOffsetPtr, status, name, record_);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.insertRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord);
begin
  TReplicatedTransactionVTable(vTable).insertRecord(Self, status, name, record_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.updateRecord(status: IStatus; name: PAnsiChar; orgRecord: IReplicatedRecord; newRecord: IReplicatedRecord);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.updateRecord(@Disposable.Versioned.SelfOffsetPtr, status, name, orgRecord, newRecord);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.updateRecord(status: IStatus; name: PAnsiChar; orgRecord: IReplicatedRecord; newRecord: IReplicatedRecord);
begin
  TReplicatedTransactionVTable(vTable).updateRecord(Self, status, name, orgRecord, newRecord);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.deleteRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.deleteRecord(@Disposable.Versioned.SelfOffsetPtr, status, name, record_);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.deleteRecord(status: IStatus; name: PAnsiChar; record_: IReplicatedRecord);
begin
  TReplicatedTransactionVTable(vTable).deleteRecord(Self, status, name, record_);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.executeSql(status: IStatus; sql: PAnsiChar);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.executeSql(@Disposable.Versioned.SelfOffsetPtr, status, sql);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.executeSql(status: IStatus; sql: PAnsiChar);
begin
  TReplicatedTransactionVTable(vTable).executeSql(Self, status, sql);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedTransaction.executeSqlIntl(status: IStatus; charset: Cardinal; sql: PAnsiChar);
begin
  PReplicatedTransactionVTable(Disposable.Versioned.vTable)^.executeSqlIntl(@Disposable.Versioned.SelfOffsetPtr, status, charset, sql);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedTransaction.executeSqlIntl(status: IStatus; charset: Cardinal; sql: PAnsiChar);
begin
  TReplicatedTransactionVTable(vTable).executeSqlIntl(Self, status, charset, sql);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedSession.init(status: IStatus; attachment: IAttachment): Boolean;
begin
  Result := PReplicatedSessionVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.init(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, attachment);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedSession.init(status: IStatus; attachment: IAttachment): Boolean;
begin
  Result := TReplicatedSessionVTable(vTable).init(Self, status, attachment);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TReplicatedSession.startTransaction(status: IStatus; transaction: ITransaction; number: Int64): IReplicatedTransaction;
begin
  Result := PReplicatedSessionVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.startTransaction(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, transaction, number);
{$ELSE !WITH_RECORD_METHODS}
function IReplicatedSession.startTransaction(status: IStatus; transaction: ITransaction; number: Int64): IReplicatedTransaction;
begin
  Result := TReplicatedSessionVTable(vTable).startTransaction(Self, status, transaction, number);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedSession.cleanupTransaction(status: IStatus; number: Int64);
begin
  PReplicatedSessionVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.cleanupTransaction(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, number);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedSession.cleanupTransaction(status: IStatus; number: Int64);
begin
  TReplicatedSessionVTable(vTable).cleanupTransaction(Self, status, number);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TReplicatedSession.setSequence(status: IStatus; name: PAnsiChar; value: Int64);
begin
  PReplicatedSessionVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.setSequence(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, name, value);
{$ELSE !WITH_RECORD_METHODS}
procedure IReplicatedSession.setSequence(status: IStatus; name: PAnsiChar; value: Int64);
begin
  TReplicatedSessionVTable(vTable).setSequence(Self, status, name, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerPlugin.init(status: IStatus; attachment: IAttachment; ticksFrequency: UInt64);
begin
  PProfilerPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.init(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, attachment, ticksFrequency);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerPlugin.init(status: IStatus; attachment: IAttachment; ticksFrequency: UInt64);
begin
  TProfilerPluginVTable(vTable).init(Self, status, attachment, ticksFrequency);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TProfilerPlugin.startSession(status: IStatus; description: PAnsiChar; options: PAnsiChar; timestamp: TISC_TIMESTAMP_TZ): IProfilerSession;
begin
  Result := PProfilerPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.startSession(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status, description, options, timestamp);
{$ELSE !WITH_RECORD_METHODS}
function IProfilerPlugin.startSession(status: IStatus; description: PAnsiChar; options: PAnsiChar; timestamp: TISC_TIMESTAMP_TZ): IProfilerSession;
begin
  Result := TProfilerPluginVTable(vTable).startSession(Self, status, description, options, timestamp);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerPlugin.flush(status: IStatus);
begin
  PProfilerPluginVTable(PluginBase.ReferenceCounted.Versioned.vTable)^.flush(@PluginBase.ReferenceCounted.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerPlugin.flush(status: IStatus);
begin
  TProfilerPluginVTable(vTable).flush(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TProfilerSession.getId(): Int64;
begin
  Result := PProfilerSessionVTable(Disposable.Versioned.vTable)^.getId(@Disposable.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IProfilerSession.getId(): Int64;
begin
  Result := TProfilerSessionVTable(vTable).getId(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TProfilerSession.getFlags(): Cardinal;
begin
  Result := PProfilerSessionVTable(Disposable.Versioned.vTable)^.getFlags(@Disposable.Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IProfilerSession.getFlags(): Cardinal;
begin
  Result := TProfilerSessionVTable(vTable).getFlags(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.cancel(status: IStatus);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.cancel(@Disposable.Versioned.SelfOffsetPtr, status);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.cancel(status: IStatus);
begin
  TProfilerSessionVTable(vTable).cancel(Self, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.finish(status: IStatus; timestamp: TISC_TIMESTAMP_TZ);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.finish(@Disposable.Versioned.SelfOffsetPtr, status, timestamp);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.finish(status: IStatus; timestamp: TISC_TIMESTAMP_TZ);
begin
  TProfilerSessionVTable(vTable).finish(Self, status, timestamp);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.defineStatement(status: IStatus; statementId: Int64; parentStatementId: Int64; type_: PAnsiChar; packageName: PAnsiChar; routineName: PAnsiChar; sqlText: PAnsiChar);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.defineStatement(@Disposable.Versioned.SelfOffsetPtr, status, statementId, parentStatementId, type_, packageName, routineName, sqlText);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.defineStatement(status: IStatus; statementId: Int64; parentStatementId: Int64; type_: PAnsiChar; packageName: PAnsiChar; routineName: PAnsiChar; sqlText: PAnsiChar);
begin
  TProfilerSessionVTable(vTable).defineStatement(Self, status, statementId, parentStatementId, type_, packageName, routineName, sqlText);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.defineCursor(statementId: Int64; cursorId: Cardinal; name: PAnsiChar; line: Cardinal; column: Cardinal);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.defineCursor(@Disposable.Versioned.SelfOffsetPtr, statementId, cursorId, name, line, column);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.defineCursor(statementId: Int64; cursorId: Cardinal; name: PAnsiChar; line: Cardinal; column: Cardinal);
begin
  TProfilerSessionVTable(vTable).defineCursor(Self, statementId, cursorId, name, line, column);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.defineRecordSource(statementId: Int64; cursorId: Cardinal; recSourceId: Cardinal; level: Cardinal; accessPath: PAnsiChar; parentRecSourceId: Cardinal);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.defineRecordSource(@Disposable.Versioned.SelfOffsetPtr, statementId, cursorId, recSourceId, level, accessPath, parentRecSourceId);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.defineRecordSource(statementId: Int64; cursorId: Cardinal; recSourceId: Cardinal; level: Cardinal; accessPath: PAnsiChar; parentRecSourceId: Cardinal);
begin
  TProfilerSessionVTable(vTable).defineRecordSource(Self, statementId, cursorId, recSourceId, level, accessPath, parentRecSourceId);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.onRequestStart(status: IStatus; statementId: Int64; requestId: Int64; callerStatementId: Int64; callerRequestId: Int64; timestamp: TISC_TIMESTAMP_TZ);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.onRequestStart(@Disposable.Versioned.SelfOffsetPtr, status, statementId, requestId, callerStatementId, callerRequestId, timestamp);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.onRequestStart(status: IStatus; statementId: Int64; requestId: Int64; callerStatementId: Int64; callerRequestId: Int64; timestamp: TISC_TIMESTAMP_TZ);
begin
  TProfilerSessionVTable(vTable).onRequestStart(Self, status, statementId, requestId, callerStatementId, callerRequestId, timestamp);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.onRequestFinish(status: IStatus; statementId: Int64; requestId: Int64; timestamp: TISC_TIMESTAMP_TZ; stats: IProfilerStats);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.onRequestFinish(@Disposable.Versioned.SelfOffsetPtr, status, statementId, requestId, timestamp, stats);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.onRequestFinish(status: IStatus; statementId: Int64; requestId: Int64; timestamp: TISC_TIMESTAMP_TZ; stats: IProfilerStats);
begin
  TProfilerSessionVTable(vTable).onRequestFinish(Self, status, statementId, requestId, timestamp, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.beforePsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.beforePsqlLineColumn(@Disposable.Versioned.SelfOffsetPtr, statementId, requestId, line, column);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.beforePsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal);
begin
  TProfilerSessionVTable(vTable).beforePsqlLineColumn(Self, statementId, requestId, line, column);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.afterPsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal; stats: IProfilerStats);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.afterPsqlLineColumn(@Disposable.Versioned.SelfOffsetPtr, statementId, requestId, line, column, stats);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.afterPsqlLineColumn(statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal; stats: IProfilerStats);
begin
  TProfilerSessionVTable(vTable).afterPsqlLineColumn(Self, statementId, requestId, line, column, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.beforeRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.beforeRecordSourceOpen(@Disposable.Versioned.SelfOffsetPtr, statementId, requestId, cursorId, recSourceId);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.beforeRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal);
begin
  TProfilerSessionVTable(vTable).beforeRecordSourceOpen(Self, statementId, requestId, cursorId, recSourceId);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.afterRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.afterRecordSourceOpen(@Disposable.Versioned.SelfOffsetPtr, statementId, requestId, cursorId, recSourceId, stats);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.afterRecordSourceOpen(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats);
begin
  TProfilerSessionVTable(vTable).afterRecordSourceOpen(Self, statementId, requestId, cursorId, recSourceId, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.beforeRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.beforeRecordSourceGetRecord(@Disposable.Versioned.SelfOffsetPtr, statementId, requestId, cursorId, recSourceId);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.beforeRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal);
begin
  TProfilerSessionVTable(vTable).beforeRecordSourceGetRecord(Self, statementId, requestId, cursorId, recSourceId);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
procedure TProfilerSession.afterRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats);
begin
  PProfilerSessionVTable(Disposable.Versioned.vTable)^.afterRecordSourceGetRecord(@Disposable.Versioned.SelfOffsetPtr, statementId, requestId, cursorId, recSourceId, stats);
{$ELSE !WITH_RECORD_METHODS}
procedure IProfilerSession.afterRecordSourceGetRecord(statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats);
begin
  TProfilerSessionVTable(vTable).afterRecordSourceGetRecord(Self, statementId, requestId, cursorId, recSourceId, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFDEF WITH_RECORD_METHODS}
function TProfilerStats.getElapsedTicks(): UInt64;
begin
  Result := PProfilerStatsVTable(Versioned.vTable)^.getElapsedTicks(@Versioned.SelfOffsetPtr);
{$ELSE !WITH_RECORD_METHODS}
function IProfilerStats.getElapsedTicks(): UInt64;
begin
  Result := TProfilerStatsVTable(vTable).getElapsedTicks(Self);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IVersionedImpl_vTable: TVersionedVTable = (
    SelfOffsetPtr: nil; version: cIVersioned_VERSION);
{$ELSE !WITH_RECORD_METHODS}
  IVersionedImpl_vTable: TVersionedVTable;
{$ENDIF !WITH_RECORD_METHODS}

constructor IVersionedImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IVersionedImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IVersionedImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReferenceCountedImpl_addRefDispatcher(this: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReferenceCountedImpl(this.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IReferenceCountedImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReferenceCountedImpl_releaseDispatcher(this: IReferenceCounted): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReferenceCountedImpl(this.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReferenceCountedImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IReferenceCountedImpl_vTable: TReferenceCountedVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIReferenceCounted_VERSION);
    addRef: IReferenceCountedImpl_addRefDispatcher;
    release: IReferenceCountedImpl_releaseDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IReferenceCountedImpl_vTable: TReferenceCountedVTable;
{$ENDIF !WITH_RECORD_METHODS}

constructor IReferenceCountedImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IReferenceCountedImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IReferenceCountedImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDisposableImpl_disposeDispatcher(this: IDisposable); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDisposableImpl(this.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IDisposableImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IDisposableImpl_vTable: TDisposableVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIDisposable_VERSION);
    dispose: IDisposableImpl_disposeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IDisposableImpl_vTable: TDisposableVTable;
{$ENDIF !WITH_RECORD_METHODS}

constructor IDisposableImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IDisposableImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IDisposableImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatusImpl_disposeDispatcher(this: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatusImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IStatusImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatusImpl_initDispatcher(this: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatusImpl(this.Disposable.Versioned.SelfObject).init();
{$ELSE !WITH_RECORD_METHODS}
  IStatusImpl(this).init();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatusImpl_getStateDispatcher(this: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatusImpl(this.Disposable.Versioned.SelfObject).getState();
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatusImpl(this).getState();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatusImpl_setErrors2Dispatcher(this: IStatus; length: Cardinal; value: PNativeInt); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatusImpl(this.Disposable.Versioned.SelfObject).setErrors2(length, value);
{$ELSE !WITH_RECORD_METHODS}
  IStatusImpl(this).setErrors2(length, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatusImpl_setWarnings2Dispatcher(this: IStatus; length: Cardinal; value: PNativeInt); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatusImpl(this.Disposable.Versioned.SelfObject).setWarnings2(length, value);
{$ELSE !WITH_RECORD_METHODS}
  IStatusImpl(this).setWarnings2(length, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatusImpl_setErrorsDispatcher(this: IStatus; value: PNativeInt); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatusImpl(this.Disposable.Versioned.SelfObject).setErrors(value);
{$ELSE !WITH_RECORD_METHODS}
  IStatusImpl(this).setErrors(value);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatusImpl_setWarningsDispatcher(this: IStatus; value: PNativeInt); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatusImpl(this.Disposable.Versioned.SelfObject).setWarnings(value);
{$ELSE !WITH_RECORD_METHODS}
  IStatusImpl(this).setWarnings(value);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatusImpl_getErrorsDispatcher(this: IStatus): PNativeInt; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatusImpl(this.Disposable.Versioned.SelfObject).getErrors();
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatusImpl(this).getErrors();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatusImpl_getWarningsDispatcher(this: IStatus): PNativeInt; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatusImpl(this.Disposable.Versioned.SelfObject).getWarnings();
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatusImpl(this).getWarnings();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatusImpl_cloneDispatcher(this: IStatus): IStatus; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatusImpl(this.Disposable.Versioned.SelfObject).clone();
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatusImpl(this).clone();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IStatusImpl_vTable: TStatusVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIStatus_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    init: IStatusImpl_initDispatcher;
    getState: IStatusImpl_getStateDispatcher;
    setErrors2: IStatusImpl_setErrors2Dispatcher;
    setWarnings2: IStatusImpl_setWarnings2Dispatcher;
    setErrors: IStatusImpl_setErrorsDispatcher;
    setWarnings: IStatusImpl_setWarningsDispatcher;
    getErrors: IStatusImpl_getErrorsDispatcher;
    getWarnings: IStatusImpl_getWarningsDispatcher;
    clone: IStatusImpl_cloneDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IStatusImpl_vTable: TStatusVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IStatusImpl.AsIStatus: IStatus;
begin
  Result := IStatus(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IStatusImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IStatusImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IStatusImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getStatusDispatcher(this: IMaster): IStatus; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getStatus();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getStatus();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getDispatcherDispatcher(this: IMaster): IProvider; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getDispatcher();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getDispatcher();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getPluginManagerDispatcher(this: IMaster): IPluginManager; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getPluginManager();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getPluginManager();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getTimerControlDispatcher(this: IMaster): ITimerControl; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getTimerControl();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getTimerControl();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getDtcDispatcher(this: IMaster): IDtc; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getDtc();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getDtc();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_registerAttachmentDispatcher(this: IMaster; provider: IProvider; attachment: IAttachment): IAttachment; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).registerAttachment(provider, attachment);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).registerAttachment(provider, attachment);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_registerTransactionDispatcher(this: IMaster; attachment: IAttachment; transaction: ITransaction): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).registerTransaction(attachment, transaction);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).registerTransaction(attachment, transaction);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getMetadataBuilderDispatcher(this: IMaster; status: IStatus; fieldCount: Cardinal): IMetadataBuilder; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getMetadataBuilder(status, fieldCount);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getMetadataBuilder(status, fieldCount);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_serverModeDispatcher(this: IMaster; mode: Integer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).serverMode(mode);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).serverMode(mode);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getUtilInterfaceDispatcher(this: IMaster): IUtil; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getUtilInterface();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getUtilInterface();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getConfigManagerDispatcher(this: IMaster): IConfigManager; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getConfigManager();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getConfigManager();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMasterImpl_getProcessExitingDispatcher(this: IMaster): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMasterImpl(this.Versioned.SelfObject).getProcessExiting();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMasterImpl(this).getProcessExiting();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IMasterImpl_vTable: TMasterVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIMaster_VERSION);
    getStatus: IMasterImpl_getStatusDispatcher;
    getDispatcher: IMasterImpl_getDispatcherDispatcher;
    getPluginManager: IMasterImpl_getPluginManagerDispatcher;
    getTimerControl: IMasterImpl_getTimerControlDispatcher;
    getDtc: IMasterImpl_getDtcDispatcher;
    registerAttachment: IMasterImpl_registerAttachmentDispatcher;
    registerTransaction: IMasterImpl_registerTransactionDispatcher;
    getMetadataBuilder: IMasterImpl_getMetadataBuilderDispatcher;
    serverMode: IMasterImpl_serverModeDispatcher;
    getUtilInterface: IMasterImpl_getUtilInterfaceDispatcher;
    getConfigManager: IMasterImpl_getConfigManagerDispatcher;
    getProcessExiting: IMasterImpl_getProcessExitingDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IMasterImpl_vTable: TMasterVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IMasterImpl.AsIMaster: IMaster;
begin
  Result := IMaster(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IMasterImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IMasterImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IMasterImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginBaseImpl_addRefDispatcher(this: IPluginBase); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginBaseImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IPluginBaseImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginBaseImpl_releaseDispatcher(this: IPluginBase): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginBaseImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginBaseImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginBaseImpl_setOwnerDispatcher(this: IPluginBase; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginBaseImpl(this.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IPluginBaseImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginBaseImpl_getOwnerDispatcher(this: IPluginBase): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginBaseImpl(this.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginBaseImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IPluginBaseImpl_vTable: TPluginBaseVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIPluginBase_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    setOwner: IPluginBaseImpl_setOwnerDispatcher;
    getOwner: IPluginBaseImpl_getOwnerDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IPluginBaseImpl_vTable: TPluginBaseVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IPluginBaseImpl.AsIPluginBase: IPluginBase;
begin
  Result := IPluginBase(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IPluginBaseImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IPluginBaseImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IPluginBaseImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginSetImpl_addRefDispatcher(this: IPluginSet); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginSetImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IPluginSetImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginSetImpl_releaseDispatcher(this: IPluginSet): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginSetImpl_getNameDispatcher(this: IPluginSet): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this.ReferenceCounted.Versioned.SelfObject).getName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this).getName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginSetImpl_getModuleNameDispatcher(this: IPluginSet): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this.ReferenceCounted.Versioned.SelfObject).getModuleName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this).getModuleName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginSetImpl_getPluginDispatcher(this: IPluginSet; status: IStatus): IPluginBase; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this.ReferenceCounted.Versioned.SelfObject).getPlugin(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginSetImpl(this).getPlugin(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginSetImpl_nextDispatcher(this: IPluginSet; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginSetImpl(this.ReferenceCounted.Versioned.SelfObject).next(status);
{$ELSE !WITH_RECORD_METHODS}
  IPluginSetImpl(this).next(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginSetImpl_set_Dispatcher(this: IPluginSet; status: IStatus; s: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginSetImpl(this.ReferenceCounted.Versioned.SelfObject).set_(status, s);
{$ELSE !WITH_RECORD_METHODS}
  IPluginSetImpl(this).set_(status, s);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IPluginSetImpl_vTable: TPluginSetVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIPluginSet_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getName: IPluginSetImpl_getNameDispatcher;
    getModuleName: IPluginSetImpl_getModuleNameDispatcher;
    getPlugin: IPluginSetImpl_getPluginDispatcher;
    next: IPluginSetImpl_nextDispatcher;
    set_: IPluginSetImpl_set_Dispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IPluginSetImpl_vTable: TPluginSetVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IPluginSetImpl.AsIPluginSet: IPluginSet;
begin
  Result := IPluginSet(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IPluginSetImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IPluginSetImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IPluginSetImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IConfigEntryImpl_addRefDispatcher(this: IConfigEntry); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IConfigEntryImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IConfigEntryImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigEntryImpl_releaseDispatcher(this: IConfigEntry): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigEntryImpl_getNameDispatcher(this: IConfigEntry): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this.ReferenceCounted.Versioned.SelfObject).getName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this).getName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigEntryImpl_getValueDispatcher(this: IConfigEntry): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this.ReferenceCounted.Versioned.SelfObject).getValue();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this).getValue();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigEntryImpl_getIntValueDispatcher(this: IConfigEntry): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this.ReferenceCounted.Versioned.SelfObject).getIntValue();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this).getIntValue();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigEntryImpl_getBoolValueDispatcher(this: IConfigEntry): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this.ReferenceCounted.Versioned.SelfObject).getBoolValue();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this).getBoolValue();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigEntryImpl_getSubConfigDispatcher(this: IConfigEntry; status: IStatus): IConfig; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this.ReferenceCounted.Versioned.SelfObject).getSubConfig(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigEntryImpl(this).getSubConfig(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IConfigEntryImpl_vTable: TConfigEntryVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIConfigEntry_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getName: IConfigEntryImpl_getNameDispatcher;
    getValue: IConfigEntryImpl_getValueDispatcher;
    getIntValue: IConfigEntryImpl_getIntValueDispatcher;
    getBoolValue: IConfigEntryImpl_getBoolValueDispatcher;
    getSubConfig: IConfigEntryImpl_getSubConfigDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IConfigEntryImpl_vTable: TConfigEntryVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IConfigEntryImpl.AsIConfigEntry: IConfigEntry;
begin
  Result := IConfigEntry(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IConfigEntryImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IConfigEntryImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IConfigEntryImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IConfigImpl_addRefDispatcher(this: IConfig); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IConfigImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IConfigImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigImpl_releaseDispatcher(this: IConfig): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigImpl_findDispatcher(this: IConfig; status: IStatus; name: PAnsiChar): IConfigEntry; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigImpl(this.ReferenceCounted.Versioned.SelfObject).find(status, name);
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigImpl(this).find(status, name);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigImpl_findValueDispatcher(this: IConfig; status: IStatus; name: PAnsiChar; value: PAnsiChar): IConfigEntry; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigImpl(this.ReferenceCounted.Versioned.SelfObject).findValue(status, name, value);
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigImpl(this).findValue(status, name, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigImpl_findPosDispatcher(this: IConfig; status: IStatus; name: PAnsiChar; pos: Cardinal): IConfigEntry; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigImpl(this.ReferenceCounted.Versioned.SelfObject).findPos(status, name, pos);
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigImpl(this).findPos(status, name, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IConfigImpl_vTable: TConfigVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIConfig_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    find: IConfigImpl_findDispatcher;
    findValue: IConfigImpl_findValueDispatcher;
    findPos: IConfigImpl_findPosDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IConfigImpl_vTable: TConfigVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IConfigImpl.AsIConfig: IConfig;
begin
  Result := IConfig(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IConfigImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IConfigImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IConfigImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IFirebirdConfImpl_addRefDispatcher(this: IFirebirdConf); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IFirebirdConfImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IFirebirdConfImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IFirebirdConfImpl_releaseDispatcher(this: IFirebirdConf): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IFirebirdConfImpl_getKeyDispatcher(this: IFirebirdConf; name: PAnsiChar): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this.ReferenceCounted.Versioned.SelfObject).getKey(name);
{$ELSE !WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this).getKey(name);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IFirebirdConfImpl_asIntegerDispatcher(this: IFirebirdConf; key: Cardinal): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this.ReferenceCounted.Versioned.SelfObject).asInteger(key);
{$ELSE !WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this).asInteger(key);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IFirebirdConfImpl_asStringDispatcher(this: IFirebirdConf; key: Cardinal): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this.ReferenceCounted.Versioned.SelfObject).asString(key);
{$ELSE !WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this).asString(key);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IFirebirdConfImpl_asBooleanDispatcher(this: IFirebirdConf; key: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this.ReferenceCounted.Versioned.SelfObject).asBoolean(key);
{$ELSE !WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this).asBoolean(key);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IFirebirdConfImpl_getVersionDispatcher(this: IFirebirdConf; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this.ReferenceCounted.Versioned.SelfObject).getVersion(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IFirebirdConfImpl(this).getVersion(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IFirebirdConfImpl_vTable: TFirebirdConfVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIFirebirdConf_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getKey: IFirebirdConfImpl_getKeyDispatcher;
    asInteger: IFirebirdConfImpl_asIntegerDispatcher;
    asString: IFirebirdConfImpl_asStringDispatcher;
    asBoolean: IFirebirdConfImpl_asBooleanDispatcher;
    getVersion: IFirebirdConfImpl_getVersionDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IFirebirdConfImpl_vTable: TFirebirdConfVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IFirebirdConfImpl.AsIFirebirdConf: IFirebirdConf;
begin
  Result := IFirebirdConf(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IFirebirdConfImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IFirebirdConfImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IFirebirdConfImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginConfigImpl_addRefDispatcher(this: IPluginConfig); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginConfigImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IPluginConfigImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginConfigImpl_releaseDispatcher(this: IPluginConfig): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginConfigImpl_getConfigFileNameDispatcher(this: IPluginConfig): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this.ReferenceCounted.Versioned.SelfObject).getConfigFileName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this).getConfigFileName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginConfigImpl_getDefaultConfigDispatcher(this: IPluginConfig; status: IStatus): IConfig; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this.ReferenceCounted.Versioned.SelfObject).getDefaultConfig(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this).getDefaultConfig(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginConfigImpl_getFirebirdConfDispatcher(this: IPluginConfig; status: IStatus): IFirebirdConf; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this.ReferenceCounted.Versioned.SelfObject).getFirebirdConf(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginConfigImpl(this).getFirebirdConf(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginConfigImpl_setReleaseDelayDispatcher(this: IPluginConfig; status: IStatus; microSeconds: UInt64); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginConfigImpl(this.ReferenceCounted.Versioned.SelfObject).setReleaseDelay(status, microSeconds);
{$ELSE !WITH_RECORD_METHODS}
  IPluginConfigImpl(this).setReleaseDelay(status, microSeconds);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IPluginConfigImpl_vTable: TPluginConfigVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIPluginConfig_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getConfigFileName: IPluginConfigImpl_getConfigFileNameDispatcher;
    getDefaultConfig: IPluginConfigImpl_getDefaultConfigDispatcher;
    getFirebirdConf: IPluginConfigImpl_getFirebirdConfDispatcher;
    setReleaseDelay: IPluginConfigImpl_setReleaseDelayDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IPluginConfigImpl_vTable: TPluginConfigVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IPluginConfigImpl.AsIPluginConfig: IPluginConfig;
begin
  Result := IPluginConfig(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IPluginConfigImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IPluginConfigImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IPluginConfigImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginFactoryImpl_createPluginDispatcher(this: IPluginFactory; status: IStatus; factoryParameter: IPluginConfig): IPluginBase; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginFactoryImpl(this.Versioned.SelfObject).createPlugin(status, factoryParameter);
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginFactoryImpl(this).createPlugin(status, factoryParameter);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IPluginFactoryImpl_vTable: TPluginFactoryVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIPluginFactory_VERSION);
    createPlugin: IPluginFactoryImpl_createPluginDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IPluginFactoryImpl_vTable: TPluginFactoryVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IPluginFactoryImpl.AsIPluginFactory: IPluginFactory;
begin
  Result := IPluginFactory(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IPluginFactoryImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IPluginFactoryImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IPluginFactoryImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginModuleImpl_doCleanDispatcher(this: IPluginModule); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginModuleImpl(this.Versioned.SelfObject).doClean();
{$ELSE !WITH_RECORD_METHODS}
  IPluginModuleImpl(this).doClean();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginModuleImpl_threadDetachDispatcher(this: IPluginModule); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginModuleImpl(this.Versioned.SelfObject).threadDetach();
{$ELSE !WITH_RECORD_METHODS}
  IPluginModuleImpl(this).threadDetach();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IPluginModuleImpl_vTable: TPluginModuleVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIPluginModule_VERSION);
    doClean: IPluginModuleImpl_doCleanDispatcher;
    threadDetach: IPluginModuleImpl_threadDetachDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IPluginModuleImpl_vTable: TPluginModuleVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IPluginModuleImpl.AsIPluginModule: IPluginModule;
begin
  Result := IPluginModule(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IPluginModuleImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IPluginModuleImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IPluginModuleImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginManagerImpl_registerPluginFactoryDispatcher(this: IPluginManager; pluginType: Cardinal; defaultName: PAnsiChar; factory: IPluginFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginManagerImpl(this.Versioned.SelfObject).registerPluginFactory(pluginType, defaultName, factory);
{$ELSE !WITH_RECORD_METHODS}
  IPluginManagerImpl(this).registerPluginFactory(pluginType, defaultName, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginManagerImpl_registerModuleDispatcher(this: IPluginManager; cleanup: IPluginModule); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginManagerImpl(this.Versioned.SelfObject).registerModule(cleanup);
{$ELSE !WITH_RECORD_METHODS}
  IPluginManagerImpl(this).registerModule(cleanup);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginManagerImpl_unregisterModuleDispatcher(this: IPluginManager; cleanup: IPluginModule); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginManagerImpl(this.Versioned.SelfObject).unregisterModule(cleanup);
{$ELSE !WITH_RECORD_METHODS}
  IPluginManagerImpl(this).unregisterModule(cleanup);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginManagerImpl_getPluginsDispatcher(this: IPluginManager; status: IStatus; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: IFirebirdConf): IPluginSet; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginManagerImpl(this.Versioned.SelfObject).getPlugins(status, pluginType, namesList, firebirdConf);
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginManagerImpl(this).getPlugins(status, pluginType, namesList, firebirdConf);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IPluginManagerImpl_getConfigDispatcher(this: IPluginManager; status: IStatus; filename: PAnsiChar): IConfig; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IPluginManagerImpl(this.Versioned.SelfObject).getConfig(status, filename);
{$ELSE !WITH_RECORD_METHODS}
  Result := IPluginManagerImpl(this).getConfig(status, filename);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IPluginManagerImpl_releasePluginDispatcher(this: IPluginManager; plugin: IPluginBase); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IPluginManagerImpl(this.Versioned.SelfObject).releasePlugin(plugin);
{$ELSE !WITH_RECORD_METHODS}
  IPluginManagerImpl(this).releasePlugin(plugin);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IPluginManagerImpl_vTable: TPluginManagerVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIPluginManager_VERSION);
    registerPluginFactory: IPluginManagerImpl_registerPluginFactoryDispatcher;
    registerModule: IPluginManagerImpl_registerModuleDispatcher;
    unregisterModule: IPluginManagerImpl_unregisterModuleDispatcher;
    getPlugins: IPluginManagerImpl_getPluginsDispatcher;
    getConfig: IPluginManagerImpl_getConfigDispatcher;
    releasePlugin: IPluginManagerImpl_releasePluginDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IPluginManagerImpl_vTable: TPluginManagerVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IPluginManagerImpl.AsIPluginManager: IPluginManager;
begin
  Result := IPluginManager(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IPluginManagerImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IPluginManagerImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IPluginManagerImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ICryptKeyImpl_setSymmetricDispatcher(this: ICryptKey; status: IStatus; type_: PAnsiChar; keyLength: Cardinal; key: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ICryptKeyImpl(this.Versioned.SelfObject).setSymmetric(status, type_, keyLength, key);
{$ELSE !WITH_RECORD_METHODS}
  ICryptKeyImpl(this).setSymmetric(status, type_, keyLength, key);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ICryptKeyImpl_setAsymmetricDispatcher(this: ICryptKey; status: IStatus; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ICryptKeyImpl(this.Versioned.SelfObject).setAsymmetric(status, type_, encryptKeyLength, encryptKey, decryptKeyLength, decryptKey);
{$ELSE !WITH_RECORD_METHODS}
  ICryptKeyImpl(this).setAsymmetric(status, type_, encryptKeyLength, encryptKey, decryptKeyLength, decryptKey);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ICryptKeyImpl_getEncryptKeyDispatcher(this: ICryptKey; length: PCardinal): Pointer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ICryptKeyImpl(this.Versioned.SelfObject).getEncryptKey(length);
{$ELSE !WITH_RECORD_METHODS}
  Result := ICryptKeyImpl(this).getEncryptKey(length);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ICryptKeyImpl_getDecryptKeyDispatcher(this: ICryptKey; length: PCardinal): Pointer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ICryptKeyImpl(this.Versioned.SelfObject).getDecryptKey(length);
{$ELSE !WITH_RECORD_METHODS}
  Result := ICryptKeyImpl(this).getDecryptKey(length);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ICryptKeyImpl_vTable: TCryptKeyVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cICryptKey_VERSION);
    setSymmetric: ICryptKeyImpl_setSymmetricDispatcher;
    setAsymmetric: ICryptKeyImpl_setAsymmetricDispatcher;
    getEncryptKey: ICryptKeyImpl_getEncryptKeyDispatcher;
    getDecryptKey: ICryptKeyImpl_getDecryptKeyDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ICryptKeyImpl_vTable: TCryptKeyVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ICryptKeyImpl.AsICryptKey: ICryptKey;
begin
  Result := ICryptKey(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ICryptKeyImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ICryptKeyImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ICryptKeyImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigManagerImpl_getDirectoryDispatcher(this: IConfigManager; code: Cardinal): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this.Versioned.SelfObject).getDirectory(code);
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this).getDirectory(code);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigManagerImpl_getFirebirdConfDispatcher(this: IConfigManager): IFirebirdConf; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this.Versioned.SelfObject).getFirebirdConf();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this).getFirebirdConf();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigManagerImpl_getDatabaseConfDispatcher(this: IConfigManager; dbName: PAnsiChar): IFirebirdConf; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this.Versioned.SelfObject).getDatabaseConf(dbName);
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this).getDatabaseConf(dbName);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigManagerImpl_getPluginConfigDispatcher(this: IConfigManager; configuredPlugin: PAnsiChar): IConfig; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this.Versioned.SelfObject).getPluginConfig(configuredPlugin);
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this).getPluginConfig(configuredPlugin);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigManagerImpl_getInstallDirectoryDispatcher(this: IConfigManager): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this.Versioned.SelfObject).getInstallDirectory();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this).getInstallDirectory();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigManagerImpl_getRootDirectoryDispatcher(this: IConfigManager): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this.Versioned.SelfObject).getRootDirectory();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this).getRootDirectory();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IConfigManagerImpl_getDefaultSecurityDbDispatcher(this: IConfigManager): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this.Versioned.SelfObject).getDefaultSecurityDb();
{$ELSE !WITH_RECORD_METHODS}
  Result := IConfigManagerImpl(this).getDefaultSecurityDb();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IConfigManagerImpl_vTable: TConfigManagerVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIConfigManager_VERSION);
    getDirectory: IConfigManagerImpl_getDirectoryDispatcher;
    getFirebirdConf: IConfigManagerImpl_getFirebirdConfDispatcher;
    getDatabaseConf: IConfigManagerImpl_getDatabaseConfDispatcher;
    getPluginConfig: IConfigManagerImpl_getPluginConfigDispatcher;
    getInstallDirectory: IConfigManagerImpl_getInstallDirectoryDispatcher;
    getRootDirectory: IConfigManagerImpl_getRootDirectoryDispatcher;
    getDefaultSecurityDb: IConfigManagerImpl_getDefaultSecurityDbDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IConfigManagerImpl_vTable: TConfigManagerVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IConfigManagerImpl.AsIConfigManager: IConfigManager;
begin
  Result := IConfigManager(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IConfigManagerImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IConfigManagerImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IConfigManagerImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IEventCallbackImpl_addRefDispatcher(this: IEventCallback); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IEventCallbackImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IEventCallbackImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IEventCallbackImpl_releaseDispatcher(this: IEventCallback): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IEventCallbackImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IEventCallbackImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IEventCallbackImpl_eventCallbackFunctionDispatcher(this: IEventCallback; length: Cardinal; events: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IEventCallbackImpl(this.ReferenceCounted.Versioned.SelfObject).eventCallbackFunction(length, events);
{$ELSE !WITH_RECORD_METHODS}
  IEventCallbackImpl(this).eventCallbackFunction(length, events);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IEventCallbackImpl_vTable: TEventCallbackVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIEventCallback_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    eventCallbackFunction: IEventCallbackImpl_eventCallbackFunctionDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IEventCallbackImpl_vTable: TEventCallbackVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IEventCallbackImpl.AsIEventCallback: IEventCallback;
begin
  Result := IEventCallback(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IEventCallbackImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IEventCallbackImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IEventCallbackImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBlobImpl_addRefDispatcher(this: IBlob); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBlobImpl_releaseDispatcher(this: IBlob): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IBlobImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBlobImpl_getInfoDispatcher(this: IBlob; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBlobImpl_getSegmentDispatcher(this: IBlob; status: IStatus; bufferLength: Cardinal; buffer: Pointer; segmentLength: PCardinal): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).getSegment(status, bufferLength, buffer, segmentLength);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBlobImpl(this).getSegment(status, bufferLength, buffer, segmentLength);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBlobImpl_putSegmentDispatcher(this: IBlob; status: IStatus; length: Cardinal; buffer: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).putSegment(status, length, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl(this).putSegment(status, length, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBlobImpl_deprecatedCancelDispatcher(this: IBlob; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedCancel(status);
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl(this).deprecatedCancel(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBlobImpl_deprecatedCloseDispatcher(this: IBlob; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedClose(status);
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl(this).deprecatedClose(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBlobImpl_seekDispatcher(this: IBlob; status: IStatus; mode: Integer; offset: Integer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).seek(status, mode, offset);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBlobImpl(this).seek(status, mode, offset);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBlobImpl_cancelDispatcher(this: IBlob; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).cancel(status);
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl(this).cancel(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBlobImpl_closeDispatcher(this: IBlob; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl(this.ReferenceCounted.Versioned.SelfObject).close(status);
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl(this).close(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IBlobImpl_vTable: TBlobVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIBlob_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getInfo: IBlobImpl_getInfoDispatcher;
    getSegment: IBlobImpl_getSegmentDispatcher;
    putSegment: IBlobImpl_putSegmentDispatcher;
    deprecatedCancel: IBlobImpl_deprecatedCancelDispatcher;
    deprecatedClose: IBlobImpl_deprecatedCloseDispatcher;
    seek: IBlobImpl_seekDispatcher;
    cancel: IBlobImpl_cancelDispatcher;
    close: IBlobImpl_closeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IBlobImpl_vTable: TBlobVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IBlobImpl.AsIBlob: IBlob;
begin
  Result := IBlob(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IBlobImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IBlobImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IBlobImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_addRefDispatcher(this: ITransaction); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITransactionImpl_releaseDispatcher(this: ITransaction): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITransactionImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_getInfoDispatcher(this: ITransaction; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_prepareDispatcher(this: ITransaction; status: IStatus; msgLength: Cardinal; message: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).prepare(status, msgLength, message);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).prepare(status, msgLength, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_deprecatedCommitDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedCommit(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).deprecatedCommit(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_commitRetainingDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).commitRetaining(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).commitRetaining(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_deprecatedRollbackDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedRollback(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).deprecatedRollback(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_rollbackRetainingDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).rollbackRetaining(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).rollbackRetaining(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_deprecatedDisconnectDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedDisconnect(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).deprecatedDisconnect(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITransactionImpl_joinDispatcher(this: ITransaction; status: IStatus; transaction: ITransaction): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).join(status, transaction);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITransactionImpl(this).join(status, transaction);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITransactionImpl_validateDispatcher(this: ITransaction; status: IStatus; attachment: IAttachment): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).validate(status, attachment);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITransactionImpl(this).validate(status, attachment);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITransactionImpl_enterDtcDispatcher(this: ITransaction; status: IStatus): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).enterDtc(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITransactionImpl(this).enterDtc(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_commitDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).commit(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).commit(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_rollbackDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).rollback(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).rollback(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITransactionImpl_disconnectDispatcher(this: ITransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl(this.ReferenceCounted.Versioned.SelfObject).disconnect(status);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl(this).disconnect(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITransactionImpl_vTable: TTransactionVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITransaction_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getInfo: ITransactionImpl_getInfoDispatcher;
    prepare: ITransactionImpl_prepareDispatcher;
    deprecatedCommit: ITransactionImpl_deprecatedCommitDispatcher;
    commitRetaining: ITransactionImpl_commitRetainingDispatcher;
    deprecatedRollback: ITransactionImpl_deprecatedRollbackDispatcher;
    rollbackRetaining: ITransactionImpl_rollbackRetainingDispatcher;
    deprecatedDisconnect: ITransactionImpl_deprecatedDisconnectDispatcher;
    join: ITransactionImpl_joinDispatcher;
    validate: ITransactionImpl_validateDispatcher;
    enterDtc: ITransactionImpl_enterDtcDispatcher;
    commit: ITransactionImpl_commitDispatcher;
    rollback: ITransactionImpl_rollbackDispatcher;
    disconnect: ITransactionImpl_disconnectDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITransactionImpl_vTable: TTransactionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITransactionImpl.AsITransaction: ITransaction;
begin
  Result := ITransaction(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITransactionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITransactionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITransactionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMessageMetadataImpl_addRefDispatcher(this: IMessageMetadata); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IMessageMetadataImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_releaseDispatcher(this: IMessageMetadata): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getCountDispatcher(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getCount(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getCount(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getFieldDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getField(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getField(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getRelationDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getRelation(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getRelation(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getOwnerDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getOwner(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getOwner(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getAliasDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getAlias(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getAlias(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getTypeDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getType(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getType(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_isNullableDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).isNullable(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).isNullable(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getSubTypeDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getSubType(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getSubType(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getLengthDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getLength(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getLength(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getScaleDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getScale(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getScale(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getCharSetDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getCharSet(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getCharSet(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getOffsetDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getOffset(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getOffset(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getNullOffsetDispatcher(this: IMessageMetadata; status: IStatus; index: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getNullOffset(status, index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getNullOffset(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getBuilderDispatcher(this: IMessageMetadata; status: IStatus): IMetadataBuilder; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getBuilder(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getBuilder(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getMessageLengthDispatcher(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getMessageLength(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getMessageLength(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getAlignmentDispatcher(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getAlignment(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getAlignment(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMessageMetadataImpl_getAlignedLengthDispatcher(this: IMessageMetadata; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this.ReferenceCounted.Versioned.SelfObject).getAlignedLength(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMessageMetadataImpl(this).getAlignedLength(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IMessageMetadataImpl_vTable: TMessageMetadataVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIMessageMetadata_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getCount: IMessageMetadataImpl_getCountDispatcher;
    getField: IMessageMetadataImpl_getFieldDispatcher;
    getRelation: IMessageMetadataImpl_getRelationDispatcher;
    getOwner: IMessageMetadataImpl_getOwnerDispatcher;
    getAlias: IMessageMetadataImpl_getAliasDispatcher;
    getType: IMessageMetadataImpl_getTypeDispatcher;
    isNullable: IMessageMetadataImpl_isNullableDispatcher;
    getSubType: IMessageMetadataImpl_getSubTypeDispatcher;
    getLength: IMessageMetadataImpl_getLengthDispatcher;
    getScale: IMessageMetadataImpl_getScaleDispatcher;
    getCharSet: IMessageMetadataImpl_getCharSetDispatcher;
    getOffset: IMessageMetadataImpl_getOffsetDispatcher;
    getNullOffset: IMessageMetadataImpl_getNullOffsetDispatcher;
    getBuilder: IMessageMetadataImpl_getBuilderDispatcher;
    getMessageLength: IMessageMetadataImpl_getMessageLengthDispatcher;
    getAlignment: IMessageMetadataImpl_getAlignmentDispatcher;
    getAlignedLength: IMessageMetadataImpl_getAlignedLengthDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IMessageMetadataImpl_vTable: TMessageMetadataVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IMessageMetadataImpl.AsIMessageMetadata: IMessageMetadata;
begin
  Result := IMessageMetadata(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IMessageMetadataImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IMessageMetadataImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IMessageMetadataImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_addRefDispatcher(this: IMetadataBuilder); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMetadataBuilderImpl_releaseDispatcher(this: IMetadataBuilder): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IMetadataBuilderImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setTypeDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; type_: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setType(status, index, type_);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setType(status, index, type_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setSubTypeDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; subType: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setSubType(status, index, subType);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setSubType(status, index, subType);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setLengthDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; length: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setLength(status, index, length);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setLength(status, index, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setCharSetDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; charSet: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setCharSet(status, index, charSet);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setCharSet(status, index, charSet);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setScaleDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; scale: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setScale(status, index, scale);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setScale(status, index, scale);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_truncateDispatcher(this: IMetadataBuilder; status: IStatus; count: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).truncate(status, count);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).truncate(status, count);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_moveNameToIndexDispatcher(this: IMetadataBuilder; status: IStatus; name: PAnsiChar; index: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).moveNameToIndex(status, name, index);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).moveNameToIndex(status, name, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_removeDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).remove(status, index);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).remove(status, index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMetadataBuilderImpl_addFieldDispatcher(this: IMetadataBuilder; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).addField(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMetadataBuilderImpl(this).addField(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IMetadataBuilderImpl_getMetadataDispatcher(this: IMetadataBuilder; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).getMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IMetadataBuilderImpl(this).getMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setFieldDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; field: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setField(status, index, field);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setField(status, index, field);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setRelationDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; relation: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setRelation(status, index, relation);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setRelation(status, index, relation);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setOwnerDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; owner: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setOwner(status, index, owner);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setOwner(status, index, owner);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IMetadataBuilderImpl_setAliasDispatcher(this: IMetadataBuilder; status: IStatus; index: Cardinal; alias: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this.ReferenceCounted.Versioned.SelfObject).setAlias(status, index, alias);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl(this).setAlias(status, index, alias);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IMetadataBuilderImpl_vTable: TMetadataBuilderVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIMetadataBuilder_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    setType: IMetadataBuilderImpl_setTypeDispatcher;
    setSubType: IMetadataBuilderImpl_setSubTypeDispatcher;
    setLength: IMetadataBuilderImpl_setLengthDispatcher;
    setCharSet: IMetadataBuilderImpl_setCharSetDispatcher;
    setScale: IMetadataBuilderImpl_setScaleDispatcher;
    truncate: IMetadataBuilderImpl_truncateDispatcher;
    moveNameToIndex: IMetadataBuilderImpl_moveNameToIndexDispatcher;
    remove: IMetadataBuilderImpl_removeDispatcher;
    addField: IMetadataBuilderImpl_addFieldDispatcher;
    getMetadata: IMetadataBuilderImpl_getMetadataDispatcher;
    setField: IMetadataBuilderImpl_setFieldDispatcher;
    setRelation: IMetadataBuilderImpl_setRelationDispatcher;
    setOwner: IMetadataBuilderImpl_setOwnerDispatcher;
    setAlias: IMetadataBuilderImpl_setAliasDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IMetadataBuilderImpl_vTable: TMetadataBuilderVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IMetadataBuilderImpl.AsIMetadataBuilder: IMetadataBuilder;
begin
  Result := IMetadataBuilder(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IMetadataBuilderImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IMetadataBuilderImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IMetadataBuilderImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IResultSetImpl_addRefDispatcher(this: IResultSet); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IResultSetImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_releaseDispatcher(this: IResultSet): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_fetchNextDispatcher(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).fetchNext(status, message);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).fetchNext(status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_fetchPriorDispatcher(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).fetchPrior(status, message);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).fetchPrior(status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_fetchFirstDispatcher(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).fetchFirst(status, message);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).fetchFirst(status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_fetchLastDispatcher(this: IResultSet; status: IStatus; message: Pointer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).fetchLast(status, message);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).fetchLast(status, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_fetchAbsoluteDispatcher(this: IResultSet; status: IStatus; position: Integer; message: Pointer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).fetchAbsolute(status, position, message);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).fetchAbsolute(status, position, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_fetchRelativeDispatcher(this: IResultSet; status: IStatus; offset: Integer; message: Pointer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).fetchRelative(status, offset, message);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).fetchRelative(status, offset, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_isEofDispatcher(this: IResultSet; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).isEof(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).isEof(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_isBofDispatcher(this: IResultSet; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).isBof(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).isBof(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IResultSetImpl_getMetadataDispatcher(this: IResultSet; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).getMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IResultSetImpl(this).getMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IResultSetImpl_deprecatedCloseDispatcher(this: IResultSet; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedClose(status);
{$ELSE !WITH_RECORD_METHODS}
  IResultSetImpl(this).deprecatedClose(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IResultSetImpl_setDelayedOutputFormatDispatcher(this: IResultSet; status: IStatus; format: IMessageMetadata); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).setDelayedOutputFormat(status, format);
{$ELSE !WITH_RECORD_METHODS}
  IResultSetImpl(this).setDelayedOutputFormat(status, format);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IResultSetImpl_closeDispatcher(this: IResultSet; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).close(status);
{$ELSE !WITH_RECORD_METHODS}
  IResultSetImpl(this).close(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IResultSetImpl_getInfoDispatcher(this: IResultSet; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IResultSetImpl(this.ReferenceCounted.Versioned.SelfObject).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IResultSetImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IResultSetImpl_vTable: TResultSetVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIResultSet_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    fetchNext: IResultSetImpl_fetchNextDispatcher;
    fetchPrior: IResultSetImpl_fetchPriorDispatcher;
    fetchFirst: IResultSetImpl_fetchFirstDispatcher;
    fetchLast: IResultSetImpl_fetchLastDispatcher;
    fetchAbsolute: IResultSetImpl_fetchAbsoluteDispatcher;
    fetchRelative: IResultSetImpl_fetchRelativeDispatcher;
    isEof: IResultSetImpl_isEofDispatcher;
    isBof: IResultSetImpl_isBofDispatcher;
    getMetadata: IResultSetImpl_getMetadataDispatcher;
    deprecatedClose: IResultSetImpl_deprecatedCloseDispatcher;
    setDelayedOutputFormat: IResultSetImpl_setDelayedOutputFormatDispatcher;
    close: IResultSetImpl_closeDispatcher;
    getInfo: IResultSetImpl_getInfoDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IResultSetImpl_vTable: TResultSetVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IResultSetImpl.AsIResultSet: IResultSet;
begin
  Result := IResultSet(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IResultSetImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IResultSetImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IResultSetImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatementImpl_addRefDispatcher(this: IStatement); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IStatementImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_releaseDispatcher(this: IStatement): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatementImpl_getInfoDispatcher(this: IStatement; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IStatementImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_getTypeDispatcher(this: IStatement; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getType(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).getType(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_getPlanDispatcher(this: IStatement; status: IStatus; detailed: Boolean): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getPlan(status, detailed);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).getPlan(status, detailed);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_getAffectedRecordsDispatcher(this: IStatement; status: IStatus): UInt64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getAffectedRecords(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).getAffectedRecords(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_getInputMetadataDispatcher(this: IStatement; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getInputMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).getInputMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_getOutputMetadataDispatcher(this: IStatement; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getOutputMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).getOutputMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_executeDispatcher(this: IStatement; status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).execute(status, transaction, inMetadata, inBuffer, outMetadata, outBuffer);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).execute(status, transaction, inMetadata, inBuffer, outMetadata, outBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_openCursorDispatcher(this: IStatement; status: IStatus; transaction: ITransaction; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; flags: Cardinal): IResultSet; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).openCursor(status, transaction, inMetadata, inBuffer, outMetadata, flags);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).openCursor(status, transaction, inMetadata, inBuffer, outMetadata, flags);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatementImpl_setCursorNameDispatcher(this: IStatement; status: IStatus; name: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).setCursorName(status, name);
{$ELSE !WITH_RECORD_METHODS}
  IStatementImpl(this).setCursorName(status, name);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatementImpl_deprecatedFreeDispatcher(this: IStatement; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedFree(status);
{$ELSE !WITH_RECORD_METHODS}
  IStatementImpl(this).deprecatedFree(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_getFlagsDispatcher(this: IStatement; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getFlags(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).getFlags(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_getTimeoutDispatcher(this: IStatement; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).getTimeout(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).getTimeout(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatementImpl_setTimeoutDispatcher(this: IStatement; status: IStatus; timeOut: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).setTimeout(status, timeOut);
{$ELSE !WITH_RECORD_METHODS}
  IStatementImpl(this).setTimeout(status, timeOut);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IStatementImpl_createBatchDispatcher(this: IStatement; status: IStatus; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).createBatch(status, inMetadata, parLength, par);
{$ELSE !WITH_RECORD_METHODS}
  Result := IStatementImpl(this).createBatch(status, inMetadata, parLength, par);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IStatementImpl_freeDispatcher(this: IStatement; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IStatementImpl(this.ReferenceCounted.Versioned.SelfObject).free(status);
{$ELSE !WITH_RECORD_METHODS}
  IStatementImpl(this).free(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IStatementImpl_vTable: TStatementVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIStatement_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getInfo: IStatementImpl_getInfoDispatcher;
    getType: IStatementImpl_getTypeDispatcher;
    getPlan: IStatementImpl_getPlanDispatcher;
    getAffectedRecords: IStatementImpl_getAffectedRecordsDispatcher;
    getInputMetadata: IStatementImpl_getInputMetadataDispatcher;
    getOutputMetadata: IStatementImpl_getOutputMetadataDispatcher;
    execute: IStatementImpl_executeDispatcher;
    openCursor: IStatementImpl_openCursorDispatcher;
    setCursorName: IStatementImpl_setCursorNameDispatcher;
    deprecatedFree: IStatementImpl_deprecatedFreeDispatcher;
    getFlags: IStatementImpl_getFlagsDispatcher;
    getTimeout: IStatementImpl_getTimeoutDispatcher;
    setTimeout: IStatementImpl_setTimeoutDispatcher;
    createBatch: IStatementImpl_createBatchDispatcher;
    free: IStatementImpl_freeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IStatementImpl_vTable: TStatementVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IStatementImpl.AsIStatement: IStatement;
begin
  Result := IStatement(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IStatementImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IStatementImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IStatementImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_addRefDispatcher(this: IBatch); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBatchImpl_releaseDispatcher(this: IBatch): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IBatchImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_addDispatcher(this: IBatch; status: IStatus; count: Cardinal; inBuffer: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).add(status, count, inBuffer);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).add(status, count, inBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_addBlobDispatcher(this: IBatch; status: IStatus; length: Cardinal; inBuffer: Pointer; blobId: PISC_QUAD; parLength: Cardinal; par: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).addBlob(status, length, inBuffer, blobId, parLength, par);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).addBlob(status, length, inBuffer, blobId, parLength, par);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_appendBlobDataDispatcher(this: IBatch; status: IStatus; length: Cardinal; inBuffer: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).appendBlobData(status, length, inBuffer);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).appendBlobData(status, length, inBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_addBlobStreamDispatcher(this: IBatch; status: IStatus; length: Cardinal; inBuffer: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).addBlobStream(status, length, inBuffer);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).addBlobStream(status, length, inBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_registerBlobDispatcher(this: IBatch; status: IStatus; existingBlob: PISC_QUAD; blobId: PISC_QUAD); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).registerBlob(status, existingBlob, blobId);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).registerBlob(status, existingBlob, blobId);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBatchImpl_executeDispatcher(this: IBatch; status: IStatus; transaction: ITransaction): IBatchCompletionState; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).execute(status, transaction);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBatchImpl(this).execute(status, transaction);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_cancelDispatcher(this: IBatch; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).cancel(status);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).cancel(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBatchImpl_getBlobAlignmentDispatcher(this: IBatch; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).getBlobAlignment(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBatchImpl(this).getBlobAlignment(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBatchImpl_getMetadataDispatcher(this: IBatch; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).getMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBatchImpl(this).getMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_setDefaultBpbDispatcher(this: IBatch; status: IStatus; parLength: Cardinal; par: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).setDefaultBpb(status, parLength, par);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).setDefaultBpb(status, parLength, par);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_deprecatedCloseDispatcher(this: IBatch; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedClose(status);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).deprecatedClose(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_closeDispatcher(this: IBatch; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).close(status);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).close(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchImpl_getInfoDispatcher(this: IBatch; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl(this.ReferenceCounted.Versioned.SelfObject).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IBatchImpl_vTable: TBatchVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIBatch_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    add: IBatchImpl_addDispatcher;
    addBlob: IBatchImpl_addBlobDispatcher;
    appendBlobData: IBatchImpl_appendBlobDataDispatcher;
    addBlobStream: IBatchImpl_addBlobStreamDispatcher;
    registerBlob: IBatchImpl_registerBlobDispatcher;
    execute: IBatchImpl_executeDispatcher;
    cancel: IBatchImpl_cancelDispatcher;
    getBlobAlignment: IBatchImpl_getBlobAlignmentDispatcher;
    getMetadata: IBatchImpl_getMetadataDispatcher;
    setDefaultBpb: IBatchImpl_setDefaultBpbDispatcher;
    deprecatedClose: IBatchImpl_deprecatedCloseDispatcher;
    close: IBatchImpl_closeDispatcher;
    getInfo: IBatchImpl_getInfoDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IBatchImpl_vTable: TBatchVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IBatchImpl.AsIBatch: IBatch;
begin
  Result := IBatch(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IBatchImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IBatchImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IBatchImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchCompletionStateImpl_disposeDispatcher(this: IBatchCompletionState); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchCompletionStateImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IBatchCompletionStateImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBatchCompletionStateImpl_getSizeDispatcher(this: IBatchCompletionState; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBatchCompletionStateImpl(this.Disposable.Versioned.SelfObject).getSize(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBatchCompletionStateImpl(this).getSize(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBatchCompletionStateImpl_getStateDispatcher(this: IBatchCompletionState; status: IStatus; pos: Cardinal): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBatchCompletionStateImpl(this.Disposable.Versioned.SelfObject).getState(status, pos);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBatchCompletionStateImpl(this).getState(status, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IBatchCompletionStateImpl_findErrorDispatcher(this: IBatchCompletionState; status: IStatus; pos: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IBatchCompletionStateImpl(this.Disposable.Versioned.SelfObject).findError(status, pos);
{$ELSE !WITH_RECORD_METHODS}
  Result := IBatchCompletionStateImpl(this).findError(status, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IBatchCompletionStateImpl_getStatusDispatcher(this: IBatchCompletionState; status: IStatus; to_: IStatus; pos: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IBatchCompletionStateImpl(this.Disposable.Versioned.SelfObject).getStatus(status, to_, pos);
{$ELSE !WITH_RECORD_METHODS}
  IBatchCompletionStateImpl(this).getStatus(status, to_, pos);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IBatchCompletionStateImpl_vTable: TBatchCompletionStateVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIBatchCompletionState_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    getSize: IBatchCompletionStateImpl_getSizeDispatcher;
    getState: IBatchCompletionStateImpl_getStateDispatcher;
    findError: IBatchCompletionStateImpl_findErrorDispatcher;
    getStatus: IBatchCompletionStateImpl_getStatusDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IBatchCompletionStateImpl_vTable: TBatchCompletionStateVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IBatchCompletionStateImpl.AsIBatchCompletionState: IBatchCompletionState;
begin
  Result := IBatchCompletionState(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IBatchCompletionStateImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IBatchCompletionStateImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IBatchCompletionStateImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatorImpl_addRefDispatcher(this: IReplicator); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatorImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IReplicatorImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatorImpl_releaseDispatcher(this: IReplicator): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatorImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatorImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatorImpl_processDispatcher(this: IReplicator; status: IStatus; length: Cardinal; data: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatorImpl(this.ReferenceCounted.Versioned.SelfObject).process(status, length, data);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatorImpl(this).process(status, length, data);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatorImpl_deprecatedCloseDispatcher(this: IReplicator; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatorImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedClose(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatorImpl(this).deprecatedClose(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatorImpl_closeDispatcher(this: IReplicator; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatorImpl(this.ReferenceCounted.Versioned.SelfObject).close(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatorImpl(this).close(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IReplicatorImpl_vTable: TReplicatorVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIReplicator_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    process: IReplicatorImpl_processDispatcher;
    deprecatedClose: IReplicatorImpl_deprecatedCloseDispatcher;
    close: IReplicatorImpl_closeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatorImpl_vTable: TReplicatorVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IReplicatorImpl.AsIReplicator: IReplicator;
begin
  Result := IReplicator(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IReplicatorImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IReplicatorImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IReplicatorImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_addRefDispatcher(this: IRequest); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRequestImpl_releaseDispatcher(this: IRequest): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IRequestImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_receiveDispatcher(this: IRequest; status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).receive(status, level, msgType, length, message);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).receive(status, level, msgType, length, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_sendDispatcher(this: IRequest; status: IStatus; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).send(status, level, msgType, length, message);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).send(status, level, msgType, length, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_getInfoDispatcher(this: IRequest; status: IStatus; level: Integer; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).getInfo(status, level, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).getInfo(status, level, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_startDispatcher(this: IRequest; status: IStatus; tra: ITransaction; level: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).start(status, tra, level);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).start(status, tra, level);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_startAndSendDispatcher(this: IRequest; status: IStatus; tra: ITransaction; level: Integer; msgType: Cardinal; length: Cardinal; message: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).startAndSend(status, tra, level, msgType, length, message);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).startAndSend(status, tra, level, msgType, length, message);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_unwindDispatcher(this: IRequest; status: IStatus; level: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).unwind(status, level);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).unwind(status, level);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_deprecatedFreeDispatcher(this: IRequest; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedFree(status);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).deprecatedFree(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IRequestImpl_freeDispatcher(this: IRequest; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl(this.ReferenceCounted.Versioned.SelfObject).free(status);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl(this).free(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IRequestImpl_vTable: TRequestVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIRequest_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    receive: IRequestImpl_receiveDispatcher;
    send: IRequestImpl_sendDispatcher;
    getInfo: IRequestImpl_getInfoDispatcher;
    start: IRequestImpl_startDispatcher;
    startAndSend: IRequestImpl_startAndSendDispatcher;
    unwind: IRequestImpl_unwindDispatcher;
    deprecatedFree: IRequestImpl_deprecatedFreeDispatcher;
    free: IRequestImpl_freeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IRequestImpl_vTable: TRequestVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IRequestImpl.AsIRequest: IRequest;
begin
  Result := IRequest(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IRequestImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IRequestImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IRequestImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IEventsImpl_addRefDispatcher(this: IEvents); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IEventsImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IEventsImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IEventsImpl_releaseDispatcher(this: IEvents): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IEventsImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IEventsImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IEventsImpl_deprecatedCancelDispatcher(this: IEvents; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IEventsImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedCancel(status);
{$ELSE !WITH_RECORD_METHODS}
  IEventsImpl(this).deprecatedCancel(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IEventsImpl_cancelDispatcher(this: IEvents; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IEventsImpl(this.ReferenceCounted.Versioned.SelfObject).cancel(status);
{$ELSE !WITH_RECORD_METHODS}
  IEventsImpl(this).cancel(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IEventsImpl_vTable: TEventsVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIEvents_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    deprecatedCancel: IEventsImpl_deprecatedCancelDispatcher;
    cancel: IEventsImpl_cancelDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IEventsImpl_vTable: TEventsVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IEventsImpl.AsIEvents: IEvents;
begin
  Result := IEvents(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IEventsImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IEventsImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IEventsImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_addRefDispatcher(this: IAttachment); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_releaseDispatcher(this: IAttachment): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_getInfoDispatcher(this: IAttachment; status: IStatus; itemsLength: Cardinal; items: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_startTransactionDispatcher(this: IAttachment; status: IStatus; tpbLength: Cardinal; tpb: PByte): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).startTransaction(status, tpbLength, tpb);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).startTransaction(status, tpbLength, tpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_reconnectTransactionDispatcher(this: IAttachment; status: IStatus; length: Cardinal; id: PByte): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).reconnectTransaction(status, length, id);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).reconnectTransaction(status, length, id);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_compileRequestDispatcher(this: IAttachment; status: IStatus; blrLength: Cardinal; blr: PByte): IRequest; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).compileRequest(status, blrLength, blr);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).compileRequest(status, blrLength, blr);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_transactRequestDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; blrLength: Cardinal; blr: PByte; inMsgLength: Cardinal; inMsg: PByte; outMsgLength: Cardinal; outMsg: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).transactRequest(status, transaction, blrLength, blr, inMsgLength, inMsg, outMsgLength, outMsg);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).transactRequest(status, transaction, blrLength, blr, inMsgLength, inMsg, outMsgLength, outMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_createBlobDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).createBlob(status, transaction, id, bpbLength, bpb);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).createBlob(status, transaction, id, bpbLength, bpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_openBlobDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; bpbLength: Cardinal; bpb: PByte): IBlob; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).openBlob(status, transaction, id, bpbLength, bpb);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).openBlob(status, transaction, id, bpbLength, bpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_getSliceDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).getSlice(status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).getSlice(status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_putSliceDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; id: PISC_QUAD; sdlLength: Cardinal; sdl: PByte; paramLength: Cardinal; param: PByte; sliceLength: Integer; slice: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).putSlice(status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).putSlice(status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_executeDynDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; length: Cardinal; dyn: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).executeDyn(status, transaction, length, dyn);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).executeDyn(status, transaction, length, dyn);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_prepareDispatcher(this: IAttachment; status: IStatus; tra: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): IStatement; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).prepare(status, tra, stmtLength, sqlStmt, dialect, flags);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).prepare(status, tra, stmtLength, sqlStmt, dialect, flags);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_executeDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; outBuffer: Pointer): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).execute(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, outBuffer);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).execute(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, outBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_openCursorDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; inBuffer: Pointer; outMetadata: IMessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): IResultSet; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).openCursor(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, cursorName, cursorFlags);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).openCursor(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, cursorName, cursorFlags);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_queEventsDispatcher(this: IAttachment; status: IStatus; callback: IEventCallback; length: Cardinal; events: PByte): IEvents; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).queEvents(status, callback, length, events);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).queEvents(status, callback, length, events);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_cancelOperationDispatcher(this: IAttachment; status: IStatus; option: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).cancelOperation(status, option);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).cancelOperation(status, option);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_pingDispatcher(this: IAttachment; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).ping(status);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).ping(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_deprecatedDetachDispatcher(this: IAttachment; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedDetach(status);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).deprecatedDetach(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_deprecatedDropDatabaseDispatcher(this: IAttachment; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedDropDatabase(status);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).deprecatedDropDatabase(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_getIdleTimeoutDispatcher(this: IAttachment; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).getIdleTimeout(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).getIdleTimeout(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_setIdleTimeoutDispatcher(this: IAttachment; status: IStatus; timeOut: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).setIdleTimeout(status, timeOut);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).setIdleTimeout(status, timeOut);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_getStatementTimeoutDispatcher(this: IAttachment; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).getStatementTimeout(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).getStatementTimeout(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_setStatementTimeoutDispatcher(this: IAttachment; status: IStatus; timeOut: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).setStatementTimeout(status, timeOut);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).setStatementTimeout(status, timeOut);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_createBatchDispatcher(this: IAttachment; status: IStatus; transaction: ITransaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: IMessageMetadata; parLength: Cardinal; par: PByte): IBatch; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).createBatch(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, parLength, par);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).createBatch(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, parLength, par);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAttachmentImpl_createReplicatorDispatcher(this: IAttachment; status: IStatus): IReplicator; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).createReplicator(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAttachmentImpl(this).createReplicator(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_detachDispatcher(this: IAttachment; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).detach(status);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).detach(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAttachmentImpl_dropDatabaseDispatcher(this: IAttachment; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl(this.ReferenceCounted.Versioned.SelfObject).dropDatabase(status);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl(this).dropDatabase(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IAttachmentImpl_vTable: TAttachmentVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIAttachment_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getInfo: IAttachmentImpl_getInfoDispatcher;
    startTransaction: IAttachmentImpl_startTransactionDispatcher;
    reconnectTransaction: IAttachmentImpl_reconnectTransactionDispatcher;
    compileRequest: IAttachmentImpl_compileRequestDispatcher;
    transactRequest: IAttachmentImpl_transactRequestDispatcher;
    createBlob: IAttachmentImpl_createBlobDispatcher;
    openBlob: IAttachmentImpl_openBlobDispatcher;
    getSlice: IAttachmentImpl_getSliceDispatcher;
    putSlice: IAttachmentImpl_putSliceDispatcher;
    executeDyn: IAttachmentImpl_executeDynDispatcher;
    prepare: IAttachmentImpl_prepareDispatcher;
    execute: IAttachmentImpl_executeDispatcher;
    openCursor: IAttachmentImpl_openCursorDispatcher;
    queEvents: IAttachmentImpl_queEventsDispatcher;
    cancelOperation: IAttachmentImpl_cancelOperationDispatcher;
    ping: IAttachmentImpl_pingDispatcher;
    deprecatedDetach: IAttachmentImpl_deprecatedDetachDispatcher;
    deprecatedDropDatabase: IAttachmentImpl_deprecatedDropDatabaseDispatcher;
    getIdleTimeout: IAttachmentImpl_getIdleTimeoutDispatcher;
    setIdleTimeout: IAttachmentImpl_setIdleTimeoutDispatcher;
    getStatementTimeout: IAttachmentImpl_getStatementTimeoutDispatcher;
    setStatementTimeout: IAttachmentImpl_setStatementTimeoutDispatcher;
    createBatch: IAttachmentImpl_createBatchDispatcher;
    createReplicator: IAttachmentImpl_createReplicatorDispatcher;
    detach: IAttachmentImpl_detachDispatcher;
    dropDatabase: IAttachmentImpl_dropDatabaseDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IAttachmentImpl_vTable: TAttachmentVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IAttachmentImpl.AsIAttachment: IAttachment;
begin
  Result := IAttachment(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IAttachmentImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IAttachmentImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IAttachmentImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServiceImpl_addRefDispatcher(this: IService); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServiceImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IServiceImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IServiceImpl_releaseDispatcher(this: IService): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IServiceImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IServiceImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServiceImpl_deprecatedDetachDispatcher(this: IService; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServiceImpl(this.ReferenceCounted.Versioned.SelfObject).deprecatedDetach(status);
{$ELSE !WITH_RECORD_METHODS}
  IServiceImpl(this).deprecatedDetach(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServiceImpl_queryDispatcher(this: IService; status: IStatus; sendLength: Cardinal; sendItems: PByte; receiveLength: Cardinal; receiveItems: PByte; bufferLength: Cardinal; buffer: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServiceImpl(this.ReferenceCounted.Versioned.SelfObject).query(status, sendLength, sendItems, receiveLength, receiveItems, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IServiceImpl(this).query(status, sendLength, sendItems, receiveLength, receiveItems, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServiceImpl_startDispatcher(this: IService; status: IStatus; spbLength: Cardinal; spb: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServiceImpl(this.ReferenceCounted.Versioned.SelfObject).start(status, spbLength, spb);
{$ELSE !WITH_RECORD_METHODS}
  IServiceImpl(this).start(status, spbLength, spb);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServiceImpl_detachDispatcher(this: IService; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServiceImpl(this.ReferenceCounted.Versioned.SelfObject).detach(status);
{$ELSE !WITH_RECORD_METHODS}
  IServiceImpl(this).detach(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServiceImpl_cancelDispatcher(this: IService; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServiceImpl(this.ReferenceCounted.Versioned.SelfObject).cancel(status);
{$ELSE !WITH_RECORD_METHODS}
  IServiceImpl(this).cancel(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IServiceImpl_vTable: TServiceVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIService_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    deprecatedDetach: IServiceImpl_deprecatedDetachDispatcher;
    query: IServiceImpl_queryDispatcher;
    start: IServiceImpl_startDispatcher;
    detach: IServiceImpl_detachDispatcher;
    cancel: IServiceImpl_cancelDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IServiceImpl_vTable: TServiceVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IServiceImpl.AsIService: IService;
begin
  Result := IService(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IServiceImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IServiceImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IServiceImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProviderImpl_addRefDispatcher(this: IProvider); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IProviderImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProviderImpl_releaseDispatcher(this: IProvider): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IProviderImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProviderImpl_setOwnerDispatcher(this: IProvider; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IProviderImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProviderImpl_getOwnerDispatcher(this: IProvider): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IProviderImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProviderImpl_attachDatabaseDispatcher(this: IProvider; status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).attachDatabase(status, fileName, dpbLength, dpb);
{$ELSE !WITH_RECORD_METHODS}
  Result := IProviderImpl(this).attachDatabase(status, fileName, dpbLength, dpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProviderImpl_createDatabaseDispatcher(this: IProvider; status: IStatus; fileName: PAnsiChar; dpbLength: Cardinal; dpb: PByte): IAttachment; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).createDatabase(status, fileName, dpbLength, dpb);
{$ELSE !WITH_RECORD_METHODS}
  Result := IProviderImpl(this).createDatabase(status, fileName, dpbLength, dpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProviderImpl_attachServiceManagerDispatcher(this: IProvider; status: IStatus; service: PAnsiChar; spbLength: Cardinal; spb: PByte): IService; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).attachServiceManager(status, service, spbLength, spb);
{$ELSE !WITH_RECORD_METHODS}
  Result := IProviderImpl(this).attachServiceManager(status, service, spbLength, spb);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProviderImpl_shutdownDispatcher(this: IProvider; status: IStatus; timeout: Cardinal; reason: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).shutdown(status, timeout, reason);
{$ELSE !WITH_RECORD_METHODS}
  IProviderImpl(this).shutdown(status, timeout, reason);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProviderImpl_setDbCryptCallbackDispatcher(this: IProvider; status: IStatus; cryptCallback: ICryptKeyCallback); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProviderImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setDbCryptCallback(status, cryptCallback);
{$ELSE !WITH_RECORD_METHODS}
  IProviderImpl(this).setDbCryptCallback(status, cryptCallback);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IProviderImpl_vTable: TProviderVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIProvider_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    attachDatabase: IProviderImpl_attachDatabaseDispatcher;
    createDatabase: IProviderImpl_createDatabaseDispatcher;
    attachServiceManager: IProviderImpl_attachServiceManagerDispatcher;
    shutdown: IProviderImpl_shutdownDispatcher;
    setDbCryptCallback: IProviderImpl_setDbCryptCallbackDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IProviderImpl_vTable: TProviderVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IProviderImpl.AsIProvider: IProvider;
begin
  Result := IProvider(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IProviderImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IProviderImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IProviderImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDtcStartImpl_disposeDispatcher(this: IDtcStart); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDtcStartImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IDtcStartImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDtcStartImpl_addAttachmentDispatcher(this: IDtcStart; status: IStatus; att: IAttachment); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDtcStartImpl(this.Disposable.Versioned.SelfObject).addAttachment(status, att);
{$ELSE !WITH_RECORD_METHODS}
  IDtcStartImpl(this).addAttachment(status, att);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDtcStartImpl_addWithTpbDispatcher(this: IDtcStart; status: IStatus; att: IAttachment; length: Cardinal; tpb: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDtcStartImpl(this.Disposable.Versioned.SelfObject).addWithTpb(status, att, length, tpb);
{$ELSE !WITH_RECORD_METHODS}
  IDtcStartImpl(this).addWithTpb(status, att, length, tpb);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IDtcStartImpl_startDispatcher(this: IDtcStart; status: IStatus): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IDtcStartImpl(this.Disposable.Versioned.SelfObject).start(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IDtcStartImpl(this).start(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IDtcStartImpl_vTable: TDtcStartVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIDtcStart_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    addAttachment: IDtcStartImpl_addAttachmentDispatcher;
    addWithTpb: IDtcStartImpl_addWithTpbDispatcher;
    start: IDtcStartImpl_startDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IDtcStartImpl_vTable: TDtcStartVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IDtcStartImpl.AsIDtcStart: IDtcStart;
begin
  Result := IDtcStart(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IDtcStartImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IDtcStartImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IDtcStartImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IDtcImpl_joinDispatcher(this: IDtc; status: IStatus; one: ITransaction; two: ITransaction): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IDtcImpl(this.Versioned.SelfObject).join(status, one, two);
{$ELSE !WITH_RECORD_METHODS}
  Result := IDtcImpl(this).join(status, one, two);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IDtcImpl_startBuilderDispatcher(this: IDtc; status: IStatus): IDtcStart; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IDtcImpl(this.Versioned.SelfObject).startBuilder(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IDtcImpl(this).startBuilder(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IDtcImpl_vTable: TDtcVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIDtc_VERSION);
    join: IDtcImpl_joinDispatcher;
    startBuilder: IDtcImpl_startBuilderDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IDtcImpl_vTable: TDtcVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IDtcImpl.AsIDtc: IDtc;
begin
  Result := IDtc(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IDtcImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IDtcImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IDtcImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAuthImpl_addRefDispatcher(this: IAuth); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAuthImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IAuthImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthImpl_releaseDispatcher(this: IAuth): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IAuthImpl_setOwnerDispatcher(this: IAuth; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IAuthImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IAuthImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthImpl_getOwnerDispatcher(this: IAuth): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IAuthImpl_vTable: TAuthVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIAuth_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher););
{$ELSE !WITH_RECORD_METHODS}
  IAuthImpl_vTable: TAuthVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IAuthImpl.AsIAuth: IAuth;
begin
  Result := IAuth(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IAuthImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IAuthImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IAuthImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWriterImpl_resetDispatcher(this: IWriter); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWriterImpl(this.Versioned.SelfObject).reset();
{$ELSE !WITH_RECORD_METHODS}
  IWriterImpl(this).reset();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWriterImpl_addDispatcher(this: IWriter; status: IStatus; name: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWriterImpl(this.Versioned.SelfObject).add(status, name);
{$ELSE !WITH_RECORD_METHODS}
  IWriterImpl(this).add(status, name);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWriterImpl_setTypeDispatcher(this: IWriter; status: IStatus; value: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWriterImpl(this.Versioned.SelfObject).setType(status, value);
{$ELSE !WITH_RECORD_METHODS}
  IWriterImpl(this).setType(status, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWriterImpl_setDbDispatcher(this: IWriter; status: IStatus; value: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWriterImpl(this.Versioned.SelfObject).setDb(status, value);
{$ELSE !WITH_RECORD_METHODS}
  IWriterImpl(this).setDb(status, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IWriterImpl_vTable: TWriterVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIWriter_VERSION);
    reset: IWriterImpl_resetDispatcher;
    add: IWriterImpl_addDispatcher;
    setType: IWriterImpl_setTypeDispatcher;
    setDb: IWriterImpl_setDbDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IWriterImpl_vTable: TWriterVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IWriterImpl.AsIWriter: IWriter;
begin
  Result := IWriter(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IWriterImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IWriterImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IWriterImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IServerBlockImpl_getLoginDispatcher(this: IServerBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IServerBlockImpl(this.Versioned.SelfObject).getLogin();
{$ELSE !WITH_RECORD_METHODS}
  Result := IServerBlockImpl(this).getLogin();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IServerBlockImpl_getDataDispatcher(this: IServerBlock; length: PCardinal): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IServerBlockImpl(this.Versioned.SelfObject).getData(length);
{$ELSE !WITH_RECORD_METHODS}
  Result := IServerBlockImpl(this).getData(length);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServerBlockImpl_putDataDispatcher(this: IServerBlock; status: IStatus; length: Cardinal; data: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServerBlockImpl(this.Versioned.SelfObject).putData(status, length, data);
{$ELSE !WITH_RECORD_METHODS}
  IServerBlockImpl(this).putData(status, length, data);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IServerBlockImpl_newKeyDispatcher(this: IServerBlock; status: IStatus): ICryptKey; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IServerBlockImpl(this.Versioned.SelfObject).newKey(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IServerBlockImpl(this).newKey(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IServerBlockImpl_vTable: TServerBlockVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIServerBlock_VERSION);
    getLogin: IServerBlockImpl_getLoginDispatcher;
    getData: IServerBlockImpl_getDataDispatcher;
    putData: IServerBlockImpl_putDataDispatcher;
    newKey: IServerBlockImpl_newKeyDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IServerBlockImpl_vTable: TServerBlockVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IServerBlockImpl.AsIServerBlock: IServerBlock;
begin
  Result := IServerBlock(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IServerBlockImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IServerBlockImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IServerBlockImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IClientBlockImpl_addRefDispatcher(this: IClientBlock); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IClientBlockImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientBlockImpl_releaseDispatcher(this: IClientBlock): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientBlockImpl_getLoginDispatcher(this: IClientBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).getLogin();
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this).getLogin();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientBlockImpl_getPasswordDispatcher(this: IClientBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).getPassword();
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this).getPassword();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientBlockImpl_getDataDispatcher(this: IClientBlock; length: PCardinal): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).getData(length);
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this).getData(length);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IClientBlockImpl_putDataDispatcher(this: IClientBlock; status: IStatus; length: Cardinal; data: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).putData(status, length, data);
{$ELSE !WITH_RECORD_METHODS}
  IClientBlockImpl(this).putData(status, length, data);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientBlockImpl_newKeyDispatcher(this: IClientBlock; status: IStatus): ICryptKey; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).newKey(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this).newKey(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientBlockImpl_getAuthBlockDispatcher(this: IClientBlock; status: IStatus): IAuthBlock; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this.ReferenceCounted.Versioned.SelfObject).getAuthBlock(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientBlockImpl(this).getAuthBlock(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IClientBlockImpl_vTable: TClientBlockVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIClientBlock_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getLogin: IClientBlockImpl_getLoginDispatcher;
    getPassword: IClientBlockImpl_getPasswordDispatcher;
    getData: IClientBlockImpl_getDataDispatcher;
    putData: IClientBlockImpl_putDataDispatcher;
    newKey: IClientBlockImpl_newKeyDispatcher;
    getAuthBlock: IClientBlockImpl_getAuthBlockDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IClientBlockImpl_vTable: TClientBlockVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IClientBlockImpl.AsIClientBlock: IClientBlock;
begin
  Result := IClientBlock(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IClientBlockImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IClientBlockImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IClientBlockImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServerImpl_addRefDispatcher(this: IServer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServerImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IServerImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IServerImpl_releaseDispatcher(this: IServer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IServerImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IServerImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServerImpl_setOwnerDispatcher(this: IServer; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServerImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IServerImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IServerImpl_getOwnerDispatcher(this: IServer): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IServerImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IServerImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IServerImpl_authenticateDispatcher(this: IServer; status: IStatus; sBlock: IServerBlock; writerInterface: IWriter): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IServerImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).authenticate(status, sBlock, writerInterface);
{$ELSE !WITH_RECORD_METHODS}
  Result := IServerImpl(this).authenticate(status, sBlock, writerInterface);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IServerImpl_setDbCryptCallbackDispatcher(this: IServer; status: IStatus; cryptCallback: ICryptKeyCallback); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IServerImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).setDbCryptCallback(status, cryptCallback);
{$ELSE !WITH_RECORD_METHODS}
  IServerImpl(this).setDbCryptCallback(status, cryptCallback);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IServerImpl_vTable: TServerVTable = (
    AuthVTable: (
      PluginBaseVTable: (
        ReferenceCountedVTable: (
          VersionedVTable: (
            SelfOffsetPtr: nil; version: cIServer_VERSION);
          addRef: IReferenceCountedImpl_addRefDispatcher;
          release: IReferenceCountedImpl_releaseDispatcher);
        setOwner: IPluginBaseImpl_setOwnerDispatcher;
        getOwner: IPluginBaseImpl_getOwnerDispatcher););
    authenticate: IServerImpl_authenticateDispatcher;
    setDbCryptCallback: IServerImpl_setDbCryptCallbackDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IServerImpl_vTable: TServerVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IServerImpl.AsIServer: IServer;
begin
  Result := IServer(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IServerImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IServerImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IServerImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IClientImpl_addRefDispatcher(this: IClient); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IClientImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IClientImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientImpl_releaseDispatcher(this: IClient): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IClientImpl_setOwnerDispatcher(this: IClient; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IClientImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IClientImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientImpl_getOwnerDispatcher(this: IClient): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IClientImpl_authenticateDispatcher(this: IClient; status: IStatus; cBlock: IClientBlock): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IClientImpl(this.Auth.PluginBase.ReferenceCounted.Versioned.SelfObject).authenticate(status, cBlock);
{$ELSE !WITH_RECORD_METHODS}
  Result := IClientImpl(this).authenticate(status, cBlock);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IClientImpl_vTable: TClientVTable = (
    AuthVTable: (
      PluginBaseVTable: (
        ReferenceCountedVTable: (
          VersionedVTable: (
            SelfOffsetPtr: nil; version: cIClient_VERSION);
          addRef: IReferenceCountedImpl_addRefDispatcher;
          release: IReferenceCountedImpl_releaseDispatcher);
        setOwner: IPluginBaseImpl_setOwnerDispatcher;
        getOwner: IPluginBaseImpl_getOwnerDispatcher););
    authenticate: IClientImpl_authenticateDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IClientImpl_vTable: TClientVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IClientImpl.AsIClient: IClient;
begin
  Result := IClient(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IClientImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IClientImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IClientImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserFieldImpl_enteredDispatcher(this: IUserField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserFieldImpl(this.Versioned.SelfObject).entered();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserFieldImpl(this).entered();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserFieldImpl_specifiedDispatcher(this: IUserField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserFieldImpl(this.Versioned.SelfObject).specified();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserFieldImpl(this).specified();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUserFieldImpl_setEnteredDispatcher(this: IUserField; status: IStatus; newValue: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUserFieldImpl(this.Versioned.SelfObject).setEntered(status, newValue);
{$ELSE !WITH_RECORD_METHODS}
  IUserFieldImpl(this).setEntered(status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IUserFieldImpl_vTable: TUserFieldVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIUserField_VERSION);
    entered: IUserFieldImpl_enteredDispatcher;
    specified: IUserFieldImpl_specifiedDispatcher;
    setEntered: IUserFieldImpl_setEnteredDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IUserFieldImpl_vTable: TUserFieldVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IUserFieldImpl.AsIUserField: IUserField;
begin
  Result := IUserField(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IUserFieldImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IUserFieldImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IUserFieldImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ICharUserFieldImpl_enteredDispatcher(this: ICharUserField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ICharUserFieldImpl(this.UserField.Versioned.SelfObject).entered();
{$ELSE !WITH_RECORD_METHODS}
  Result := ICharUserFieldImpl(this).entered();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ICharUserFieldImpl_specifiedDispatcher(this: ICharUserField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ICharUserFieldImpl(this.UserField.Versioned.SelfObject).specified();
{$ELSE !WITH_RECORD_METHODS}
  Result := ICharUserFieldImpl(this).specified();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ICharUserFieldImpl_setEnteredDispatcher(this: ICharUserField; status: IStatus; newValue: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ICharUserFieldImpl(this.UserField.Versioned.SelfObject).setEntered(status, newValue);
{$ELSE !WITH_RECORD_METHODS}
  ICharUserFieldImpl(this).setEntered(status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ICharUserFieldImpl_getDispatcher(this: ICharUserField): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ICharUserFieldImpl(this.UserField.Versioned.SelfObject).get();
{$ELSE !WITH_RECORD_METHODS}
  Result := ICharUserFieldImpl(this).get();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ICharUserFieldImpl_set_Dispatcher(this: ICharUserField; status: IStatus; newValue: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ICharUserFieldImpl(this.UserField.Versioned.SelfObject).set_(status, newValue);
{$ELSE !WITH_RECORD_METHODS}
  ICharUserFieldImpl(this).set_(status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ICharUserFieldImpl_vTable: TCharUserFieldVTable = (
    UserFieldVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cICharUserField_VERSION);
      entered: IUserFieldImpl_enteredDispatcher;
      specified: IUserFieldImpl_specifiedDispatcher;
      setEntered: IUserFieldImpl_setEnteredDispatcher);
    get: ICharUserFieldImpl_getDispatcher;
    set_: ICharUserFieldImpl_set_Dispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ICharUserFieldImpl_vTable: TCharUserFieldVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ICharUserFieldImpl.AsICharUserField: ICharUserField;
begin
  Result := ICharUserField(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ICharUserFieldImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ICharUserFieldImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ICharUserFieldImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IIntUserFieldImpl_enteredDispatcher(this: IIntUserField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IIntUserFieldImpl(this.UserField.Versioned.SelfObject).entered();
{$ELSE !WITH_RECORD_METHODS}
  Result := IIntUserFieldImpl(this).entered();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IIntUserFieldImpl_specifiedDispatcher(this: IIntUserField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IIntUserFieldImpl(this.UserField.Versioned.SelfObject).specified();
{$ELSE !WITH_RECORD_METHODS}
  Result := IIntUserFieldImpl(this).specified();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IIntUserFieldImpl_setEnteredDispatcher(this: IIntUserField; status: IStatus; newValue: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IIntUserFieldImpl(this.UserField.Versioned.SelfObject).setEntered(status, newValue);
{$ELSE !WITH_RECORD_METHODS}
  IIntUserFieldImpl(this).setEntered(status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IIntUserFieldImpl_getDispatcher(this: IIntUserField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IIntUserFieldImpl(this.UserField.Versioned.SelfObject).get();
{$ELSE !WITH_RECORD_METHODS}
  Result := IIntUserFieldImpl(this).get();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IIntUserFieldImpl_set_Dispatcher(this: IIntUserField; status: IStatus; newValue: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IIntUserFieldImpl(this.UserField.Versioned.SelfObject).set_(status, newValue);
{$ELSE !WITH_RECORD_METHODS}
  IIntUserFieldImpl(this).set_(status, newValue);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IIntUserFieldImpl_vTable: TIntUserFieldVTable = (
    UserFieldVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIIntUserField_VERSION);
      entered: IUserFieldImpl_enteredDispatcher;
      specified: IUserFieldImpl_specifiedDispatcher;
      setEntered: IUserFieldImpl_setEnteredDispatcher);
    get: IIntUserFieldImpl_getDispatcher;
    set_: IIntUserFieldImpl_set_Dispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IIntUserFieldImpl_vTable: TIntUserFieldVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IIntUserFieldImpl.AsIIntUserField: IIntUserField;
begin
  Result := IIntUserField(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IIntUserFieldImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IIntUserFieldImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IIntUserFieldImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_operationDispatcher(this: IUser): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).operation();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).operation();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_userNameDispatcher(this: IUser): ICharUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).userName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).userName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_passwordDispatcher(this: IUser): ICharUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).password();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).password();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_firstNameDispatcher(this: IUser): ICharUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).firstName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).firstName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_lastNameDispatcher(this: IUser): ICharUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).lastName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).lastName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_middleNameDispatcher(this: IUser): ICharUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).middleName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).middleName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_commentDispatcher(this: IUser): ICharUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).comment();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).comment();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_attributesDispatcher(this: IUser): ICharUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).attributes();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).attributes();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_activeDispatcher(this: IUser): IIntUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).active();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).active();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUserImpl_adminDispatcher(this: IUser): IIntUserField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUserImpl(this.Versioned.SelfObject).admin();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUserImpl(this).admin();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUserImpl_clearDispatcher(this: IUser; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUserImpl(this.Versioned.SelfObject).clear(status);
{$ELSE !WITH_RECORD_METHODS}
  IUserImpl(this).clear(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IUserImpl_vTable: TUserVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIUser_VERSION);
    operation: IUserImpl_operationDispatcher;
    userName: IUserImpl_userNameDispatcher;
    password: IUserImpl_passwordDispatcher;
    firstName: IUserImpl_firstNameDispatcher;
    lastName: IUserImpl_lastNameDispatcher;
    middleName: IUserImpl_middleNameDispatcher;
    comment: IUserImpl_commentDispatcher;
    attributes: IUserImpl_attributesDispatcher;
    active: IUserImpl_activeDispatcher;
    admin: IUserImpl_adminDispatcher;
    clear: IUserImpl_clearDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IUserImpl_vTable: TUserVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IUserImpl.AsIUser: IUser;
begin
  Result := IUser(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IUserImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IUserImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IUserImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IListUsersImpl_listDispatcher(this: IListUsers; status: IStatus; user: IUser); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IListUsersImpl(this.Versioned.SelfObject).list(status, user);
{$ELSE !WITH_RECORD_METHODS}
  IListUsersImpl(this).list(status, user);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IListUsersImpl_vTable: TListUsersVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIListUsers_VERSION);
    list: IListUsersImpl_listDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IListUsersImpl_vTable: TListUsersVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IListUsersImpl.AsIListUsers: IListUsers;
begin
  Result := IListUsers(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IListUsersImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IListUsersImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IListUsersImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ILogonInfoImpl_nameDispatcher(this: ILogonInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this.Versioned.SelfObject).name();
{$ELSE !WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this).name();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ILogonInfoImpl_roleDispatcher(this: ILogonInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this.Versioned.SelfObject).role();
{$ELSE !WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this).role();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ILogonInfoImpl_networkProtocolDispatcher(this: ILogonInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this.Versioned.SelfObject).networkProtocol();
{$ELSE !WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this).networkProtocol();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ILogonInfoImpl_remoteAddressDispatcher(this: ILogonInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this.Versioned.SelfObject).remoteAddress();
{$ELSE !WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this).remoteAddress();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ILogonInfoImpl_authBlockDispatcher(this: ILogonInfo; length: PCardinal): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this.Versioned.SelfObject).authBlock(length);
{$ELSE !WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this).authBlock(length);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ILogonInfoImpl_attachmentDispatcher(this: ILogonInfo; status: IStatus): IAttachment; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this.Versioned.SelfObject).attachment(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this).attachment(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ILogonInfoImpl_transactionDispatcher(this: ILogonInfo; status: IStatus): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this.Versioned.SelfObject).transaction(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := ILogonInfoImpl(this).transaction(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ILogonInfoImpl_vTable: TLogonInfoVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cILogonInfo_VERSION);
    name: ILogonInfoImpl_nameDispatcher;
    role: ILogonInfoImpl_roleDispatcher;
    networkProtocol: ILogonInfoImpl_networkProtocolDispatcher;
    remoteAddress: ILogonInfoImpl_remoteAddressDispatcher;
    authBlock: ILogonInfoImpl_authBlockDispatcher;
    attachment: ILogonInfoImpl_attachmentDispatcher;
    transaction: ILogonInfoImpl_transactionDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ILogonInfoImpl_vTable: TLogonInfoVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ILogonInfoImpl.AsILogonInfo: ILogonInfo;
begin
  Result := ILogonInfo(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ILogonInfoImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ILogonInfoImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ILogonInfoImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IManagementImpl_addRefDispatcher(this: IManagement); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IManagementImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IManagementImpl_releaseDispatcher(this: IManagement): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IManagementImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IManagementImpl_setOwnerDispatcher(this: IManagement; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IManagementImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IManagementImpl_getOwnerDispatcher(this: IManagement): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IManagementImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IManagementImpl_startDispatcher(this: IManagement; status: IStatus; logonInfo: ILogonInfo); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).start(status, logonInfo);
{$ELSE !WITH_RECORD_METHODS}
  IManagementImpl(this).start(status, logonInfo);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IManagementImpl_executeDispatcher(this: IManagement; status: IStatus; user: IUser; callback: IListUsers): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).execute(status, user, callback);
{$ELSE !WITH_RECORD_METHODS}
  Result := IManagementImpl(this).execute(status, user, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IManagementImpl_commitDispatcher(this: IManagement; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).commit(status);
{$ELSE !WITH_RECORD_METHODS}
  IManagementImpl(this).commit(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IManagementImpl_rollbackDispatcher(this: IManagement; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IManagementImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).rollback(status);
{$ELSE !WITH_RECORD_METHODS}
  IManagementImpl(this).rollback(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IManagementImpl_vTable: TManagementVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIManagement_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    start: IManagementImpl_startDispatcher;
    execute: IManagementImpl_executeDispatcher;
    commit: IManagementImpl_commitDispatcher;
    rollback: IManagementImpl_rollbackDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IManagementImpl_vTable: TManagementVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IManagementImpl.AsIManagement: IManagement;
begin
  Result := IManagement(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IManagementImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IManagementImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IManagementImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthBlockImpl_getTypeDispatcher(this: IAuthBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this.Versioned.SelfObject).getType();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this).getType();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthBlockImpl_getNameDispatcher(this: IAuthBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this.Versioned.SelfObject).getName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this).getName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthBlockImpl_getPluginDispatcher(this: IAuthBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this.Versioned.SelfObject).getPlugin();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this).getPlugin();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthBlockImpl_getSecurityDbDispatcher(this: IAuthBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this.Versioned.SelfObject).getSecurityDb();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this).getSecurityDb();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthBlockImpl_getOriginalPluginDispatcher(this: IAuthBlock): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this.Versioned.SelfObject).getOriginalPlugin();
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this).getOriginalPlugin();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthBlockImpl_nextDispatcher(this: IAuthBlock; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this.Versioned.SelfObject).next(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this).next(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IAuthBlockImpl_firstDispatcher(this: IAuthBlock; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this.Versioned.SelfObject).first(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IAuthBlockImpl(this).first(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IAuthBlockImpl_vTable: TAuthBlockVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIAuthBlock_VERSION);
    getType: IAuthBlockImpl_getTypeDispatcher;
    getName: IAuthBlockImpl_getNameDispatcher;
    getPlugin: IAuthBlockImpl_getPluginDispatcher;
    getSecurityDb: IAuthBlockImpl_getSecurityDbDispatcher;
    getOriginalPlugin: IAuthBlockImpl_getOriginalPluginDispatcher;
    next: IAuthBlockImpl_nextDispatcher;
    first: IAuthBlockImpl_firstDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IAuthBlockImpl_vTable: TAuthBlockVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IAuthBlockImpl.AsIAuthBlock: IAuthBlock;
begin
  Result := IAuthBlock(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IAuthBlockImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IAuthBlockImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IAuthBlockImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWireCryptPluginImpl_addRefDispatcher(this: IWireCryptPlugin); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IWireCryptPluginImpl_releaseDispatcher(this: IWireCryptPlugin): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWireCryptPluginImpl_setOwnerDispatcher(this: IWireCryptPlugin; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IWireCryptPluginImpl_getOwnerDispatcher(this: IWireCryptPlugin): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IWireCryptPluginImpl_getKnownTypesDispatcher(this: IWireCryptPlugin; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getKnownTypes(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this).getKnownTypes(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWireCryptPluginImpl_setKeyDispatcher(this: IWireCryptPlugin; status: IStatus; key: ICryptKey); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setKey(status, key);
{$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this).setKey(status, key);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWireCryptPluginImpl_encryptDispatcher(this: IWireCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).encrypt(status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this).encrypt(status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWireCryptPluginImpl_decryptDispatcher(this: IWireCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).decrypt(status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this).decrypt(status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IWireCryptPluginImpl_getSpecificDataDispatcher(this: IWireCryptPlugin; status: IStatus; keyType: PAnsiChar; length: PCardinal): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getSpecificData(status, keyType, length);
{$ELSE !WITH_RECORD_METHODS}
  Result := IWireCryptPluginImpl(this).getSpecificData(status, keyType, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IWireCryptPluginImpl_setSpecificDataDispatcher(this: IWireCryptPlugin; status: IStatus; keyType: PAnsiChar; length: Cardinal; data: PByte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setSpecificData(status, keyType, length, data);
{$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl(this).setSpecificData(status, keyType, length, data);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IWireCryptPluginImpl_vTable: TWireCryptPluginVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIWireCryptPlugin_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    getKnownTypes: IWireCryptPluginImpl_getKnownTypesDispatcher;
    setKey: IWireCryptPluginImpl_setKeyDispatcher;
    encrypt: IWireCryptPluginImpl_encryptDispatcher;
    decrypt: IWireCryptPluginImpl_decryptDispatcher;
    getSpecificData: IWireCryptPluginImpl_getSpecificDataDispatcher;
    setSpecificData: IWireCryptPluginImpl_setSpecificDataDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IWireCryptPluginImpl_vTable: TWireCryptPluginVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IWireCryptPluginImpl.AsIWireCryptPlugin: IWireCryptPlugin;
begin
  Result := IWireCryptPlugin(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IWireCryptPluginImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IWireCryptPluginImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IWireCryptPluginImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ICryptKeyCallbackImpl_callbackDispatcher(this: ICryptKeyCallback; dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ICryptKeyCallbackImpl(this.Versioned.SelfObject).callback(dataLength, data, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  Result := ICryptKeyCallbackImpl(this).callback(dataLength, data, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ICryptKeyCallbackImpl_vTable: TCryptKeyCallbackVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cICryptKeyCallback_VERSION);
    callback: ICryptKeyCallbackImpl_callbackDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ICryptKeyCallbackImpl_vTable: TCryptKeyCallbackVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ICryptKeyCallbackImpl.AsICryptKeyCallback: ICryptKeyCallback;
begin
  Result := ICryptKeyCallback(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ICryptKeyCallbackImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ICryptKeyCallbackImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ICryptKeyCallbackImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IKeyHolderPluginImpl_addRefDispatcher(this: IKeyHolderPlugin); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IKeyHolderPluginImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IKeyHolderPluginImpl_releaseDispatcher(this: IKeyHolderPlugin): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IKeyHolderPluginImpl_setOwnerDispatcher(this: IKeyHolderPlugin; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IKeyHolderPluginImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IKeyHolderPluginImpl_getOwnerDispatcher(this: IKeyHolderPlugin): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IKeyHolderPluginImpl_keyCallbackDispatcher(this: IKeyHolderPlugin; status: IStatus; callback: ICryptKeyCallback): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).keyCallback(status, callback);
{$ELSE !WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this).keyCallback(status, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IKeyHolderPluginImpl_keyHandleDispatcher(this: IKeyHolderPlugin; status: IStatus; keyName: PAnsiChar): ICryptKeyCallback; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).keyHandle(status, keyName);
{$ELSE !WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this).keyHandle(status, keyName);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IKeyHolderPluginImpl_useOnlyOwnKeysDispatcher(this: IKeyHolderPlugin; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).useOnlyOwnKeys(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this).useOnlyOwnKeys(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IKeyHolderPluginImpl_chainHandleDispatcher(this: IKeyHolderPlugin; status: IStatus): ICryptKeyCallback; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).chainHandle(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IKeyHolderPluginImpl(this).chainHandle(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IKeyHolderPluginImpl_vTable: TKeyHolderPluginVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIKeyHolderPlugin_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    keyCallback: IKeyHolderPluginImpl_keyCallbackDispatcher;
    keyHandle: IKeyHolderPluginImpl_keyHandleDispatcher;
    useOnlyOwnKeys: IKeyHolderPluginImpl_useOnlyOwnKeysDispatcher;
    chainHandle: IKeyHolderPluginImpl_chainHandleDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IKeyHolderPluginImpl_vTable: TKeyHolderPluginVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IKeyHolderPluginImpl.AsIKeyHolderPlugin: IKeyHolderPlugin;
begin
  Result := IKeyHolderPlugin(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IKeyHolderPluginImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IKeyHolderPluginImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IKeyHolderPluginImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDbCryptInfoImpl_addRefDispatcher(this: IDbCryptInfo); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptInfoImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptInfoImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IDbCryptInfoImpl_releaseDispatcher(this: IDbCryptInfo): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IDbCryptInfoImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IDbCryptInfoImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IDbCryptInfoImpl_getDatabaseFullPathDispatcher(this: IDbCryptInfo; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IDbCryptInfoImpl(this.ReferenceCounted.Versioned.SelfObject).getDatabaseFullPath(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IDbCryptInfoImpl(this).getDatabaseFullPath(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptInfoImpl_vTable: TDbCryptInfoVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIDbCryptInfo_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    getDatabaseFullPath: IDbCryptInfoImpl_getDatabaseFullPathDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptInfoImpl_vTable: TDbCryptInfoVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IDbCryptInfoImpl.AsIDbCryptInfo: IDbCryptInfo;
begin
  Result := IDbCryptInfo(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IDbCryptInfoImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IDbCryptInfoImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IDbCryptInfoImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDbCryptPluginImpl_addRefDispatcher(this: IDbCryptPlugin); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IDbCryptPluginImpl_releaseDispatcher(this: IDbCryptPlugin): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IDbCryptPluginImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDbCryptPluginImpl_setOwnerDispatcher(this: IDbCryptPlugin; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IDbCryptPluginImpl_getOwnerDispatcher(this: IDbCryptPlugin): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IDbCryptPluginImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDbCryptPluginImpl_setKeyDispatcher(this: IDbCryptPlugin; status: IStatus; length: Cardinal; sources: PIKeyHolderPlugin; keyName: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setKey(status, length, sources, keyName);
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this).setKey(status, length, sources, keyName);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDbCryptPluginImpl_encryptDispatcher(this: IDbCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).encrypt(status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this).encrypt(status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDbCryptPluginImpl_decryptDispatcher(this: IDbCryptPlugin; status: IStatus; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).decrypt(status, length, from, to_);
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this).decrypt(status, length, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDbCryptPluginImpl_setInfoDispatcher(this: IDbCryptPlugin; status: IStatus; info: IDbCryptInfo); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setInfo(status, info);
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl(this).setInfo(status, info);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IDbCryptPluginImpl_vTable: TDbCryptPluginVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIDbCryptPlugin_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    setKey: IDbCryptPluginImpl_setKeyDispatcher;
    encrypt: IDbCryptPluginImpl_encryptDispatcher;
    decrypt: IDbCryptPluginImpl_decryptDispatcher;
    setInfo: IDbCryptPluginImpl_setInfoDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IDbCryptPluginImpl_vTable: TDbCryptPluginVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IDbCryptPluginImpl.AsIDbCryptPlugin: IDbCryptPlugin;
begin
  Result := IDbCryptPlugin(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IDbCryptPluginImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IDbCryptPluginImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IDbCryptPluginImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getMasterDispatcher(this: IExternalContext): IMaster; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getMaster();
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getMaster();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getEngineDispatcher(this: IExternalContext; status: IStatus): IExternalEngine; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getEngine(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getEngine(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getAttachmentDispatcher(this: IExternalContext; status: IStatus): IAttachment; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getAttachment(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getAttachment(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getTransactionDispatcher(this: IExternalContext; status: IStatus): ITransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getTransaction(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getTransaction(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getUserNameDispatcher(this: IExternalContext): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getUserName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getUserName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getDatabaseNameDispatcher(this: IExternalContext): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getDatabaseName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getDatabaseName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getClientCharSetDispatcher(this: IExternalContext): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getClientCharSet();
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getClientCharSet();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_obtainInfoCodeDispatcher(this: IExternalContext): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).obtainInfoCode();
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).obtainInfoCode();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_getInfoDispatcher(this: IExternalContext; code: Integer): Pointer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).getInfo(code);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).getInfo(code);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalContextImpl_setInfoDispatcher(this: IExternalContext; code: Integer; value: Pointer): Pointer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this.Versioned.SelfObject).setInfo(code, value);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalContextImpl(this).setInfo(code, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IExternalContextImpl_vTable: TExternalContextVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIExternalContext_VERSION);
    getMaster: IExternalContextImpl_getMasterDispatcher;
    getEngine: IExternalContextImpl_getEngineDispatcher;
    getAttachment: IExternalContextImpl_getAttachmentDispatcher;
    getTransaction: IExternalContextImpl_getTransactionDispatcher;
    getUserName: IExternalContextImpl_getUserNameDispatcher;
    getDatabaseName: IExternalContextImpl_getDatabaseNameDispatcher;
    getClientCharSet: IExternalContextImpl_getClientCharSetDispatcher;
    obtainInfoCode: IExternalContextImpl_obtainInfoCodeDispatcher;
    getInfo: IExternalContextImpl_getInfoDispatcher;
    setInfo: IExternalContextImpl_setInfoDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IExternalContextImpl_vTable: TExternalContextVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IExternalContextImpl.AsIExternalContext: IExternalContext;
begin
  Result := IExternalContext(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IExternalContextImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IExternalContextImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IExternalContextImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalResultSetImpl_disposeDispatcher(this: IExternalResultSet); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalResultSetImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IExternalResultSetImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalResultSetImpl_fetchDispatcher(this: IExternalResultSet; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalResultSetImpl(this.Disposable.Versioned.SelfObject).fetch(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalResultSetImpl(this).fetch(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IExternalResultSetImpl_vTable: TExternalResultSetVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIExternalResultSet_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    fetch: IExternalResultSetImpl_fetchDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IExternalResultSetImpl_vTable: TExternalResultSetVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IExternalResultSetImpl.AsIExternalResultSet: IExternalResultSet;
begin
  Result := IExternalResultSet(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IExternalResultSetImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IExternalResultSetImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IExternalResultSetImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalFunctionImpl_disposeDispatcher(this: IExternalFunction); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalFunctionImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IExternalFunctionImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalFunctionImpl_getCharSetDispatcher(this: IExternalFunction; status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalFunctionImpl(this.Disposable.Versioned.SelfObject).getCharSet(status, context, name, nameSize);
{$ELSE !WITH_RECORD_METHODS}
  IExternalFunctionImpl(this).getCharSet(status, context, name, nameSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalFunctionImpl_executeDispatcher(this: IExternalFunction; status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalFunctionImpl(this.Disposable.Versioned.SelfObject).execute(status, context, inMsg, outMsg);
{$ELSE !WITH_RECORD_METHODS}
  IExternalFunctionImpl(this).execute(status, context, inMsg, outMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IExternalFunctionImpl_vTable: TExternalFunctionVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIExternalFunction_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    getCharSet: IExternalFunctionImpl_getCharSetDispatcher;
    execute: IExternalFunctionImpl_executeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IExternalFunctionImpl_vTable: TExternalFunctionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IExternalFunctionImpl.AsIExternalFunction: IExternalFunction;
begin
  Result := IExternalFunction(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IExternalFunctionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IExternalFunctionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IExternalFunctionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalProcedureImpl_disposeDispatcher(this: IExternalProcedure); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalProcedureImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IExternalProcedureImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalProcedureImpl_getCharSetDispatcher(this: IExternalProcedure; status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalProcedureImpl(this.Disposable.Versioned.SelfObject).getCharSet(status, context, name, nameSize);
{$ELSE !WITH_RECORD_METHODS}
  IExternalProcedureImpl(this).getCharSet(status, context, name, nameSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalProcedureImpl_openDispatcher(this: IExternalProcedure; status: IStatus; context: IExternalContext; inMsg: Pointer; outMsg: Pointer): IExternalResultSet; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalProcedureImpl(this.Disposable.Versioned.SelfObject).open(status, context, inMsg, outMsg);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalProcedureImpl(this).open(status, context, inMsg, outMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IExternalProcedureImpl_vTable: TExternalProcedureVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIExternalProcedure_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    getCharSet: IExternalProcedureImpl_getCharSetDispatcher;
    open: IExternalProcedureImpl_openDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IExternalProcedureImpl_vTable: TExternalProcedureVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IExternalProcedureImpl.AsIExternalProcedure: IExternalProcedure;
begin
  Result := IExternalProcedure(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IExternalProcedureImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IExternalProcedureImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IExternalProcedureImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalTriggerImpl_disposeDispatcher(this: IExternalTrigger); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalTriggerImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IExternalTriggerImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalTriggerImpl_getCharSetDispatcher(this: IExternalTrigger; status: IStatus; context: IExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalTriggerImpl(this.Disposable.Versioned.SelfObject).getCharSet(status, context, name, nameSize);
{$ELSE !WITH_RECORD_METHODS}
  IExternalTriggerImpl(this).getCharSet(status, context, name, nameSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalTriggerImpl_executeDispatcher(this: IExternalTrigger; status: IStatus; context: IExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalTriggerImpl(this.Disposable.Versioned.SelfObject).execute(status, context, action, oldMsg, newMsg);
{$ELSE !WITH_RECORD_METHODS}
  IExternalTriggerImpl(this).execute(status, context, action, oldMsg, newMsg);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IExternalTriggerImpl_vTable: TExternalTriggerVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIExternalTrigger_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    getCharSet: IExternalTriggerImpl_getCharSetDispatcher;
    execute: IExternalTriggerImpl_executeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IExternalTriggerImpl_vTable: TExternalTriggerVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IExternalTriggerImpl.AsIExternalTrigger: IExternalTrigger;
begin
  Result := IExternalTrigger(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IExternalTriggerImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IExternalTriggerImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IExternalTriggerImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getPackageDispatcher(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getPackage(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getPackage(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getNameDispatcher(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getName(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getName(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getEntryPointDispatcher(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getEntryPoint(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getEntryPoint(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getBodyDispatcher(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getBody(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getBody(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getInputMetadataDispatcher(this: IRoutineMetadata; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getInputMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getInputMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getOutputMetadataDispatcher(this: IRoutineMetadata; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getOutputMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getOutputMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getTriggerMetadataDispatcher(this: IRoutineMetadata; status: IStatus): IMessageMetadata; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getTriggerMetadata(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getTriggerMetadata(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getTriggerTableDispatcher(this: IRoutineMetadata; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getTriggerTable(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getTriggerTable(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IRoutineMetadataImpl_getTriggerTypeDispatcher(this: IRoutineMetadata; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this.Versioned.SelfObject).getTriggerType(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IRoutineMetadataImpl(this).getTriggerType(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IRoutineMetadataImpl_vTable: TRoutineMetadataVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIRoutineMetadata_VERSION);
    getPackage: IRoutineMetadataImpl_getPackageDispatcher;
    getName: IRoutineMetadataImpl_getNameDispatcher;
    getEntryPoint: IRoutineMetadataImpl_getEntryPointDispatcher;
    getBody: IRoutineMetadataImpl_getBodyDispatcher;
    getInputMetadata: IRoutineMetadataImpl_getInputMetadataDispatcher;
    getOutputMetadata: IRoutineMetadataImpl_getOutputMetadataDispatcher;
    getTriggerMetadata: IRoutineMetadataImpl_getTriggerMetadataDispatcher;
    getTriggerTable: IRoutineMetadataImpl_getTriggerTableDispatcher;
    getTriggerType: IRoutineMetadataImpl_getTriggerTypeDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IRoutineMetadataImpl_vTable: TRoutineMetadataVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IRoutineMetadataImpl.AsIRoutineMetadata: IRoutineMetadata;
begin
  Result := IRoutineMetadata(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IRoutineMetadataImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IRoutineMetadataImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IRoutineMetadataImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalEngineImpl_addRefDispatcher(this: IExternalEngine); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IExternalEngineImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalEngineImpl_releaseDispatcher(this: IExternalEngine): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalEngineImpl_setOwnerDispatcher(this: IExternalEngine; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IExternalEngineImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalEngineImpl_getOwnerDispatcher(this: IExternalEngine): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalEngineImpl_openDispatcher(this: IExternalEngine; status: IStatus; context: IExternalContext; charSet: PAnsiChar; charSetSize: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).open(status, context, charSet, charSetSize);
{$ELSE !WITH_RECORD_METHODS}
  IExternalEngineImpl(this).open(status, context, charSet, charSetSize);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalEngineImpl_openAttachmentDispatcher(this: IExternalEngine; status: IStatus; context: IExternalContext); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).openAttachment(status, context);
{$ELSE !WITH_RECORD_METHODS}
  IExternalEngineImpl(this).openAttachment(status, context);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IExternalEngineImpl_closeAttachmentDispatcher(this: IExternalEngine; status: IStatus; context: IExternalContext); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).closeAttachment(status, context);
{$ELSE !WITH_RECORD_METHODS}
  IExternalEngineImpl(this).closeAttachment(status, context);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalEngineImpl_makeFunctionDispatcher(this: IExternalEngine; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalFunction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).makeFunction(status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this).makeFunction(status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalEngineImpl_makeProcedureDispatcher(this: IExternalEngine; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder): IExternalProcedure; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).makeProcedure(status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this).makeProcedure(status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IExternalEngineImpl_makeTriggerDispatcher(this: IExternalEngine; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder): IExternalTrigger; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).makeTrigger(status, context, metadata, fieldsBuilder);
{$ELSE !WITH_RECORD_METHODS}
  Result := IExternalEngineImpl(this).makeTrigger(status, context, metadata, fieldsBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IExternalEngineImpl_vTable: TExternalEngineVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIExternalEngine_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    open: IExternalEngineImpl_openDispatcher;
    openAttachment: IExternalEngineImpl_openAttachmentDispatcher;
    closeAttachment: IExternalEngineImpl_closeAttachmentDispatcher;
    makeFunction: IExternalEngineImpl_makeFunctionDispatcher;
    makeProcedure: IExternalEngineImpl_makeProcedureDispatcher;
    makeTrigger: IExternalEngineImpl_makeTriggerDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IExternalEngineImpl_vTable: TExternalEngineVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IExternalEngineImpl.AsIExternalEngine: IExternalEngine;
begin
  Result := IExternalEngine(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IExternalEngineImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IExternalEngineImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IExternalEngineImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITimerImpl_addRefDispatcher(this: ITimer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITimerImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  ITimerImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITimerImpl_releaseDispatcher(this: ITimer): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITimerImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITimerImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITimerImpl_handlerDispatcher(this: ITimer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITimerImpl(this.ReferenceCounted.Versioned.SelfObject).handler();
{$ELSE !WITH_RECORD_METHODS}
  ITimerImpl(this).handler();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITimerImpl_vTable: TTimerVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITimer_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    handler: ITimerImpl_handlerDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITimerImpl_vTable: TTimerVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITimerImpl.AsITimer: ITimer;
begin
  Result := ITimer(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITimerImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITimerImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITimerImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITimerControlImpl_startDispatcher(this: ITimerControl; status: IStatus; timer: ITimer; microSeconds: UInt64); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITimerControlImpl(this.Versioned.SelfObject).start(status, timer, microSeconds);
{$ELSE !WITH_RECORD_METHODS}
  ITimerControlImpl(this).start(status, timer, microSeconds);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITimerControlImpl_stopDispatcher(this: ITimerControl; status: IStatus; timer: ITimer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITimerControlImpl(this.Versioned.SelfObject).stop(status, timer);
{$ELSE !WITH_RECORD_METHODS}
  ITimerControlImpl(this).stop(status, timer);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITimerControlImpl_vTable: TTimerControlVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITimerControl_VERSION);
    start: ITimerControlImpl_startDispatcher;
    stop: ITimerControlImpl_stopDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITimerControlImpl_vTable: TTimerControlVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITimerControlImpl.AsITimerControl: ITimerControl;
begin
  Result := ITimerControl(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITimerControlImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITimerControlImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITimerControlImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IVersionCallbackImpl_callbackDispatcher(this: IVersionCallback; status: IStatus; text: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IVersionCallbackImpl(this.Versioned.SelfObject).callback(status, text);
{$ELSE !WITH_RECORD_METHODS}
  IVersionCallbackImpl(this).callback(status, text);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IVersionCallbackImpl_vTable: TVersionCallbackVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIVersionCallback_VERSION);
    callback: IVersionCallbackImpl_callbackDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IVersionCallbackImpl_vTable: TVersionCallbackVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IVersionCallbackImpl.AsIVersionCallback: IVersionCallback;
begin
  Result := IVersionCallback(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IVersionCallbackImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IVersionCallbackImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IVersionCallbackImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_getFbVersionDispatcher(this: IUtil; status: IStatus; att: IAttachment; callback: IVersionCallback); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).getFbVersion(status, att, callback);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).getFbVersion(status, att, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_loadBlobDispatcher(this: IUtil; status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).loadBlob(status, blobId, att, tra, file_, txt);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).loadBlob(status, blobId, att, tra, file_, txt);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_dumpBlobDispatcher(this: IUtil; status: IStatus; blobId: PISC_QUAD; att: IAttachment; tra: ITransaction; file_: PAnsiChar; txt: Boolean); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).dumpBlob(status, blobId, att, tra, file_, txt);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).dumpBlob(status, blobId, att, tra, file_, txt);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_getPerfCountersDispatcher(this: IUtil; status: IStatus; att: IAttachment; countersSet: PAnsiChar; counters: PInt64); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).getPerfCounters(status, att, countersSet, counters);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).getPerfCounters(status, att, countersSet, counters);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_executeCreateDatabaseDispatcher(this: IUtil; status: IStatus; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: PBoolean): IAttachment; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).executeCreateDatabase(status, stmtLength, creatDBstatement, dialect, stmtIsCreateDb);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).executeCreateDatabase(status, stmtLength, creatDBstatement, dialect, stmtIsCreateDb);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_decodeDateDispatcher(this: IUtil; date: TISC_DATE; year: PCardinal; month: PCardinal; day: PCardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).decodeDate(date, year, month, day);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).decodeDate(date, year, month, day);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_decodeTimeDispatcher(this: IUtil; time: TISC_TIME; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).decodeTime(time, hours, minutes, seconds, fractions);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).decodeTime(time, hours, minutes, seconds, fractions);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_encodeDateDispatcher(this: IUtil; year: Cardinal; month: Cardinal; day: Cardinal): TISC_DATE; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).encodeDate(year, month, day);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).encodeDate(year, month, day);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_encodeTimeDispatcher(this: IUtil; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): TISC_TIME; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).encodeTime(hours, minutes, seconds, fractions);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).encodeTime(hours, minutes, seconds, fractions);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_formatStatusDispatcher(this: IUtil; buffer: PAnsiChar; bufferSize: Cardinal; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).formatStatus(buffer, bufferSize, status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).formatStatus(buffer, bufferSize, status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_getClientVersionDispatcher(this: IUtil): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).getClientVersion();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).getClientVersion();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_getXpbBuilderDispatcher(this: IUtil; status: IStatus; kind: Cardinal; buf: PByte; len: Cardinal): IXpbBuilder; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).getXpbBuilder(status, kind, buf, len);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).getXpbBuilder(status, kind, buf, len);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_setOffsetsDispatcher(this: IUtil; status: IStatus; metadata: IMessageMetadata; callback: IOffsetsCallback): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).setOffsets(status, metadata, callback);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).setOffsets(status, metadata, callback);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_getDecFloat16Dispatcher(this: IUtil; status: IStatus): IDecFloat16; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).getDecFloat16(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).getDecFloat16(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_getDecFloat34Dispatcher(this: IUtil; status: IStatus): IDecFloat34; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).getDecFloat34(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).getDecFloat34(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_decodeTimeTzDispatcher(this: IUtil; status: IStatus; timeTz: PISC_TIME_TZ; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).decodeTimeTz(status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).decodeTimeTz(status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_decodeTimeStampTzDispatcher(this: IUtil; status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).decodeTimeStampTz(status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).decodeTimeStampTz(status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_encodeTimeTzDispatcher(this: IUtil; status: IStatus; timeTz: PISC_TIME_TZ; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).encodeTimeTz(status, timeTz, hours, minutes, seconds, fractions, timeZone);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).encodeTimeTz(status, timeTz, hours, minutes, seconds, fractions, timeZone);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_encodeTimeStampTzDispatcher(this: IUtil; status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ; year: Cardinal; month: Cardinal; day: Cardinal; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal; timeZone: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).encodeTimeStampTz(status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZone);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).encodeTimeStampTz(status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZone);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUtilImpl_getInt128Dispatcher(this: IUtil; status: IStatus): IInt128; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUtilImpl(this.Versioned.SelfObject).getInt128(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUtilImpl(this).getInt128(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_decodeTimeTzExDispatcher(this: IUtil; status: IStatus; timeTz: PISC_TIME_TZ_EX; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).decodeTimeTzEx(status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).decodeTimeTzEx(status, timeTz, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUtilImpl_decodeTimeStampTzExDispatcher(this: IUtil; status: IStatus; timeStampTz: PISC_TIMESTAMP_TZ_EX; year: PCardinal; month: PCardinal; day: PCardinal; hours: PCardinal; minutes: PCardinal; seconds: PCardinal; fractions: PCardinal; timeZoneBufferLength: Cardinal; timeZoneBuffer: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl(this.Versioned.SelfObject).decodeTimeStampTzEx(status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl(this).decodeTimeStampTzEx(status, timeStampTz, year, month, day, hours, minutes, seconds, fractions, timeZoneBufferLength, timeZoneBuffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IUtilImpl_vTable: TUtilVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIUtil_VERSION);
    getFbVersion: IUtilImpl_getFbVersionDispatcher;
    loadBlob: IUtilImpl_loadBlobDispatcher;
    dumpBlob: IUtilImpl_dumpBlobDispatcher;
    getPerfCounters: IUtilImpl_getPerfCountersDispatcher;
    executeCreateDatabase: IUtilImpl_executeCreateDatabaseDispatcher;
    decodeDate: IUtilImpl_decodeDateDispatcher;
    decodeTime: IUtilImpl_decodeTimeDispatcher;
    encodeDate: IUtilImpl_encodeDateDispatcher;
    encodeTime: IUtilImpl_encodeTimeDispatcher;
    formatStatus: IUtilImpl_formatStatusDispatcher;
    getClientVersion: IUtilImpl_getClientVersionDispatcher;
    getXpbBuilder: IUtilImpl_getXpbBuilderDispatcher;
    setOffsets: IUtilImpl_setOffsetsDispatcher;
    getDecFloat16: IUtilImpl_getDecFloat16Dispatcher;
    getDecFloat34: IUtilImpl_getDecFloat34Dispatcher;
    decodeTimeTz: IUtilImpl_decodeTimeTzDispatcher;
    decodeTimeStampTz: IUtilImpl_decodeTimeStampTzDispatcher;
    encodeTimeTz: IUtilImpl_encodeTimeTzDispatcher;
    encodeTimeStampTz: IUtilImpl_encodeTimeStampTzDispatcher;
    getInt128: IUtilImpl_getInt128Dispatcher;
    decodeTimeTzEx: IUtilImpl_decodeTimeTzExDispatcher;
    decodeTimeStampTzEx: IUtilImpl_decodeTimeStampTzExDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IUtilImpl_vTable: TUtilVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IUtilImpl.AsIUtil: IUtil;
begin
  Result := IUtil(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IUtilImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IUtilImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IUtilImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IOffsetsCallbackImpl_setOffsetDispatcher(this: IOffsetsCallback; status: IStatus; index: Cardinal; offset: Cardinal; nullOffset: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IOffsetsCallbackImpl(this.Versioned.SelfObject).setOffset(status, index, offset, nullOffset);
{$ELSE !WITH_RECORD_METHODS}
  IOffsetsCallbackImpl(this).setOffset(status, index, offset, nullOffset);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IOffsetsCallbackImpl_vTable: TOffsetsCallbackVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIOffsetsCallback_VERSION);
    setOffset: IOffsetsCallbackImpl_setOffsetDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IOffsetsCallbackImpl_vTable: TOffsetsCallbackVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IOffsetsCallbackImpl.AsIOffsetsCallback: IOffsetsCallback;
begin
  Result := IOffsetsCallback(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IOffsetsCallbackImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IOffsetsCallbackImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IOffsetsCallbackImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_disposeDispatcher(this: IXpbBuilder); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_clearDispatcher(this: IXpbBuilder; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).clear(status);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).clear(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_removeCurrentDispatcher(this: IXpbBuilder; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).removeCurrent(status);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).removeCurrent(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_insertIntDispatcher(this: IXpbBuilder; status: IStatus; tag: Byte; value: Integer); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).insertInt(status, tag, value);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).insertInt(status, tag, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_insertBigIntDispatcher(this: IXpbBuilder; status: IStatus; tag: Byte; value: Int64); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).insertBigInt(status, tag, value);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).insertBigInt(status, tag, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_insertBytesDispatcher(this: IXpbBuilder; status: IStatus; tag: Byte; bytes: Pointer; length: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).insertBytes(status, tag, bytes, length);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).insertBytes(status, tag, bytes, length);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_insertStringDispatcher(this: IXpbBuilder; status: IStatus; tag: Byte; str: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).insertString(status, tag, str);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).insertString(status, tag, str);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_insertTagDispatcher(this: IXpbBuilder; status: IStatus; tag: Byte); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).insertTag(status, tag);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).insertTag(status, tag);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_isEofDispatcher(this: IXpbBuilder; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).isEof(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).isEof(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_moveNextDispatcher(this: IXpbBuilder; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).moveNext(status);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).moveNext(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IXpbBuilderImpl_rewindDispatcher(this: IXpbBuilder; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).rewind(status);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl(this).rewind(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_findFirstDispatcher(this: IXpbBuilder; status: IStatus; tag: Byte): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).findFirst(status, tag);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).findFirst(status, tag);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_findNextDispatcher(this: IXpbBuilder; status: IStatus): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).findNext(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).findNext(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getTagDispatcher(this: IXpbBuilder; status: IStatus): Byte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getTag(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getTag(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getLengthDispatcher(this: IXpbBuilder; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getLength(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getLength(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getIntDispatcher(this: IXpbBuilder; status: IStatus): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getInt(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getInt(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getBigIntDispatcher(this: IXpbBuilder; status: IStatus): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getBigInt(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getBigInt(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getStringDispatcher(this: IXpbBuilder; status: IStatus): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getString(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getString(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getBytesDispatcher(this: IXpbBuilder; status: IStatus): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getBytes(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getBytes(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getBufferLengthDispatcher(this: IXpbBuilder; status: IStatus): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getBufferLength(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getBufferLength(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IXpbBuilderImpl_getBufferDispatcher(this: IXpbBuilder; status: IStatus): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this.Disposable.Versioned.SelfObject).getBuffer(status);
{$ELSE !WITH_RECORD_METHODS}
  Result := IXpbBuilderImpl(this).getBuffer(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IXpbBuilderImpl_vTable: TXpbBuilderVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIXpbBuilder_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    clear: IXpbBuilderImpl_clearDispatcher;
    removeCurrent: IXpbBuilderImpl_removeCurrentDispatcher;
    insertInt: IXpbBuilderImpl_insertIntDispatcher;
    insertBigInt: IXpbBuilderImpl_insertBigIntDispatcher;
    insertBytes: IXpbBuilderImpl_insertBytesDispatcher;
    insertString: IXpbBuilderImpl_insertStringDispatcher;
    insertTag: IXpbBuilderImpl_insertTagDispatcher;
    isEof: IXpbBuilderImpl_isEofDispatcher;
    moveNext: IXpbBuilderImpl_moveNextDispatcher;
    rewind: IXpbBuilderImpl_rewindDispatcher;
    findFirst: IXpbBuilderImpl_findFirstDispatcher;
    findNext: IXpbBuilderImpl_findNextDispatcher;
    getTag: IXpbBuilderImpl_getTagDispatcher;
    getLength: IXpbBuilderImpl_getLengthDispatcher;
    getInt: IXpbBuilderImpl_getIntDispatcher;
    getBigInt: IXpbBuilderImpl_getBigIntDispatcher;
    getString: IXpbBuilderImpl_getStringDispatcher;
    getBytes: IXpbBuilderImpl_getBytesDispatcher;
    getBufferLength: IXpbBuilderImpl_getBufferLengthDispatcher;
    getBuffer: IXpbBuilderImpl_getBufferDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IXpbBuilderImpl_vTable: TXpbBuilderVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IXpbBuilderImpl.AsIXpbBuilder: IXpbBuilder;
begin
  Result := IXpbBuilder(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IXpbBuilderImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IXpbBuilderImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IXpbBuilderImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getKindDispatcher(this: ITraceConnection): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getKind();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getKind();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getProcessIDDispatcher(this: ITraceConnection): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getProcessID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getProcessID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getUserNameDispatcher(this: ITraceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getUserName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getUserName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getRoleNameDispatcher(this: ITraceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getRoleName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getRoleName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getCharSetDispatcher(this: ITraceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getCharSet();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getCharSet();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getRemoteProtocolDispatcher(this: ITraceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getRemoteProtocol();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getRemoteProtocol();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getRemoteAddressDispatcher(this: ITraceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getRemoteAddress();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getRemoteAddress();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getRemoteProcessIDDispatcher(this: ITraceConnection): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getRemoteProcessID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getRemoteProcessID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceConnectionImpl_getRemoteProcessNameDispatcher(this: ITraceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this.Versioned.SelfObject).getRemoteProcessName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceConnectionImpl(this).getRemoteProcessName();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceConnectionImpl_vTable: TTraceConnectionVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceConnection_VERSION);
    getKind: ITraceConnectionImpl_getKindDispatcher;
    getProcessID: ITraceConnectionImpl_getProcessIDDispatcher;
    getUserName: ITraceConnectionImpl_getUserNameDispatcher;
    getRoleName: ITraceConnectionImpl_getRoleNameDispatcher;
    getCharSet: ITraceConnectionImpl_getCharSetDispatcher;
    getRemoteProtocol: ITraceConnectionImpl_getRemoteProtocolDispatcher;
    getRemoteAddress: ITraceConnectionImpl_getRemoteAddressDispatcher;
    getRemoteProcessID: ITraceConnectionImpl_getRemoteProcessIDDispatcher;
    getRemoteProcessName: ITraceConnectionImpl_getRemoteProcessNameDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceConnectionImpl_vTable: TTraceConnectionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceConnectionImpl.AsITraceConnection: ITraceConnection;
begin
  Result := ITraceConnection(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceConnectionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceConnectionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceConnectionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getKindDispatcher(this: ITraceDatabaseConnection): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getKind();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getKind();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getProcessIDDispatcher(this: ITraceDatabaseConnection): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getProcessID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getProcessID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getUserNameDispatcher(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getUserName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getUserName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getRoleNameDispatcher(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRoleName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getRoleName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getCharSetDispatcher(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getCharSet();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getCharSet();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getRemoteProtocolDispatcher(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteProtocol();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getRemoteProtocol();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getRemoteAddressDispatcher(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteAddress();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getRemoteAddress();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getRemoteProcessIDDispatcher(this: ITraceDatabaseConnection): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteProcessID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getRemoteProcessID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getRemoteProcessNameDispatcher(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteProcessName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getRemoteProcessName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getConnectionIDDispatcher(this: ITraceDatabaseConnection): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getConnectionID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getConnectionID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDatabaseConnectionImpl_getDatabaseNameDispatcher(this: ITraceDatabaseConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this.TraceConnection.Versioned.SelfObject).getDatabaseName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDatabaseConnectionImpl(this).getDatabaseName();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceDatabaseConnectionImpl_vTable: TTraceDatabaseConnectionVTable = (
    TraceConnectionVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITraceDatabaseConnection_VERSION);
      getKind: ITraceConnectionImpl_getKindDispatcher;
      getProcessID: ITraceConnectionImpl_getProcessIDDispatcher;
      getUserName: ITraceConnectionImpl_getUserNameDispatcher;
      getRoleName: ITraceConnectionImpl_getRoleNameDispatcher;
      getCharSet: ITraceConnectionImpl_getCharSetDispatcher;
      getRemoteProtocol: ITraceConnectionImpl_getRemoteProtocolDispatcher;
      getRemoteAddress: ITraceConnectionImpl_getRemoteAddressDispatcher;
      getRemoteProcessID: ITraceConnectionImpl_getRemoteProcessIDDispatcher;
      getRemoteProcessName: ITraceConnectionImpl_getRemoteProcessNameDispatcher);
    getConnectionID: ITraceDatabaseConnectionImpl_getConnectionIDDispatcher;
    getDatabaseName: ITraceDatabaseConnectionImpl_getDatabaseNameDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceDatabaseConnectionImpl_vTable: TTraceDatabaseConnectionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceDatabaseConnectionImpl.AsITraceDatabaseConnection: ITraceDatabaseConnection;
begin
  Result := ITraceDatabaseConnection(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceDatabaseConnectionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceDatabaseConnectionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceDatabaseConnectionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTransactionImpl_getTransactionIDDispatcher(this: ITraceTransaction): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this.Versioned.SelfObject).getTransactionID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this).getTransactionID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTransactionImpl_getReadOnlyDispatcher(this: ITraceTransaction): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this.Versioned.SelfObject).getReadOnly();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this).getReadOnly();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTransactionImpl_getWaitDispatcher(this: ITraceTransaction): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this.Versioned.SelfObject).getWait();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this).getWait();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTransactionImpl_getIsolationDispatcher(this: ITraceTransaction): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this.Versioned.SelfObject).getIsolation();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this).getIsolation();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTransactionImpl_getPerfDispatcher(this: ITraceTransaction): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTransactionImpl_getInitialIDDispatcher(this: ITraceTransaction): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this.Versioned.SelfObject).getInitialID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this).getInitialID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTransactionImpl_getPreviousIDDispatcher(this: ITraceTransaction): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this.Versioned.SelfObject).getPreviousID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTransactionImpl(this).getPreviousID();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceTransactionImpl_vTable: TTraceTransactionVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceTransaction_VERSION);
    getTransactionID: ITraceTransactionImpl_getTransactionIDDispatcher;
    getReadOnly: ITraceTransactionImpl_getReadOnlyDispatcher;
    getWait: ITraceTransactionImpl_getWaitDispatcher;
    getIsolation: ITraceTransactionImpl_getIsolationDispatcher;
    getPerf: ITraceTransactionImpl_getPerfDispatcher;
    getInitialID: ITraceTransactionImpl_getInitialIDDispatcher;
    getPreviousID: ITraceTransactionImpl_getPreviousIDDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceTransactionImpl_vTable: TTraceTransactionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceTransactionImpl.AsITraceTransaction: ITraceTransaction;
begin
  Result := ITraceTransaction(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceTransactionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceTransactionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceTransactionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceParamsImpl_getCountDispatcher(this: ITraceParams): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceParamsImpl(this.Versioned.SelfObject).getCount();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceParamsImpl(this).getCount();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceParamsImpl_getParamDispatcher(this: ITraceParams; idx: Cardinal): Pdsc; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceParamsImpl(this.Versioned.SelfObject).getParam(idx);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceParamsImpl(this).getParam(idx);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceParamsImpl_getTextUTF8Dispatcher(this: ITraceParams; status: IStatus; idx: Cardinal): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceParamsImpl(this.Versioned.SelfObject).getTextUTF8(status, idx);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceParamsImpl(this).getTextUTF8(status, idx);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceParamsImpl_vTable: TTraceParamsVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceParams_VERSION);
    getCount: ITraceParamsImpl_getCountDispatcher;
    getParam: ITraceParamsImpl_getParamDispatcher;
    getTextUTF8: ITraceParamsImpl_getTextUTF8Dispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceParamsImpl_vTable: TTraceParamsVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceParamsImpl.AsITraceParams: ITraceParams;
begin
  Result := ITraceParams(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceParamsImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceParamsImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceParamsImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceStatementImpl_getStmtIDDispatcher(this: ITraceStatement): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceStatementImpl(this.Versioned.SelfObject).getStmtID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceStatementImpl(this).getStmtID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceStatementImpl_getPerfDispatcher(this: ITraceStatement): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceStatementImpl(this.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceStatementImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceStatementImpl_vTable: TTraceStatementVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceStatement_VERSION);
    getStmtID: ITraceStatementImpl_getStmtIDDispatcher;
    getPerf: ITraceStatementImpl_getPerfDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceStatementImpl_vTable: TTraceStatementVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceStatementImpl.AsITraceStatement: ITraceStatement;
begin
  Result := ITraceStatement(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceStatementImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceStatementImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceStatementImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSQLStatementImpl_getStmtIDDispatcher(this: ITraceSQLStatement): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this.TraceStatement.Versioned.SelfObject).getStmtID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this).getStmtID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSQLStatementImpl_getPerfDispatcher(this: ITraceSQLStatement): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this.TraceStatement.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSQLStatementImpl_getTextDispatcher(this: ITraceSQLStatement): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this.TraceStatement.Versioned.SelfObject).getText();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this).getText();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSQLStatementImpl_getPlanDispatcher(this: ITraceSQLStatement): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this.TraceStatement.Versioned.SelfObject).getPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this).getPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSQLStatementImpl_getInputsDispatcher(this: ITraceSQLStatement): ITraceParams; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this.TraceStatement.Versioned.SelfObject).getInputs();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this).getInputs();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSQLStatementImpl_getTextUTF8Dispatcher(this: ITraceSQLStatement): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this.TraceStatement.Versioned.SelfObject).getTextUTF8();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this).getTextUTF8();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSQLStatementImpl_getExplainedPlanDispatcher(this: ITraceSQLStatement): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this.TraceStatement.Versioned.SelfObject).getExplainedPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSQLStatementImpl(this).getExplainedPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceSQLStatementImpl_vTable: TTraceSQLStatementVTable = (
    TraceStatementVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITraceSQLStatement_VERSION);
      getStmtID: ITraceStatementImpl_getStmtIDDispatcher;
      getPerf: ITraceStatementImpl_getPerfDispatcher);
    getText: ITraceSQLStatementImpl_getTextDispatcher;
    getPlan: ITraceSQLStatementImpl_getPlanDispatcher;
    getInputs: ITraceSQLStatementImpl_getInputsDispatcher;
    getTextUTF8: ITraceSQLStatementImpl_getTextUTF8Dispatcher;
    getExplainedPlan: ITraceSQLStatementImpl_getExplainedPlanDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceSQLStatementImpl_vTable: TTraceSQLStatementVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceSQLStatementImpl.AsITraceSQLStatement: ITraceSQLStatement;
begin
  Result := ITraceSQLStatement(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceSQLStatementImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceSQLStatementImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceSQLStatementImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceBLRStatementImpl_getStmtIDDispatcher(this: ITraceBLRStatement): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this.TraceStatement.Versioned.SelfObject).getStmtID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this).getStmtID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceBLRStatementImpl_getPerfDispatcher(this: ITraceBLRStatement): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this.TraceStatement.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceBLRStatementImpl_getDataDispatcher(this: ITraceBLRStatement): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this.TraceStatement.Versioned.SelfObject).getData();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this).getData();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceBLRStatementImpl_getDataLengthDispatcher(this: ITraceBLRStatement): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this.TraceStatement.Versioned.SelfObject).getDataLength();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this).getDataLength();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceBLRStatementImpl_getTextDispatcher(this: ITraceBLRStatement): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this.TraceStatement.Versioned.SelfObject).getText();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceBLRStatementImpl(this).getText();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceBLRStatementImpl_vTable: TTraceBLRStatementVTable = (
    TraceStatementVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITraceBLRStatement_VERSION);
      getStmtID: ITraceStatementImpl_getStmtIDDispatcher;
      getPerf: ITraceStatementImpl_getPerfDispatcher);
    getData: ITraceBLRStatementImpl_getDataDispatcher;
    getDataLength: ITraceBLRStatementImpl_getDataLengthDispatcher;
    getText: ITraceBLRStatementImpl_getTextDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceBLRStatementImpl_vTable: TTraceBLRStatementVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceBLRStatementImpl.AsITraceBLRStatement: ITraceBLRStatement;
begin
  Result := ITraceBLRStatement(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceBLRStatementImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceBLRStatementImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceBLRStatementImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDYNRequestImpl_getDataDispatcher(this: ITraceDYNRequest): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDYNRequestImpl(this.Versioned.SelfObject).getData();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDYNRequestImpl(this).getData();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDYNRequestImpl_getDataLengthDispatcher(this: ITraceDYNRequest): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDYNRequestImpl(this.Versioned.SelfObject).getDataLength();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDYNRequestImpl(this).getDataLength();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceDYNRequestImpl_getTextDispatcher(this: ITraceDYNRequest): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceDYNRequestImpl(this.Versioned.SelfObject).getText();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceDYNRequestImpl(this).getText();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceDYNRequestImpl_vTable: TTraceDYNRequestVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceDYNRequest_VERSION);
    getData: ITraceDYNRequestImpl_getDataDispatcher;
    getDataLength: ITraceDYNRequestImpl_getDataLengthDispatcher;
    getText: ITraceDYNRequestImpl_getTextDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceDYNRequestImpl_vTable: TTraceDYNRequestVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceDYNRequestImpl.AsITraceDYNRequest: ITraceDYNRequest;
begin
  Result := ITraceDYNRequest(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceDYNRequestImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceDYNRequestImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceDYNRequestImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceContextVariableImpl_getNameSpaceDispatcher(this: ITraceContextVariable): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceContextVariableImpl(this.Versioned.SelfObject).getNameSpace();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceContextVariableImpl(this).getNameSpace();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceContextVariableImpl_getVarNameDispatcher(this: ITraceContextVariable): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceContextVariableImpl(this.Versioned.SelfObject).getVarName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceContextVariableImpl(this).getVarName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceContextVariableImpl_getVarValueDispatcher(this: ITraceContextVariable): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceContextVariableImpl(this.Versioned.SelfObject).getVarValue();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceContextVariableImpl(this).getVarValue();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceContextVariableImpl_vTable: TTraceContextVariableVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceContextVariable_VERSION);
    getNameSpace: ITraceContextVariableImpl_getNameSpaceDispatcher;
    getVarName: ITraceContextVariableImpl_getVarNameDispatcher;
    getVarValue: ITraceContextVariableImpl_getVarValueDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceContextVariableImpl_vTable: TTraceContextVariableVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceContextVariableImpl.AsITraceContextVariable: ITraceContextVariable;
begin
  Result := ITraceContextVariable(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceContextVariableImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceContextVariableImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceContextVariableImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceProcedureImpl_getProcNameDispatcher(this: ITraceProcedure): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this.Versioned.SelfObject).getProcName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this).getProcName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceProcedureImpl_getInputsDispatcher(this: ITraceProcedure): ITraceParams; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this.Versioned.SelfObject).getInputs();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this).getInputs();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceProcedureImpl_getPerfDispatcher(this: ITraceProcedure): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceProcedureImpl_getStmtIDDispatcher(this: ITraceProcedure): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this.Versioned.SelfObject).getStmtID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this).getStmtID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceProcedureImpl_getPlanDispatcher(this: ITraceProcedure): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this.Versioned.SelfObject).getPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this).getPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceProcedureImpl_getExplainedPlanDispatcher(this: ITraceProcedure): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this.Versioned.SelfObject).getExplainedPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceProcedureImpl(this).getExplainedPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceProcedureImpl_vTable: TTraceProcedureVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceProcedure_VERSION);
    getProcName: ITraceProcedureImpl_getProcNameDispatcher;
    getInputs: ITraceProcedureImpl_getInputsDispatcher;
    getPerf: ITraceProcedureImpl_getPerfDispatcher;
    getStmtID: ITraceProcedureImpl_getStmtIDDispatcher;
    getPlan: ITraceProcedureImpl_getPlanDispatcher;
    getExplainedPlan: ITraceProcedureImpl_getExplainedPlanDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceProcedureImpl_vTable: TTraceProcedureVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceProcedureImpl.AsITraceProcedure: ITraceProcedure;
begin
  Result := ITraceProcedure(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceProcedureImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceProcedureImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceProcedureImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFunctionImpl_getFuncNameDispatcher(this: ITraceFunction): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this.Versioned.SelfObject).getFuncName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this).getFuncName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFunctionImpl_getInputsDispatcher(this: ITraceFunction): ITraceParams; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this.Versioned.SelfObject).getInputs();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this).getInputs();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFunctionImpl_getResultDispatcher(this: ITraceFunction): ITraceParams; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this.Versioned.SelfObject).getResult();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this).getResult();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFunctionImpl_getPerfDispatcher(this: ITraceFunction): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFunctionImpl_getStmtIDDispatcher(this: ITraceFunction): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this.Versioned.SelfObject).getStmtID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this).getStmtID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFunctionImpl_getPlanDispatcher(this: ITraceFunction): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this.Versioned.SelfObject).getPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this).getPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFunctionImpl_getExplainedPlanDispatcher(this: ITraceFunction): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this.Versioned.SelfObject).getExplainedPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFunctionImpl(this).getExplainedPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceFunctionImpl_vTable: TTraceFunctionVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceFunction_VERSION);
    getFuncName: ITraceFunctionImpl_getFuncNameDispatcher;
    getInputs: ITraceFunctionImpl_getInputsDispatcher;
    getResult: ITraceFunctionImpl_getResultDispatcher;
    getPerf: ITraceFunctionImpl_getPerfDispatcher;
    getStmtID: ITraceFunctionImpl_getStmtIDDispatcher;
    getPlan: ITraceFunctionImpl_getPlanDispatcher;
    getExplainedPlan: ITraceFunctionImpl_getExplainedPlanDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceFunctionImpl_vTable: TTraceFunctionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceFunctionImpl.AsITraceFunction: ITraceFunction;
begin
  Result := ITraceFunction(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceFunctionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceFunctionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceFunctionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getTriggerNameDispatcher(this: ITraceTrigger): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getTriggerName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getTriggerName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getRelationNameDispatcher(this: ITraceTrigger): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getRelationName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getRelationName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getActionDispatcher(this: ITraceTrigger): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getAction();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getAction();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getWhichDispatcher(this: ITraceTrigger): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getWhich();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getWhich();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getPerfDispatcher(this: ITraceTrigger): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getStmtIDDispatcher(this: ITraceTrigger): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getStmtID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getStmtID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getPlanDispatcher(this: ITraceTrigger): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceTriggerImpl_getExplainedPlanDispatcher(this: ITraceTrigger): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this.Versioned.SelfObject).getExplainedPlan();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceTriggerImpl(this).getExplainedPlan();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceTriggerImpl_vTable: TTraceTriggerVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceTrigger_VERSION);
    getTriggerName: ITraceTriggerImpl_getTriggerNameDispatcher;
    getRelationName: ITraceTriggerImpl_getRelationNameDispatcher;
    getAction: ITraceTriggerImpl_getActionDispatcher;
    getWhich: ITraceTriggerImpl_getWhichDispatcher;
    getPerf: ITraceTriggerImpl_getPerfDispatcher;
    getStmtID: ITraceTriggerImpl_getStmtIDDispatcher;
    getPlan: ITraceTriggerImpl_getPlanDispatcher;
    getExplainedPlan: ITraceTriggerImpl_getExplainedPlanDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceTriggerImpl_vTable: TTraceTriggerVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceTriggerImpl.AsITraceTrigger: ITraceTrigger;
begin
  Result := ITraceTrigger(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceTriggerImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceTriggerImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceTriggerImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getKindDispatcher(this: ITraceServiceConnection): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getKind();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getKind();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getProcessIDDispatcher(this: ITraceServiceConnection): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getProcessID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getProcessID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getUserNameDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getUserName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getUserName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getRoleNameDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRoleName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getRoleName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getCharSetDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getCharSet();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getCharSet();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getRemoteProtocolDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteProtocol();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getRemoteProtocol();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getRemoteAddressDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteAddress();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getRemoteAddress();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getRemoteProcessIDDispatcher(this: ITraceServiceConnection): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteProcessID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getRemoteProcessID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getRemoteProcessNameDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getRemoteProcessName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getRemoteProcessName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getServiceIDDispatcher(this: ITraceServiceConnection): Pointer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getServiceID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getServiceID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getServiceMgrDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getServiceMgr();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getServiceMgr();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceServiceConnectionImpl_getServiceNameDispatcher(this: ITraceServiceConnection): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this.TraceConnection.Versioned.SelfObject).getServiceName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceServiceConnectionImpl(this).getServiceName();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceServiceConnectionImpl_vTable: TTraceServiceConnectionVTable = (
    TraceConnectionVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITraceServiceConnection_VERSION);
      getKind: ITraceConnectionImpl_getKindDispatcher;
      getProcessID: ITraceConnectionImpl_getProcessIDDispatcher;
      getUserName: ITraceConnectionImpl_getUserNameDispatcher;
      getRoleName: ITraceConnectionImpl_getRoleNameDispatcher;
      getCharSet: ITraceConnectionImpl_getCharSetDispatcher;
      getRemoteProtocol: ITraceConnectionImpl_getRemoteProtocolDispatcher;
      getRemoteAddress: ITraceConnectionImpl_getRemoteAddressDispatcher;
      getRemoteProcessID: ITraceConnectionImpl_getRemoteProcessIDDispatcher;
      getRemoteProcessName: ITraceConnectionImpl_getRemoteProcessNameDispatcher);
    getServiceID: ITraceServiceConnectionImpl_getServiceIDDispatcher;
    getServiceMgr: ITraceServiceConnectionImpl_getServiceMgrDispatcher;
    getServiceName: ITraceServiceConnectionImpl_getServiceNameDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceServiceConnectionImpl_vTable: TTraceServiceConnectionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceServiceConnectionImpl.AsITraceServiceConnection: ITraceServiceConnection;
begin
  Result := ITraceServiceConnection(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceServiceConnectionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceServiceConnectionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceServiceConnectionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceStatusVectorImpl_hasErrorDispatcher(this: ITraceStatusVector): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this.Versioned.SelfObject).hasError();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this).hasError();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceStatusVectorImpl_hasWarningDispatcher(this: ITraceStatusVector): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this.Versioned.SelfObject).hasWarning();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this).hasWarning();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceStatusVectorImpl_getStatusDispatcher(this: ITraceStatusVector): IStatus; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this.Versioned.SelfObject).getStatus();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this).getStatus();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceStatusVectorImpl_getTextDispatcher(this: ITraceStatusVector): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this.Versioned.SelfObject).getText();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceStatusVectorImpl(this).getText();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceStatusVectorImpl_vTable: TTraceStatusVectorVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceStatusVector_VERSION);
    hasError: ITraceStatusVectorImpl_hasErrorDispatcher;
    hasWarning: ITraceStatusVectorImpl_hasWarningDispatcher;
    getStatus: ITraceStatusVectorImpl_getStatusDispatcher;
    getText: ITraceStatusVectorImpl_getTextDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceStatusVectorImpl_vTable: TTraceStatusVectorVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceStatusVectorImpl.AsITraceStatusVector: ITraceStatusVector;
begin
  Result := ITraceStatusVector(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceStatusVectorImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceStatusVectorImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceStatusVectorImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSweepInfoImpl_getOITDispatcher(this: ITraceSweepInfo): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this.Versioned.SelfObject).getOIT();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this).getOIT();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSweepInfoImpl_getOSTDispatcher(this: ITraceSweepInfo): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this.Versioned.SelfObject).getOST();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this).getOST();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSweepInfoImpl_getOATDispatcher(this: ITraceSweepInfo): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this.Versioned.SelfObject).getOAT();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this).getOAT();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSweepInfoImpl_getNextDispatcher(this: ITraceSweepInfo): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this.Versioned.SelfObject).getNext();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this).getNext();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceSweepInfoImpl_getPerfDispatcher(this: ITraceSweepInfo): PPerformanceInfo; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this.Versioned.SelfObject).getPerf();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceSweepInfoImpl(this).getPerf();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceSweepInfoImpl_vTable: TTraceSweepInfoVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceSweepInfo_VERSION);
    getOIT: ITraceSweepInfoImpl_getOITDispatcher;
    getOST: ITraceSweepInfoImpl_getOSTDispatcher;
    getOAT: ITraceSweepInfoImpl_getOATDispatcher;
    getNext: ITraceSweepInfoImpl_getNextDispatcher;
    getPerf: ITraceSweepInfoImpl_getPerfDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceSweepInfoImpl_vTable: TTraceSweepInfoVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceSweepInfoImpl.AsITraceSweepInfo: ITraceSweepInfo;
begin
  Result := ITraceSweepInfo(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceSweepInfoImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceSweepInfoImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceSweepInfoImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITraceLogWriterImpl_addRefDispatcher(this: ITraceLogWriter); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITraceLogWriterImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  ITraceLogWriterImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceLogWriterImpl_releaseDispatcher(this: ITraceLogWriter): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceLogWriterImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceLogWriterImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceLogWriterImpl_writeDispatcher(this: ITraceLogWriter; buf: Pointer; size: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceLogWriterImpl(this.ReferenceCounted.Versioned.SelfObject).write(buf, size);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceLogWriterImpl(this).write(buf, size);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceLogWriterImpl_write_sDispatcher(this: ITraceLogWriter; status: IStatus; buf: Pointer; size: Cardinal): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceLogWriterImpl(this.ReferenceCounted.Versioned.SelfObject).write_s(status, buf, size);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceLogWriterImpl(this).write_s(status, buf, size);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceLogWriterImpl_vTable: TTraceLogWriterVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITraceLogWriter_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    write: ITraceLogWriterImpl_writeDispatcher;
    write_s: ITraceLogWriterImpl_write_sDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceLogWriterImpl_vTable: TTraceLogWriterVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceLogWriterImpl.AsITraceLogWriter: ITraceLogWriter;
begin
  Result := ITraceLogWriter(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceLogWriterImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceLogWriterImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceLogWriterImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceInitInfoImpl_getConfigTextDispatcher(this: ITraceInitInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this.Versioned.SelfObject).getConfigText();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this).getConfigText();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceInitInfoImpl_getTraceSessionIDDispatcher(this: ITraceInitInfo): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this.Versioned.SelfObject).getTraceSessionID();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this).getTraceSessionID();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceInitInfoImpl_getTraceSessionNameDispatcher(this: ITraceInitInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this.Versioned.SelfObject).getTraceSessionName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this).getTraceSessionName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceInitInfoImpl_getFirebirdRootDirectoryDispatcher(this: ITraceInitInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this.Versioned.SelfObject).getFirebirdRootDirectory();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this).getFirebirdRootDirectory();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceInitInfoImpl_getDatabaseNameDispatcher(this: ITraceInitInfo): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this.Versioned.SelfObject).getDatabaseName();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this).getDatabaseName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceInitInfoImpl_getConnectionDispatcher(this: ITraceInitInfo): ITraceDatabaseConnection; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this.Versioned.SelfObject).getConnection();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this).getConnection();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceInitInfoImpl_getLogWriterDispatcher(this: ITraceInitInfo): ITraceLogWriter; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this.Versioned.SelfObject).getLogWriter();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceInitInfoImpl(this).getLogWriter();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceInitInfoImpl_vTable: TTraceInitInfoVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cITraceInitInfo_VERSION);
    getConfigText: ITraceInitInfoImpl_getConfigTextDispatcher;
    getTraceSessionID: ITraceInitInfoImpl_getTraceSessionIDDispatcher;
    getTraceSessionName: ITraceInitInfoImpl_getTraceSessionNameDispatcher;
    getFirebirdRootDirectory: ITraceInitInfoImpl_getFirebirdRootDirectoryDispatcher;
    getDatabaseName: ITraceInitInfoImpl_getDatabaseNameDispatcher;
    getConnection: ITraceInitInfoImpl_getConnectionDispatcher;
    getLogWriter: ITraceInitInfoImpl_getLogWriterDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceInitInfoImpl_vTable: TTraceInitInfoVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceInitInfoImpl.AsITraceInitInfo: ITraceInitInfo;
begin
  Result := ITraceInitInfo(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceInitInfoImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceInitInfoImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceInitInfoImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITracePluginImpl_addRefDispatcher(this: ITracePlugin); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  ITracePluginImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_releaseDispatcher(this: ITracePlugin): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_get_errorDispatcher(this: ITracePlugin): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_get_error();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_get_error();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_attachDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_attach(connection, create_db, att_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_attach(connection, create_db, att_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_detachDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; drop_db: Boolean): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_detach(connection, drop_db);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_detach(connection, drop_db);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_transaction_startDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; tpb_length: Cardinal; tpb: PByte; tra_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_transaction_start(connection, transaction, tpb_length, tpb, tra_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_transaction_start(connection, transaction, tpb_length, tpb, tra_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_transaction_endDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_transaction_end(connection, transaction, commit, retain_context, tra_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_transaction_end(connection, transaction, commit, retain_context, tra_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_proc_executeDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; procedure_: ITraceProcedure; started: Boolean; proc_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_proc_execute(connection, transaction, procedure_, started, proc_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_proc_execute(connection, transaction, procedure_, started, proc_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_trigger_executeDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; trigger: ITraceTrigger; started: Boolean; trig_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_trigger_execute(connection, transaction, trigger, started, trig_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_trigger_execute(connection, transaction, trigger, started, trig_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_set_contextDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; variable: ITraceContextVariable): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_set_context(connection, transaction, variable);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_set_context(connection, transaction, variable);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_dsql_prepareDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_dsql_prepare(connection, transaction, statement, time_millis, req_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_dsql_prepare(connection, transaction, statement, time_millis, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_dsql_freeDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; statement: ITraceSQLStatement; option: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_dsql_free(connection, statement, option);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_dsql_free(connection, statement, option);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_dsql_executeDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_dsql_execute(connection, transaction, statement, started, req_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_dsql_execute(connection, transaction, statement, started, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_blr_compileDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_blr_compile(connection, transaction, statement, time_millis, req_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_blr_compile(connection, transaction, statement, time_millis, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_blr_executeDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceBLRStatement; req_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_blr_execute(connection, transaction, statement, req_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_blr_execute(connection, transaction, statement, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_dyn_executeDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; request: ITraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_dyn_execute(connection, transaction, request, time_millis, req_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_dyn_execute(connection, transaction, request, time_millis, req_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_service_attachDispatcher(this: ITracePlugin; service: ITraceServiceConnection; att_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_service_attach(service, att_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_service_attach(service, att_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_service_startDispatcher(this: ITracePlugin; service: ITraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_service_start(service, switches_length, switches, start_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_service_start(service, switches_length, switches, start_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_service_queryDispatcher(this: ITracePlugin; service: ITraceServiceConnection; send_item_length: Cardinal; send_items: PByte; recv_item_length: Cardinal; recv_items: PByte; query_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_service_query(service, send_item_length, send_items, recv_item_length, recv_items, query_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_service_query(service, send_item_length, send_items, recv_item_length, recv_items, query_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_service_detachDispatcher(this: ITracePlugin; service: ITraceServiceConnection; detach_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_service_detach(service, detach_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_service_detach(service, detach_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_event_errorDispatcher(this: ITracePlugin; connection: ITraceConnection; status: ITraceStatusVector; function_: PAnsiChar): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_event_error(connection, status, function_);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_event_error(connection, status, function_);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_event_sweepDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; sweep: ITraceSweepInfo; sweep_state: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_event_sweep(connection, sweep, sweep_state);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_event_sweep(connection, sweep, sweep_state);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_func_executeDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; function_: ITraceFunction; started: Boolean; func_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_func_execute(connection, transaction, function_, started, func_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_func_execute(connection, transaction, function_, started, func_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_dsql_restartDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; transaction: ITraceTransaction; statement: ITraceSQLStatement; number: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_dsql_restart(connection, transaction, statement, number);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_dsql_restart(connection, transaction, statement, number);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_proc_compileDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; procedure_: ITraceProcedure; time_millis: Int64; proc_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_proc_compile(connection, procedure_, time_millis, proc_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_proc_compile(connection, procedure_, time_millis, proc_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_func_compileDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; function_: ITraceFunction; time_millis: Int64; func_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_func_compile(connection, function_, time_millis, func_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_func_compile(connection, function_, time_millis, func_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITracePluginImpl_trace_trigger_compileDispatcher(this: ITracePlugin; connection: ITraceDatabaseConnection; trigger: ITraceTrigger; time_millis: Int64; trig_result: Cardinal): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this.ReferenceCounted.Versioned.SelfObject).trace_trigger_compile(connection, trigger, time_millis, trig_result);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITracePluginImpl(this).trace_trigger_compile(connection, trigger, time_millis, trig_result);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITracePluginImpl_vTable: TTracePluginVTable = (
    ReferenceCountedVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cITracePlugin_VERSION);
      addRef: IReferenceCountedImpl_addRefDispatcher;
      release: IReferenceCountedImpl_releaseDispatcher);
    trace_get_error: ITracePluginImpl_trace_get_errorDispatcher;
    trace_attach: ITracePluginImpl_trace_attachDispatcher;
    trace_detach: ITracePluginImpl_trace_detachDispatcher;
    trace_transaction_start: ITracePluginImpl_trace_transaction_startDispatcher;
    trace_transaction_end: ITracePluginImpl_trace_transaction_endDispatcher;
    trace_proc_execute: ITracePluginImpl_trace_proc_executeDispatcher;
    trace_trigger_execute: ITracePluginImpl_trace_trigger_executeDispatcher;
    trace_set_context: ITracePluginImpl_trace_set_contextDispatcher;
    trace_dsql_prepare: ITracePluginImpl_trace_dsql_prepareDispatcher;
    trace_dsql_free: ITracePluginImpl_trace_dsql_freeDispatcher;
    trace_dsql_execute: ITracePluginImpl_trace_dsql_executeDispatcher;
    trace_blr_compile: ITracePluginImpl_trace_blr_compileDispatcher;
    trace_blr_execute: ITracePluginImpl_trace_blr_executeDispatcher;
    trace_dyn_execute: ITracePluginImpl_trace_dyn_executeDispatcher;
    trace_service_attach: ITracePluginImpl_trace_service_attachDispatcher;
    trace_service_start: ITracePluginImpl_trace_service_startDispatcher;
    trace_service_query: ITracePluginImpl_trace_service_queryDispatcher;
    trace_service_detach: ITracePluginImpl_trace_service_detachDispatcher;
    trace_event_error: ITracePluginImpl_trace_event_errorDispatcher;
    trace_event_sweep: ITracePluginImpl_trace_event_sweepDispatcher;
    trace_func_execute: ITracePluginImpl_trace_func_executeDispatcher;
    trace_dsql_restart: ITracePluginImpl_trace_dsql_restartDispatcher;
    trace_proc_compile: ITracePluginImpl_trace_proc_compileDispatcher;
    trace_func_compile: ITracePluginImpl_trace_func_compileDispatcher;
    trace_trigger_compile: ITracePluginImpl_trace_trigger_compileDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITracePluginImpl_vTable: TTracePluginVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITracePluginImpl.AsITracePlugin: ITracePlugin;
begin
  Result := ITracePlugin(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITracePluginImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITracePluginImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITracePluginImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITraceFactoryImpl_addRefDispatcher(this: ITraceFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITraceFactoryImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  ITraceFactoryImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFactoryImpl_releaseDispatcher(this: ITraceFactory): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure ITraceFactoryImpl_setOwnerDispatcher(this: ITraceFactory; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  ITraceFactoryImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  ITraceFactoryImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFactoryImpl_getOwnerDispatcher(this: ITraceFactory): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFactoryImpl_trace_needsDispatcher(this: ITraceFactory): UInt64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).trace_needs();
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this).trace_needs();
{$ENDIF !WITH_RECORD_METHODS}
end;

function ITraceFactoryImpl_trace_createDispatcher(this: ITraceFactory; status: IStatus; init_info: ITraceInitInfo): ITracePlugin; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).trace_create(status, init_info);
{$ELSE !WITH_RECORD_METHODS}
  Result := ITraceFactoryImpl(this).trace_create(status, init_info);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  ITraceFactoryImpl_vTable: TTraceFactoryVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cITraceFactory_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    trace_needs: ITraceFactoryImpl_trace_needsDispatcher;
    trace_create: ITraceFactoryImpl_trace_createDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  ITraceFactoryImpl_vTable: TTraceFactoryVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function ITraceFactoryImpl.AsITraceFactory: ITraceFactory;
begin
  Result := ITraceFactory(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor ITraceFactoryImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @ITraceFactoryImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := ITraceFactoryImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrFunctionFactoryImpl_disposeDispatcher(this: IUdrFunctionFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrFunctionFactoryImpl_setupDispatcher(this: IUdrFunctionFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl(this.Disposable.Versioned.SelfObject).setup(status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl(this).setup(status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUdrFunctionFactoryImpl_newItemDispatcher(this: IUdrFunctionFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalFunction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUdrFunctionFactoryImpl(this.Disposable.Versioned.SelfObject).newItem(status, context, metadata);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUdrFunctionFactoryImpl(this).newItem(status, context, metadata);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl_vTable: TUdrFunctionFactoryVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIUdrFunctionFactory_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    setup: IUdrFunctionFactoryImpl_setupDispatcher;
    newItem: IUdrFunctionFactoryImpl_newItemDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IUdrFunctionFactoryImpl_vTable: TUdrFunctionFactoryVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IUdrFunctionFactoryImpl.AsIUdrFunctionFactory: IUdrFunctionFactory;
begin
  Result := IUdrFunctionFactory(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IUdrFunctionFactoryImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IUdrFunctionFactoryImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IUdrFunctionFactoryImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrProcedureFactoryImpl_disposeDispatcher(this: IUdrProcedureFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrProcedureFactoryImpl_setupDispatcher(this: IUdrProcedureFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; inBuilder: IMetadataBuilder; outBuilder: IMetadataBuilder); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl(this.Disposable.Versioned.SelfObject).setup(status, context, metadata, inBuilder, outBuilder);
{$ELSE !WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl(this).setup(status, context, metadata, inBuilder, outBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUdrProcedureFactoryImpl_newItemDispatcher(this: IUdrProcedureFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalProcedure; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUdrProcedureFactoryImpl(this.Disposable.Versioned.SelfObject).newItem(status, context, metadata);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUdrProcedureFactoryImpl(this).newItem(status, context, metadata);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl_vTable: TUdrProcedureFactoryVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIUdrProcedureFactory_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    setup: IUdrProcedureFactoryImpl_setupDispatcher;
    newItem: IUdrProcedureFactoryImpl_newItemDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IUdrProcedureFactoryImpl_vTable: TUdrProcedureFactoryVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IUdrProcedureFactoryImpl.AsIUdrProcedureFactory: IUdrProcedureFactory;
begin
  Result := IUdrProcedureFactory(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IUdrProcedureFactoryImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IUdrProcedureFactoryImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IUdrProcedureFactoryImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrTriggerFactoryImpl_disposeDispatcher(this: IUdrTriggerFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrTriggerFactoryImpl_setupDispatcher(this: IUdrTriggerFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata; fieldsBuilder: IMetadataBuilder); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl(this.Disposable.Versioned.SelfObject).setup(status, context, metadata, fieldsBuilder);
{$ELSE !WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl(this).setup(status, context, metadata, fieldsBuilder);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUdrTriggerFactoryImpl_newItemDispatcher(this: IUdrTriggerFactory; status: IStatus; context: IExternalContext; metadata: IRoutineMetadata): IExternalTrigger; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUdrTriggerFactoryImpl(this.Disposable.Versioned.SelfObject).newItem(status, context, metadata);
{$ELSE !WITH_RECORD_METHODS}
  Result := IUdrTriggerFactoryImpl(this).newItem(status, context, metadata);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl_vTable: TUdrTriggerFactoryVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIUdrTriggerFactory_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    setup: IUdrTriggerFactoryImpl_setupDispatcher;
    newItem: IUdrTriggerFactoryImpl_newItemDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IUdrTriggerFactoryImpl_vTable: TUdrTriggerFactoryVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IUdrTriggerFactoryImpl.AsIUdrTriggerFactory: IUdrTriggerFactory;
begin
  Result := IUdrTriggerFactory(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IUdrTriggerFactoryImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IUdrTriggerFactoryImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IUdrTriggerFactoryImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IUdrPluginImpl_getMasterDispatcher(this: IUdrPlugin): IMaster; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IUdrPluginImpl(this.Versioned.SelfObject).getMaster();
{$ELSE !WITH_RECORD_METHODS}
  Result := IUdrPluginImpl(this).getMaster();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrPluginImpl_registerFunctionDispatcher(this: IUdrPlugin; status: IStatus; name: PAnsiChar; factory: IUdrFunctionFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrPluginImpl(this.Versioned.SelfObject).registerFunction(status, name, factory);
{$ELSE !WITH_RECORD_METHODS}
  IUdrPluginImpl(this).registerFunction(status, name, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrPluginImpl_registerProcedureDispatcher(this: IUdrPlugin; status: IStatus; name: PAnsiChar; factory: IUdrProcedureFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrPluginImpl(this.Versioned.SelfObject).registerProcedure(status, name, factory);
{$ELSE !WITH_RECORD_METHODS}
  IUdrPluginImpl(this).registerProcedure(status, name, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IUdrPluginImpl_registerTriggerDispatcher(this: IUdrPlugin; status: IStatus; name: PAnsiChar; factory: IUdrTriggerFactory); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IUdrPluginImpl(this.Versioned.SelfObject).registerTrigger(status, name, factory);
{$ELSE !WITH_RECORD_METHODS}
  IUdrPluginImpl(this).registerTrigger(status, name, factory);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IUdrPluginImpl_vTable: TUdrPluginVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIUdrPlugin_VERSION);
    getMaster: IUdrPluginImpl_getMasterDispatcher;
    registerFunction: IUdrPluginImpl_registerFunctionDispatcher;
    registerProcedure: IUdrPluginImpl_registerProcedureDispatcher;
    registerTrigger: IUdrPluginImpl_registerTriggerDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IUdrPluginImpl_vTable: TUdrPluginVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IUdrPluginImpl.AsIUdrPlugin: IUdrPlugin;
begin
  Result := IUdrPlugin(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IUdrPluginImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IUdrPluginImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IUdrPluginImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat16Impl_toBcdDispatcher(this: IDecFloat16; from: PFB_DEC16; sign: PInteger; bcd: PByte; exp: PInteger); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat16Impl(this.Versioned.SelfObject).toBcd(from, sign, bcd, exp);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat16Impl(this).toBcd(from, sign, bcd, exp);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat16Impl_toStringDispatcher(this: IDecFloat16; status: IStatus; from: PFB_DEC16; bufferLength: Cardinal; buffer: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat16Impl(this.Versioned.SelfObject).toString(status, from, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat16Impl(this).toString(status, from, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat16Impl_fromBcdDispatcher(this: IDecFloat16; sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC16); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat16Impl(this.Versioned.SelfObject).fromBcd(sign, bcd, exp, to_);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat16Impl(this).fromBcd(sign, bcd, exp, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat16Impl_fromStringDispatcher(this: IDecFloat16; status: IStatus; from: PAnsiChar; to_: PFB_DEC16); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat16Impl(this.Versioned.SelfObject).fromString(status, from, to_);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat16Impl(this).fromString(status, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat16Impl_vTable: TDecFloat16VTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIDecFloat16_VERSION);
    toBcd: IDecFloat16Impl_toBcdDispatcher;
    toString: IDecFloat16Impl_toStringDispatcher;
    fromBcd: IDecFloat16Impl_fromBcdDispatcher;
    fromString: IDecFloat16Impl_fromStringDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat16Impl_vTable: TDecFloat16VTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IDecFloat16Impl.AsIDecFloat16: IDecFloat16;
begin
  Result := IDecFloat16(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IDecFloat16Impl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IDecFloat16Impl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IDecFloat16Impl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat34Impl_toBcdDispatcher(this: IDecFloat34; from: PFB_DEC34; sign: PInteger; bcd: PByte; exp: PInteger); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat34Impl(this.Versioned.SelfObject).toBcd(from, sign, bcd, exp);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat34Impl(this).toBcd(from, sign, bcd, exp);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat34Impl_toStringDispatcher(this: IDecFloat34; status: IStatus; from: PFB_DEC34; bufferLength: Cardinal; buffer: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat34Impl(this.Versioned.SelfObject).toString(status, from, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat34Impl(this).toString(status, from, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat34Impl_fromBcdDispatcher(this: IDecFloat34; sign: Integer; bcd: PByte; exp: Integer; to_: PFB_DEC34); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat34Impl(this.Versioned.SelfObject).fromBcd(sign, bcd, exp, to_);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat34Impl(this).fromBcd(sign, bcd, exp, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IDecFloat34Impl_fromStringDispatcher(this: IDecFloat34; status: IStatus; from: PAnsiChar; to_: PFB_DEC34); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat34Impl(this.Versioned.SelfObject).fromString(status, from, to_);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat34Impl(this).fromString(status, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IDecFloat34Impl_vTable: TDecFloat34VTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIDecFloat34_VERSION);
    toBcd: IDecFloat34Impl_toBcdDispatcher;
    toString: IDecFloat34Impl_toStringDispatcher;
    fromBcd: IDecFloat34Impl_fromBcdDispatcher;
    fromString: IDecFloat34Impl_fromStringDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IDecFloat34Impl_vTable: TDecFloat34VTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IDecFloat34Impl.AsIDecFloat34: IDecFloat34;
begin
  Result := IDecFloat34(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IDecFloat34Impl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IDecFloat34Impl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IDecFloat34Impl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IInt128Impl_toStringDispatcher(this: IInt128; status: IStatus; from: PFB_I128; scale: Integer; bufferLength: Cardinal; buffer: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IInt128Impl(this.Versioned.SelfObject).toString(status, from, scale, bufferLength, buffer);
{$ELSE !WITH_RECORD_METHODS}
  IInt128Impl(this).toString(status, from, scale, bufferLength, buffer);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IInt128Impl_fromStringDispatcher(this: IInt128; status: IStatus; scale: Integer; from: PAnsiChar; to_: PFB_I128); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IInt128Impl(this.Versioned.SelfObject).fromString(status, scale, from, to_);
{$ELSE !WITH_RECORD_METHODS}
  IInt128Impl(this).fromString(status, scale, from, to_);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IInt128Impl_vTable: TInt128VTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIInt128_VERSION);
    toString: IInt128Impl_toStringDispatcher;
    fromString: IInt128Impl_fromStringDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IInt128Impl_vTable: TInt128VTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IInt128Impl.AsIInt128: IInt128;
begin
  Result := IInt128(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IInt128Impl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IInt128Impl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IInt128Impl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedFieldImpl_getNameDispatcher(this: IReplicatedField): PAnsiChar; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this.Versioned.SelfObject).getName();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this).getName();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedFieldImpl_getTypeDispatcher(this: IReplicatedField): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this.Versioned.SelfObject).getType();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this).getType();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedFieldImpl_getSubTypeDispatcher(this: IReplicatedField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this.Versioned.SelfObject).getSubType();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this).getSubType();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedFieldImpl_getScaleDispatcher(this: IReplicatedField): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this.Versioned.SelfObject).getScale();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this).getScale();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedFieldImpl_getLengthDispatcher(this: IReplicatedField): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this.Versioned.SelfObject).getLength();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this).getLength();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedFieldImpl_getCharSetDispatcher(this: IReplicatedField): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this.Versioned.SelfObject).getCharSet();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this).getCharSet();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedFieldImpl_getDataDispatcher(this: IReplicatedField): Pointer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this.Versioned.SelfObject).getData();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedFieldImpl(this).getData();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedFieldImpl_vTable: TReplicatedFieldVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIReplicatedField_VERSION);
    getName: IReplicatedFieldImpl_getNameDispatcher;
    getType: IReplicatedFieldImpl_getTypeDispatcher;
    getSubType: IReplicatedFieldImpl_getSubTypeDispatcher;
    getScale: IReplicatedFieldImpl_getScaleDispatcher;
    getLength: IReplicatedFieldImpl_getLengthDispatcher;
    getCharSet: IReplicatedFieldImpl_getCharSetDispatcher;
    getData: IReplicatedFieldImpl_getDataDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedFieldImpl_vTable: TReplicatedFieldVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IReplicatedFieldImpl.AsIReplicatedField: IReplicatedField;
begin
  Result := IReplicatedField(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IReplicatedFieldImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IReplicatedFieldImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IReplicatedFieldImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedRecordImpl_getCountDispatcher(this: IReplicatedRecord): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this.Versioned.SelfObject).getCount();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this).getCount();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedRecordImpl_getFieldDispatcher(this: IReplicatedRecord; index: Cardinal): IReplicatedField; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this.Versioned.SelfObject).getField(index);
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this).getField(index);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedRecordImpl_getRawLengthDispatcher(this: IReplicatedRecord): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this.Versioned.SelfObject).getRawLength();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this).getRawLength();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedRecordImpl_getRawDataDispatcher(this: IReplicatedRecord): PByte; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this.Versioned.SelfObject).getRawData();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedRecordImpl(this).getRawData();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedRecordImpl_vTable: TReplicatedRecordVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIReplicatedRecord_VERSION);
    getCount: IReplicatedRecordImpl_getCountDispatcher;
    getField: IReplicatedRecordImpl_getFieldDispatcher;
    getRawLength: IReplicatedRecordImpl_getRawLengthDispatcher;
    getRawData: IReplicatedRecordImpl_getRawDataDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedRecordImpl_vTable: TReplicatedRecordVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IReplicatedRecordImpl.AsIReplicatedRecord: IReplicatedRecord;
begin
  Result := IReplicatedRecord(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IReplicatedRecordImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IReplicatedRecordImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IReplicatedRecordImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_disposeDispatcher(this: IReplicatedTransaction); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_prepareDispatcher(this: IReplicatedTransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).prepare(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).prepare(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_commitDispatcher(this: IReplicatedTransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).commit(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).commit(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_rollbackDispatcher(this: IReplicatedTransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).rollback(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).rollback(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_startSavepointDispatcher(this: IReplicatedTransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).startSavepoint(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).startSavepoint(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_releaseSavepointDispatcher(this: IReplicatedTransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).releaseSavepoint(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).releaseSavepoint(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_rollbackSavepointDispatcher(this: IReplicatedTransaction; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).rollbackSavepoint(status);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).rollbackSavepoint(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_insertRecordDispatcher(this: IReplicatedTransaction; status: IStatus; name: PAnsiChar; record_: IReplicatedRecord); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).insertRecord(status, name, record_);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).insertRecord(status, name, record_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_updateRecordDispatcher(this: IReplicatedTransaction; status: IStatus; name: PAnsiChar; orgRecord: IReplicatedRecord; newRecord: IReplicatedRecord); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).updateRecord(status, name, orgRecord, newRecord);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).updateRecord(status, name, orgRecord, newRecord);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_deleteRecordDispatcher(this: IReplicatedTransaction; status: IStatus; name: PAnsiChar; record_: IReplicatedRecord); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).deleteRecord(status, name, record_);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).deleteRecord(status, name, record_);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_executeSqlDispatcher(this: IReplicatedTransaction; status: IStatus; sql: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).executeSql(status, sql);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).executeSql(status, sql);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedTransactionImpl_executeSqlIntlDispatcher(this: IReplicatedTransaction; status: IStatus; charset: Cardinal; sql: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this.Disposable.Versioned.SelfObject).executeSqlIntl(status, charset, sql);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl(this).executeSqlIntl(status, charset, sql);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedTransactionImpl_vTable: TReplicatedTransactionVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIReplicatedTransaction_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    prepare: IReplicatedTransactionImpl_prepareDispatcher;
    commit: IReplicatedTransactionImpl_commitDispatcher;
    rollback: IReplicatedTransactionImpl_rollbackDispatcher;
    startSavepoint: IReplicatedTransactionImpl_startSavepointDispatcher;
    releaseSavepoint: IReplicatedTransactionImpl_releaseSavepointDispatcher;
    rollbackSavepoint: IReplicatedTransactionImpl_rollbackSavepointDispatcher;
    insertRecord: IReplicatedTransactionImpl_insertRecordDispatcher;
    updateRecord: IReplicatedTransactionImpl_updateRecordDispatcher;
    deleteRecord: IReplicatedTransactionImpl_deleteRecordDispatcher;
    executeSql: IReplicatedTransactionImpl_executeSqlDispatcher;
    executeSqlIntl: IReplicatedTransactionImpl_executeSqlIntlDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedTransactionImpl_vTable: TReplicatedTransactionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IReplicatedTransactionImpl.AsIReplicatedTransaction: IReplicatedTransaction;
begin
  Result := IReplicatedTransaction(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IReplicatedTransactionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IReplicatedTransactionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IReplicatedTransactionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedSessionImpl_addRefDispatcher(this: IReplicatedSession); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedSessionImpl_releaseDispatcher(this: IReplicatedSession): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedSessionImpl_setOwnerDispatcher(this: IReplicatedSession; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedSessionImpl_getOwnerDispatcher(this: IReplicatedSession): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedSessionImpl_initDispatcher(this: IReplicatedSession; status: IStatus; attachment: IAttachment): Boolean; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).init(status, attachment);
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this).init(status, attachment);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IReplicatedSessionImpl_startTransactionDispatcher(this: IReplicatedSession; status: IStatus; transaction: ITransaction; number: Int64): IReplicatedTransaction; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).startTransaction(status, transaction, number);
{$ELSE !WITH_RECORD_METHODS}
  Result := IReplicatedSessionImpl(this).startTransaction(status, transaction, number);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedSessionImpl_cleanupTransactionDispatcher(this: IReplicatedSession; status: IStatus; number: Int64); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).cleanupTransaction(status, number);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this).cleanupTransaction(status, number);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IReplicatedSessionImpl_setSequenceDispatcher(this: IReplicatedSession; status: IStatus; name: PAnsiChar; value: Int64); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setSequence(status, name, value);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedSessionImpl(this).setSequence(status, name, value);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IReplicatedSessionImpl_vTable: TReplicatedSessionVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIReplicatedSession_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    init: IReplicatedSessionImpl_initDispatcher;
    startTransaction: IReplicatedSessionImpl_startTransactionDispatcher;
    cleanupTransaction: IReplicatedSessionImpl_cleanupTransactionDispatcher;
    setSequence: IReplicatedSessionImpl_setSequenceDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IReplicatedSessionImpl_vTable: TReplicatedSessionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IReplicatedSessionImpl.AsIReplicatedSession: IReplicatedSession;
begin
  Result := IReplicatedSession(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IReplicatedSessionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IReplicatedSessionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IReplicatedSessionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerPluginImpl_addRefDispatcher(this: IProfilerPlugin); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).addRef();
{$ELSE !WITH_RECORD_METHODS}
  IProfilerPluginImpl(this).addRef();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProfilerPluginImpl_releaseDispatcher(this: IProfilerPlugin): Integer; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProfilerPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).release();
{$ELSE !WITH_RECORD_METHODS}
  Result := IProfilerPluginImpl(this).release();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerPluginImpl_setOwnerDispatcher(this: IProfilerPlugin; r: IReferenceCounted); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).setOwner(r);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerPluginImpl(this).setOwner(r);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProfilerPluginImpl_getOwnerDispatcher(this: IProfilerPlugin): IReferenceCounted; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProfilerPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).getOwner();
{$ELSE !WITH_RECORD_METHODS}
  Result := IProfilerPluginImpl(this).getOwner();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerPluginImpl_initDispatcher(this: IProfilerPlugin; status: IStatus; attachment: IAttachment; ticksFrequency: UInt64); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).init(status, attachment, ticksFrequency);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerPluginImpl(this).init(status, attachment, ticksFrequency);
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProfilerPluginImpl_startSessionDispatcher(this: IProfilerPlugin; status: IStatus; description: PAnsiChar; options: PAnsiChar; timestamp: TISC_TIMESTAMP_TZ): IProfilerSession; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProfilerPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).startSession(status, description, options, timestamp);
{$ELSE !WITH_RECORD_METHODS}
  Result := IProfilerPluginImpl(this).startSession(status, description, options, timestamp);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerPluginImpl_flushDispatcher(this: IProfilerPlugin; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerPluginImpl(this.PluginBase.ReferenceCounted.Versioned.SelfObject).flush(status);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerPluginImpl(this).flush(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IProfilerPluginImpl_vTable: TProfilerPluginVTable = (
    PluginBaseVTable: (
      ReferenceCountedVTable: (
        VersionedVTable: (
          SelfOffsetPtr: nil; version: cIProfilerPlugin_VERSION);
        addRef: IReferenceCountedImpl_addRefDispatcher;
        release: IReferenceCountedImpl_releaseDispatcher);
      setOwner: IPluginBaseImpl_setOwnerDispatcher;
      getOwner: IPluginBaseImpl_getOwnerDispatcher);
    init: IProfilerPluginImpl_initDispatcher;
    startSession: IProfilerPluginImpl_startSessionDispatcher;
    flush: IProfilerPluginImpl_flushDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerPluginImpl_vTable: TProfilerPluginVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IProfilerPluginImpl.AsIProfilerPlugin: IProfilerPlugin;
begin
  Result := IProfilerPlugin(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IProfilerPluginImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IProfilerPluginImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IProfilerPluginImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_disposeDispatcher(this: IProfilerSession); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).dispose();
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).dispose();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProfilerSessionImpl_getIdDispatcher(this: IProfilerSession): Int64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).getId();
{$ELSE !WITH_RECORD_METHODS}
  Result := IProfilerSessionImpl(this).getId();
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProfilerSessionImpl_getFlagsDispatcher(this: IProfilerSession): Cardinal; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).getFlags();
{$ELSE !WITH_RECORD_METHODS}
  Result := IProfilerSessionImpl(this).getFlags();
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_cancelDispatcher(this: IProfilerSession; status: IStatus); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).cancel(status);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).cancel(status);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_finishDispatcher(this: IProfilerSession; status: IStatus; timestamp: TISC_TIMESTAMP_TZ); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).finish(status, timestamp);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).finish(status, timestamp);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_defineStatementDispatcher(this: IProfilerSession; status: IStatus; statementId: Int64; parentStatementId: Int64; type_: PAnsiChar; packageName: PAnsiChar; routineName: PAnsiChar; sqlText: PAnsiChar); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).defineStatement(status, statementId, parentStatementId, type_, packageName, routineName, sqlText);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).defineStatement(status, statementId, parentStatementId, type_, packageName, routineName, sqlText);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_defineCursorDispatcher(this: IProfilerSession; statementId: Int64; cursorId: Cardinal; name: PAnsiChar; line: Cardinal; column: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).defineCursor(statementId, cursorId, name, line, column);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).defineCursor(statementId, cursorId, name, line, column);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_defineRecordSourceDispatcher(this: IProfilerSession; statementId: Int64; cursorId: Cardinal; recSourceId: Cardinal; level: Cardinal; accessPath: PAnsiChar; parentRecSourceId: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).defineRecordSource(statementId, cursorId, recSourceId, level, accessPath, parentRecSourceId);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).defineRecordSource(statementId, cursorId, recSourceId, level, accessPath, parentRecSourceId);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_onRequestStartDispatcher(this: IProfilerSession; status: IStatus; statementId: Int64; requestId: Int64; callerStatementId: Int64; callerRequestId: Int64; timestamp: TISC_TIMESTAMP_TZ); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).onRequestStart(status, statementId, requestId, callerStatementId, callerRequestId, timestamp);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).onRequestStart(status, statementId, requestId, callerStatementId, callerRequestId, timestamp);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_onRequestFinishDispatcher(this: IProfilerSession; status: IStatus; statementId: Int64; requestId: Int64; timestamp: TISC_TIMESTAMP_TZ; stats: IProfilerStats); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).onRequestFinish(status, statementId, requestId, timestamp, stats);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).onRequestFinish(status, statementId, requestId, timestamp, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_beforePsqlLineColumnDispatcher(this: IProfilerSession; statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).beforePsqlLineColumn(statementId, requestId, line, column);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).beforePsqlLineColumn(statementId, requestId, line, column);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_afterPsqlLineColumnDispatcher(this: IProfilerSession; statementId: Int64; requestId: Int64; line: Cardinal; column: Cardinal; stats: IProfilerStats); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).afterPsqlLineColumn(statementId, requestId, line, column, stats);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).afterPsqlLineColumn(statementId, requestId, line, column, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_beforeRecordSourceOpenDispatcher(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).beforeRecordSourceOpen(statementId, requestId, cursorId, recSourceId);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).beforeRecordSourceOpen(statementId, requestId, cursorId, recSourceId);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_afterRecordSourceOpenDispatcher(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).afterRecordSourceOpen(statementId, requestId, cursorId, recSourceId, stats);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).afterRecordSourceOpen(statementId, requestId, cursorId, recSourceId, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_beforeRecordSourceGetRecordDispatcher(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).beforeRecordSourceGetRecord(statementId, requestId, cursorId, recSourceId);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).beforeRecordSourceGetRecord(statementId, requestId, cursorId, recSourceId);
{$ENDIF !WITH_RECORD_METHODS}
end;

procedure IProfilerSessionImpl_afterRecordSourceGetRecordDispatcher(this: IProfilerSession; statementId: Int64; requestId: Int64; cursorId: Cardinal; recSourceId: Cardinal; stats: IProfilerStats); cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl(this.Disposable.Versioned.SelfObject).afterRecordSourceGetRecord(statementId, requestId, cursorId, recSourceId, stats);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl(this).afterRecordSourceGetRecord(statementId, requestId, cursorId, recSourceId, stats);
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IProfilerSessionImpl_vTable: TProfilerSessionVTable = (
    DisposableVTable: (
      VersionedVTable: (
        SelfOffsetPtr: nil; version: cIProfilerSession_VERSION);
      dispose: IDisposableImpl_disposeDispatcher);
    getId: IProfilerSessionImpl_getIdDispatcher;
    getFlags: IProfilerSessionImpl_getFlagsDispatcher;
    cancel: IProfilerSessionImpl_cancelDispatcher;
    finish: IProfilerSessionImpl_finishDispatcher;
    defineStatement: IProfilerSessionImpl_defineStatementDispatcher;
    defineCursor: IProfilerSessionImpl_defineCursorDispatcher;
    defineRecordSource: IProfilerSessionImpl_defineRecordSourceDispatcher;
    onRequestStart: IProfilerSessionImpl_onRequestStartDispatcher;
    onRequestFinish: IProfilerSessionImpl_onRequestFinishDispatcher;
    beforePsqlLineColumn: IProfilerSessionImpl_beforePsqlLineColumnDispatcher;
    afterPsqlLineColumn: IProfilerSessionImpl_afterPsqlLineColumnDispatcher;
    beforeRecordSourceOpen: IProfilerSessionImpl_beforeRecordSourceOpenDispatcher;
    afterRecordSourceOpen: IProfilerSessionImpl_afterRecordSourceOpenDispatcher;
    beforeRecordSourceGetRecord: IProfilerSessionImpl_beforeRecordSourceGetRecordDispatcher;
    afterRecordSourceGetRecord: IProfilerSessionImpl_afterRecordSourceGetRecordDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerSessionImpl_vTable: TProfilerSessionVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IProfilerSessionImpl.AsIProfilerSession: IProfilerSession;
begin
  Result := IProfilerSession(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IProfilerSessionImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IProfilerSessionImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IProfilerSessionImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

function IProfilerStatsImpl_getElapsedTicksDispatcher(this: IProfilerStats): UInt64; cdecl;
begin
{$IFDEF WITH_RECORD_METHODS}
  Result := IProfilerStatsImpl(this.Versioned.SelfObject).getElapsedTicks();
{$ELSE !WITH_RECORD_METHODS}
  Result := IProfilerStatsImpl(this).getElapsedTicks();
{$ENDIF !WITH_RECORD_METHODS}
end;

var
{$IFDEF WITH_RECORD_METHODS}
  IProfilerStatsImpl_vTable: TProfilerStatsVTable = (
    VersionedVTable: (
      SelfOffsetPtr: nil; version: cIProfilerStats_VERSION);
    getElapsedTicks: IProfilerStatsImpl_getElapsedTicksDispatcher);
{$ELSE !WITH_RECORD_METHODS}
  IProfilerStatsImpl_vTable: TProfilerStatsVTable;
{$ENDIF !WITH_RECORD_METHODS}

{$IFDEF WITH_RECORD_METHODS}
function IProfilerStatsImpl.AsIProfilerStats: IProfilerStats;
begin
  Result := IProfilerStats(@SelfOffsetPtr)
end;
{$ENDIF !WITH_RECORD_METHODS}

constructor IProfilerStatsImpl.create;
begin
{$IFDEF WITH_RECORD_METHODS}
  SelfObject := Self;
  vTable := @IProfilerStatsImpl_vTable;
{$ELSE !WITH_RECORD_METHODS}
  vTable := IProfilerStatsImpl_vTable;
{$ENDIF !WITH_RECORD_METHODS}
end;

{$IFNDEF WITH_RECORD_METHODS}
initialization
  IVersionedImpl_vTable := TVersionedVTable.create;
  IVersionedImpl_vTable.version := cIVersioned_VERSION;

  IReferenceCountedImpl_vTable := TReferenceCountedVTable.create;
  IReferenceCountedImpl_vTable.version := cIReferenceCounted_VERSION;
  IReferenceCountedImpl_vTable.addRef := @IReferenceCountedImpl_addRefDispatcher;
  IReferenceCountedImpl_vTable.release := @IReferenceCountedImpl_releaseDispatcher;

  IDisposableImpl_vTable := TDisposableVTable.create;
  IDisposableImpl_vTable.version := cIDisposable_VERSION;
  IDisposableImpl_vTable.dispose := @IDisposableImpl_disposeDispatcher;

  IStatusImpl_vTable := TStatusVTable.create;
  IStatusImpl_vTable.version := cIStatus_VERSION;
  IStatusImpl_vTable.dispose := @IStatusImpl_disposeDispatcher;
  IStatusImpl_vTable.init := @IStatusImpl_initDispatcher;
  IStatusImpl_vTable.getState := @IStatusImpl_getStateDispatcher;
  IStatusImpl_vTable.setErrors2 := @IStatusImpl_setErrors2Dispatcher;
  IStatusImpl_vTable.setWarnings2 := @IStatusImpl_setWarnings2Dispatcher;
  IStatusImpl_vTable.setErrors := @IStatusImpl_setErrorsDispatcher;
  IStatusImpl_vTable.setWarnings := @IStatusImpl_setWarningsDispatcher;
  IStatusImpl_vTable.getErrors := @IStatusImpl_getErrorsDispatcher;
  IStatusImpl_vTable.getWarnings := @IStatusImpl_getWarningsDispatcher;
  IStatusImpl_vTable.clone := @IStatusImpl_cloneDispatcher;

  IMasterImpl_vTable := TMasterVTable.create;
  IMasterImpl_vTable.version := cIMaster_VERSION;
  IMasterImpl_vTable.getStatus := @IMasterImpl_getStatusDispatcher;
  IMasterImpl_vTable.getDispatcher := @IMasterImpl_getDispatcherDispatcher;
  IMasterImpl_vTable.getPluginManager := @IMasterImpl_getPluginManagerDispatcher;
  IMasterImpl_vTable.getTimerControl := @IMasterImpl_getTimerControlDispatcher;
  IMasterImpl_vTable.getDtc := @IMasterImpl_getDtcDispatcher;
  IMasterImpl_vTable.registerAttachment := @IMasterImpl_registerAttachmentDispatcher;
  IMasterImpl_vTable.registerTransaction := @IMasterImpl_registerTransactionDispatcher;
  IMasterImpl_vTable.getMetadataBuilder := @IMasterImpl_getMetadataBuilderDispatcher;
  IMasterImpl_vTable.serverMode := @IMasterImpl_serverModeDispatcher;
  IMasterImpl_vTable.getUtilInterface := @IMasterImpl_getUtilInterfaceDispatcher;
  IMasterImpl_vTable.getConfigManager := @IMasterImpl_getConfigManagerDispatcher;
  IMasterImpl_vTable.getProcessExiting := @IMasterImpl_getProcessExitingDispatcher;

  IPluginBaseImpl_vTable := TPluginBaseVTable.create;
  IPluginBaseImpl_vTable.version := cIPluginBase_VERSION;
  IPluginBaseImpl_vTable.addRef := @IPluginBaseImpl_addRefDispatcher;
  IPluginBaseImpl_vTable.release := @IPluginBaseImpl_releaseDispatcher;
  IPluginBaseImpl_vTable.setOwner := @IPluginBaseImpl_setOwnerDispatcher;
  IPluginBaseImpl_vTable.getOwner := @IPluginBaseImpl_getOwnerDispatcher;

  IPluginSetImpl_vTable := TPluginSetVTable.create;
  IPluginSetImpl_vTable.version := cIPluginSet_VERSION;
  IPluginSetImpl_vTable.addRef := @IPluginSetImpl_addRefDispatcher;
  IPluginSetImpl_vTable.release := @IPluginSetImpl_releaseDispatcher;
  IPluginSetImpl_vTable.getName := @IPluginSetImpl_getNameDispatcher;
  IPluginSetImpl_vTable.getModuleName := @IPluginSetImpl_getModuleNameDispatcher;
  IPluginSetImpl_vTable.getPlugin := @IPluginSetImpl_getPluginDispatcher;
  IPluginSetImpl_vTable.next := @IPluginSetImpl_nextDispatcher;
  IPluginSetImpl_vTable.set_ := @IPluginSetImpl_set_Dispatcher;

  IConfigEntryImpl_vTable := TConfigEntryVTable.create;
  IConfigEntryImpl_vTable.version := cIConfigEntry_VERSION;
  IConfigEntryImpl_vTable.addRef := @IConfigEntryImpl_addRefDispatcher;
  IConfigEntryImpl_vTable.release := @IConfigEntryImpl_releaseDispatcher;
  IConfigEntryImpl_vTable.getName := @IConfigEntryImpl_getNameDispatcher;
  IConfigEntryImpl_vTable.getValue := @IConfigEntryImpl_getValueDispatcher;
  IConfigEntryImpl_vTable.getIntValue := @IConfigEntryImpl_getIntValueDispatcher;
  IConfigEntryImpl_vTable.getBoolValue := @IConfigEntryImpl_getBoolValueDispatcher;
  IConfigEntryImpl_vTable.getSubConfig := @IConfigEntryImpl_getSubConfigDispatcher;

  IConfigImpl_vTable := TConfigVTable.create;
  IConfigImpl_vTable.version := cIConfig_VERSION;
  IConfigImpl_vTable.addRef := @IConfigImpl_addRefDispatcher;
  IConfigImpl_vTable.release := @IConfigImpl_releaseDispatcher;
  IConfigImpl_vTable.find := @IConfigImpl_findDispatcher;
  IConfigImpl_vTable.findValue := @IConfigImpl_findValueDispatcher;
  IConfigImpl_vTable.findPos := @IConfigImpl_findPosDispatcher;

  IFirebirdConfImpl_vTable := TFirebirdConfVTable.create;
  IFirebirdConfImpl_vTable.version := cIFirebirdConf_VERSION;
  IFirebirdConfImpl_vTable.addRef := @IFirebirdConfImpl_addRefDispatcher;
  IFirebirdConfImpl_vTable.release := @IFirebirdConfImpl_releaseDispatcher;
  IFirebirdConfImpl_vTable.getKey := @IFirebirdConfImpl_getKeyDispatcher;
  IFirebirdConfImpl_vTable.asInteger := @IFirebirdConfImpl_asIntegerDispatcher;
  IFirebirdConfImpl_vTable.asString := @IFirebirdConfImpl_asStringDispatcher;
  IFirebirdConfImpl_vTable.asBoolean := @IFirebirdConfImpl_asBooleanDispatcher;
  IFirebirdConfImpl_vTable.getVersion := @IFirebirdConfImpl_getVersionDispatcher;

  IPluginConfigImpl_vTable := TPluginConfigVTable.create;
  IPluginConfigImpl_vTable.version := cIPluginConfig_VERSION;
  IPluginConfigImpl_vTable.addRef := @IPluginConfigImpl_addRefDispatcher;
  IPluginConfigImpl_vTable.release := @IPluginConfigImpl_releaseDispatcher;
  IPluginConfigImpl_vTable.getConfigFileName := @IPluginConfigImpl_getConfigFileNameDispatcher;
  IPluginConfigImpl_vTable.getDefaultConfig := @IPluginConfigImpl_getDefaultConfigDispatcher;
  IPluginConfigImpl_vTable.getFirebirdConf := @IPluginConfigImpl_getFirebirdConfDispatcher;
  IPluginConfigImpl_vTable.setReleaseDelay := @IPluginConfigImpl_setReleaseDelayDispatcher;

  IPluginFactoryImpl_vTable := TPluginFactoryVTable.create;
  IPluginFactoryImpl_vTable.version := cIPluginFactory_VERSION;
  IPluginFactoryImpl_vTable.createPlugin := @IPluginFactoryImpl_createPluginDispatcher;

  IPluginModuleImpl_vTable := TPluginModuleVTable.create;
  IPluginModuleImpl_vTable.version := cIPluginModule_VERSION;
  IPluginModuleImpl_vTable.doClean := @IPluginModuleImpl_doCleanDispatcher;
  IPluginModuleImpl_vTable.threadDetach := @IPluginModuleImpl_threadDetachDispatcher;

  IPluginManagerImpl_vTable := TPluginManagerVTable.create;
  IPluginManagerImpl_vTable.version := cIPluginManager_VERSION;
  IPluginManagerImpl_vTable.registerPluginFactory := @IPluginManagerImpl_registerPluginFactoryDispatcher;
  IPluginManagerImpl_vTable.registerModule := @IPluginManagerImpl_registerModuleDispatcher;
  IPluginManagerImpl_vTable.unregisterModule := @IPluginManagerImpl_unregisterModuleDispatcher;
  IPluginManagerImpl_vTable.getPlugins := @IPluginManagerImpl_getPluginsDispatcher;
  IPluginManagerImpl_vTable.getConfig := @IPluginManagerImpl_getConfigDispatcher;
  IPluginManagerImpl_vTable.releasePlugin := @IPluginManagerImpl_releasePluginDispatcher;

  ICryptKeyImpl_vTable := TCryptKeyVTable.create;
  ICryptKeyImpl_vTable.version := cICryptKey_VERSION;
  ICryptKeyImpl_vTable.setSymmetric := @ICryptKeyImpl_setSymmetricDispatcher;
  ICryptKeyImpl_vTable.setAsymmetric := @ICryptKeyImpl_setAsymmetricDispatcher;
  ICryptKeyImpl_vTable.getEncryptKey := @ICryptKeyImpl_getEncryptKeyDispatcher;
  ICryptKeyImpl_vTable.getDecryptKey := @ICryptKeyImpl_getDecryptKeyDispatcher;

  IConfigManagerImpl_vTable := TConfigManagerVTable.create;
  IConfigManagerImpl_vTable.version := cIConfigManager_VERSION;
  IConfigManagerImpl_vTable.getDirectory := @IConfigManagerImpl_getDirectoryDispatcher;
  IConfigManagerImpl_vTable.getFirebirdConf := @IConfigManagerImpl_getFirebirdConfDispatcher;
  IConfigManagerImpl_vTable.getDatabaseConf := @IConfigManagerImpl_getDatabaseConfDispatcher;
  IConfigManagerImpl_vTable.getPluginConfig := @IConfigManagerImpl_getPluginConfigDispatcher;
  IConfigManagerImpl_vTable.getInstallDirectory := @IConfigManagerImpl_getInstallDirectoryDispatcher;
  IConfigManagerImpl_vTable.getRootDirectory := @IConfigManagerImpl_getRootDirectoryDispatcher;
  IConfigManagerImpl_vTable.getDefaultSecurityDb := @IConfigManagerImpl_getDefaultSecurityDbDispatcher;

  IEventCallbackImpl_vTable := TEventCallbackVTable.create;
  IEventCallbackImpl_vTable.version := cIEventCallback_VERSION;
  IEventCallbackImpl_vTable.addRef := @IEventCallbackImpl_addRefDispatcher;
  IEventCallbackImpl_vTable.release := @IEventCallbackImpl_releaseDispatcher;
  IEventCallbackImpl_vTable.eventCallbackFunction := @IEventCallbackImpl_eventCallbackFunctionDispatcher;

  IBlobImpl_vTable := TBlobVTable.create;
  IBlobImpl_vTable.version := cIBlob_VERSION;
  IBlobImpl_vTable.addRef := @IBlobImpl_addRefDispatcher;
  IBlobImpl_vTable.release := @IBlobImpl_releaseDispatcher;
  IBlobImpl_vTable.getInfo := @IBlobImpl_getInfoDispatcher;
  IBlobImpl_vTable.getSegment := @IBlobImpl_getSegmentDispatcher;
  IBlobImpl_vTable.putSegment := @IBlobImpl_putSegmentDispatcher;
  IBlobImpl_vTable.deprecatedCancel := @IBlobImpl_deprecatedCancelDispatcher;
  IBlobImpl_vTable.deprecatedClose := @IBlobImpl_deprecatedCloseDispatcher;
  IBlobImpl_vTable.seek := @IBlobImpl_seekDispatcher;
  IBlobImpl_vTable.cancel := @IBlobImpl_cancelDispatcher;
  IBlobImpl_vTable.close := @IBlobImpl_closeDispatcher;

  ITransactionImpl_vTable := TTransactionVTable.create;
  ITransactionImpl_vTable.version := cITransaction_VERSION;
  ITransactionImpl_vTable.addRef := @ITransactionImpl_addRefDispatcher;
  ITransactionImpl_vTable.release := @ITransactionImpl_releaseDispatcher;
  ITransactionImpl_vTable.getInfo := @ITransactionImpl_getInfoDispatcher;
  ITransactionImpl_vTable.prepare := @ITransactionImpl_prepareDispatcher;
  ITransactionImpl_vTable.deprecatedCommit := @ITransactionImpl_deprecatedCommitDispatcher;
  ITransactionImpl_vTable.commitRetaining := @ITransactionImpl_commitRetainingDispatcher;
  ITransactionImpl_vTable.deprecatedRollback := @ITransactionImpl_deprecatedRollbackDispatcher;
  ITransactionImpl_vTable.rollbackRetaining := @ITransactionImpl_rollbackRetainingDispatcher;
  ITransactionImpl_vTable.deprecatedDisconnect := @ITransactionImpl_deprecatedDisconnectDispatcher;
  ITransactionImpl_vTable.join := @ITransactionImpl_joinDispatcher;
  ITransactionImpl_vTable.validate := @ITransactionImpl_validateDispatcher;
  ITransactionImpl_vTable.enterDtc := @ITransactionImpl_enterDtcDispatcher;
  ITransactionImpl_vTable.commit := @ITransactionImpl_commitDispatcher;
  ITransactionImpl_vTable.rollback := @ITransactionImpl_rollbackDispatcher;
  ITransactionImpl_vTable.disconnect := @ITransactionImpl_disconnectDispatcher;

  IMessageMetadataImpl_vTable := TMessageMetadataVTable.create;
  IMessageMetadataImpl_vTable.version := cIMessageMetadata_VERSION;
  IMessageMetadataImpl_vTable.addRef := @IMessageMetadataImpl_addRefDispatcher;
  IMessageMetadataImpl_vTable.release := @IMessageMetadataImpl_releaseDispatcher;
  IMessageMetadataImpl_vTable.getCount := @IMessageMetadataImpl_getCountDispatcher;
  IMessageMetadataImpl_vTable.getField := @IMessageMetadataImpl_getFieldDispatcher;
  IMessageMetadataImpl_vTable.getRelation := @IMessageMetadataImpl_getRelationDispatcher;
  IMessageMetadataImpl_vTable.getOwner := @IMessageMetadataImpl_getOwnerDispatcher;
  IMessageMetadataImpl_vTable.getAlias := @IMessageMetadataImpl_getAliasDispatcher;
  IMessageMetadataImpl_vTable.getType := @IMessageMetadataImpl_getTypeDispatcher;
  IMessageMetadataImpl_vTable.isNullable := @IMessageMetadataImpl_isNullableDispatcher;
  IMessageMetadataImpl_vTable.getSubType := @IMessageMetadataImpl_getSubTypeDispatcher;
  IMessageMetadataImpl_vTable.getLength := @IMessageMetadataImpl_getLengthDispatcher;
  IMessageMetadataImpl_vTable.getScale := @IMessageMetadataImpl_getScaleDispatcher;
  IMessageMetadataImpl_vTable.getCharSet := @IMessageMetadataImpl_getCharSetDispatcher;
  IMessageMetadataImpl_vTable.getOffset := @IMessageMetadataImpl_getOffsetDispatcher;
  IMessageMetadataImpl_vTable.getNullOffset := @IMessageMetadataImpl_getNullOffsetDispatcher;
  IMessageMetadataImpl_vTable.getBuilder := @IMessageMetadataImpl_getBuilderDispatcher;
  IMessageMetadataImpl_vTable.getMessageLength := @IMessageMetadataImpl_getMessageLengthDispatcher;
  IMessageMetadataImpl_vTable.getAlignment := @IMessageMetadataImpl_getAlignmentDispatcher;
  IMessageMetadataImpl_vTable.getAlignedLength := @IMessageMetadataImpl_getAlignedLengthDispatcher;

  IMetadataBuilderImpl_vTable := TMetadataBuilderVTable.create;
  IMetadataBuilderImpl_vTable.version := cIMetadataBuilder_VERSION;
  IMetadataBuilderImpl_vTable.addRef := @IMetadataBuilderImpl_addRefDispatcher;
  IMetadataBuilderImpl_vTable.release := @IMetadataBuilderImpl_releaseDispatcher;
  IMetadataBuilderImpl_vTable.setType := @IMetadataBuilderImpl_setTypeDispatcher;
  IMetadataBuilderImpl_vTable.setSubType := @IMetadataBuilderImpl_setSubTypeDispatcher;
  IMetadataBuilderImpl_vTable.setLength := @IMetadataBuilderImpl_setLengthDispatcher;
  IMetadataBuilderImpl_vTable.setCharSet := @IMetadataBuilderImpl_setCharSetDispatcher;
  IMetadataBuilderImpl_vTable.setScale := @IMetadataBuilderImpl_setScaleDispatcher;
  IMetadataBuilderImpl_vTable.truncate := @IMetadataBuilderImpl_truncateDispatcher;
  IMetadataBuilderImpl_vTable.moveNameToIndex := @IMetadataBuilderImpl_moveNameToIndexDispatcher;
  IMetadataBuilderImpl_vTable.remove := @IMetadataBuilderImpl_removeDispatcher;
  IMetadataBuilderImpl_vTable.addField := @IMetadataBuilderImpl_addFieldDispatcher;
  IMetadataBuilderImpl_vTable.getMetadata := @IMetadataBuilderImpl_getMetadataDispatcher;
  IMetadataBuilderImpl_vTable.setField := @IMetadataBuilderImpl_setFieldDispatcher;
  IMetadataBuilderImpl_vTable.setRelation := @IMetadataBuilderImpl_setRelationDispatcher;
  IMetadataBuilderImpl_vTable.setOwner := @IMetadataBuilderImpl_setOwnerDispatcher;
  IMetadataBuilderImpl_vTable.setAlias := @IMetadataBuilderImpl_setAliasDispatcher;

  IResultSetImpl_vTable := TResultSetVTable.create;
  IResultSetImpl_vTable.version := cIResultSet_VERSION;
  IResultSetImpl_vTable.addRef := @IResultSetImpl_addRefDispatcher;
  IResultSetImpl_vTable.release := @IResultSetImpl_releaseDispatcher;
  IResultSetImpl_vTable.fetchNext := @IResultSetImpl_fetchNextDispatcher;
  IResultSetImpl_vTable.fetchPrior := @IResultSetImpl_fetchPriorDispatcher;
  IResultSetImpl_vTable.fetchFirst := @IResultSetImpl_fetchFirstDispatcher;
  IResultSetImpl_vTable.fetchLast := @IResultSetImpl_fetchLastDispatcher;
  IResultSetImpl_vTable.fetchAbsolute := @IResultSetImpl_fetchAbsoluteDispatcher;
  IResultSetImpl_vTable.fetchRelative := @IResultSetImpl_fetchRelativeDispatcher;
  IResultSetImpl_vTable.isEof := @IResultSetImpl_isEofDispatcher;
  IResultSetImpl_vTable.isBof := @IResultSetImpl_isBofDispatcher;
  IResultSetImpl_vTable.getMetadata := @IResultSetImpl_getMetadataDispatcher;
  IResultSetImpl_vTable.deprecatedClose := @IResultSetImpl_deprecatedCloseDispatcher;
  IResultSetImpl_vTable.setDelayedOutputFormat := @IResultSetImpl_setDelayedOutputFormatDispatcher;
  IResultSetImpl_vTable.close := @IResultSetImpl_closeDispatcher;
  IResultSetImpl_vTable.getInfo := @IResultSetImpl_getInfoDispatcher;

  IStatementImpl_vTable := TStatementVTable.create;
  IStatementImpl_vTable.version := cIStatement_VERSION;
  IStatementImpl_vTable.addRef := @IStatementImpl_addRefDispatcher;
  IStatementImpl_vTable.release := @IStatementImpl_releaseDispatcher;
  IStatementImpl_vTable.getInfo := @IStatementImpl_getInfoDispatcher;
  IStatementImpl_vTable.getType := @IStatementImpl_getTypeDispatcher;
  IStatementImpl_vTable.getPlan := @IStatementImpl_getPlanDispatcher;
  IStatementImpl_vTable.getAffectedRecords := @IStatementImpl_getAffectedRecordsDispatcher;
  IStatementImpl_vTable.getInputMetadata := @IStatementImpl_getInputMetadataDispatcher;
  IStatementImpl_vTable.getOutputMetadata := @IStatementImpl_getOutputMetadataDispatcher;
  IStatementImpl_vTable.execute := @IStatementImpl_executeDispatcher;
  IStatementImpl_vTable.openCursor := @IStatementImpl_openCursorDispatcher;
  IStatementImpl_vTable.setCursorName := @IStatementImpl_setCursorNameDispatcher;
  IStatementImpl_vTable.deprecatedFree := @IStatementImpl_deprecatedFreeDispatcher;
  IStatementImpl_vTable.getFlags := @IStatementImpl_getFlagsDispatcher;
  IStatementImpl_vTable.getTimeout := @IStatementImpl_getTimeoutDispatcher;
  IStatementImpl_vTable.setTimeout := @IStatementImpl_setTimeoutDispatcher;
  IStatementImpl_vTable.createBatch := @IStatementImpl_createBatchDispatcher;
  IStatementImpl_vTable.free := @IStatementImpl_freeDispatcher;

  IBatchImpl_vTable := TBatchVTable.create;
  IBatchImpl_vTable.version := cIBatch_VERSION;
  IBatchImpl_vTable.addRef := @IBatchImpl_addRefDispatcher;
  IBatchImpl_vTable.release := @IBatchImpl_releaseDispatcher;
  IBatchImpl_vTable.add := @IBatchImpl_addDispatcher;
  IBatchImpl_vTable.addBlob := @IBatchImpl_addBlobDispatcher;
  IBatchImpl_vTable.appendBlobData := @IBatchImpl_appendBlobDataDispatcher;
  IBatchImpl_vTable.addBlobStream := @IBatchImpl_addBlobStreamDispatcher;
  IBatchImpl_vTable.registerBlob := @IBatchImpl_registerBlobDispatcher;
  IBatchImpl_vTable.execute := @IBatchImpl_executeDispatcher;
  IBatchImpl_vTable.cancel := @IBatchImpl_cancelDispatcher;
  IBatchImpl_vTable.getBlobAlignment := @IBatchImpl_getBlobAlignmentDispatcher;
  IBatchImpl_vTable.getMetadata := @IBatchImpl_getMetadataDispatcher;
  IBatchImpl_vTable.setDefaultBpb := @IBatchImpl_setDefaultBpbDispatcher;
  IBatchImpl_vTable.deprecatedClose := @IBatchImpl_deprecatedCloseDispatcher;
  IBatchImpl_vTable.close := @IBatchImpl_closeDispatcher;
  IBatchImpl_vTable.getInfo := @IBatchImpl_getInfoDispatcher;

  IBatchCompletionStateImpl_vTable := TBatchCompletionStateVTable.create;
  IBatchCompletionStateImpl_vTable.version := cIBatchCompletionState_VERSION;
  IBatchCompletionStateImpl_vTable.dispose := @IBatchCompletionStateImpl_disposeDispatcher;
  IBatchCompletionStateImpl_vTable.getSize := @IBatchCompletionStateImpl_getSizeDispatcher;
  IBatchCompletionStateImpl_vTable.getState := @IBatchCompletionStateImpl_getStateDispatcher;
  IBatchCompletionStateImpl_vTable.findError := @IBatchCompletionStateImpl_findErrorDispatcher;
  IBatchCompletionStateImpl_vTable.getStatus := @IBatchCompletionStateImpl_getStatusDispatcher;

  IReplicatorImpl_vTable := TReplicatorVTable.create;
  IReplicatorImpl_vTable.version := cIReplicator_VERSION;
  IReplicatorImpl_vTable.addRef := @IReplicatorImpl_addRefDispatcher;
  IReplicatorImpl_vTable.release := @IReplicatorImpl_releaseDispatcher;
  IReplicatorImpl_vTable.process := @IReplicatorImpl_processDispatcher;
  IReplicatorImpl_vTable.deprecatedClose := @IReplicatorImpl_deprecatedCloseDispatcher;
  IReplicatorImpl_vTable.close := @IReplicatorImpl_closeDispatcher;

  IRequestImpl_vTable := TRequestVTable.create;
  IRequestImpl_vTable.version := cIRequest_VERSION;
  IRequestImpl_vTable.addRef := @IRequestImpl_addRefDispatcher;
  IRequestImpl_vTable.release := @IRequestImpl_releaseDispatcher;
  IRequestImpl_vTable.receive := @IRequestImpl_receiveDispatcher;
  IRequestImpl_vTable.send := @IRequestImpl_sendDispatcher;
  IRequestImpl_vTable.getInfo := @IRequestImpl_getInfoDispatcher;
  IRequestImpl_vTable.start := @IRequestImpl_startDispatcher;
  IRequestImpl_vTable.startAndSend := @IRequestImpl_startAndSendDispatcher;
  IRequestImpl_vTable.unwind := @IRequestImpl_unwindDispatcher;
  IRequestImpl_vTable.deprecatedFree := @IRequestImpl_deprecatedFreeDispatcher;
  IRequestImpl_vTable.free := @IRequestImpl_freeDispatcher;

  IEventsImpl_vTable := TEventsVTable.create;
  IEventsImpl_vTable.version := cIEvents_VERSION;
  IEventsImpl_vTable.addRef := @IEventsImpl_addRefDispatcher;
  IEventsImpl_vTable.release := @IEventsImpl_releaseDispatcher;
  IEventsImpl_vTable.deprecatedCancel := @IEventsImpl_deprecatedCancelDispatcher;
  IEventsImpl_vTable.cancel := @IEventsImpl_cancelDispatcher;

  IAttachmentImpl_vTable := TAttachmentVTable.create;
  IAttachmentImpl_vTable.version := cIAttachment_VERSION;
  IAttachmentImpl_vTable.addRef := @IAttachmentImpl_addRefDispatcher;
  IAttachmentImpl_vTable.release := @IAttachmentImpl_releaseDispatcher;
  IAttachmentImpl_vTable.getInfo := @IAttachmentImpl_getInfoDispatcher;
  IAttachmentImpl_vTable.startTransaction := @IAttachmentImpl_startTransactionDispatcher;
  IAttachmentImpl_vTable.reconnectTransaction := @IAttachmentImpl_reconnectTransactionDispatcher;
  IAttachmentImpl_vTable.compileRequest := @IAttachmentImpl_compileRequestDispatcher;
  IAttachmentImpl_vTable.transactRequest := @IAttachmentImpl_transactRequestDispatcher;
  IAttachmentImpl_vTable.createBlob := @IAttachmentImpl_createBlobDispatcher;
  IAttachmentImpl_vTable.openBlob := @IAttachmentImpl_openBlobDispatcher;
  IAttachmentImpl_vTable.getSlice := @IAttachmentImpl_getSliceDispatcher;
  IAttachmentImpl_vTable.putSlice := @IAttachmentImpl_putSliceDispatcher;
  IAttachmentImpl_vTable.executeDyn := @IAttachmentImpl_executeDynDispatcher;
  IAttachmentImpl_vTable.prepare := @IAttachmentImpl_prepareDispatcher;
  IAttachmentImpl_vTable.execute := @IAttachmentImpl_executeDispatcher;
  IAttachmentImpl_vTable.openCursor := @IAttachmentImpl_openCursorDispatcher;
  IAttachmentImpl_vTable.queEvents := @IAttachmentImpl_queEventsDispatcher;
  IAttachmentImpl_vTable.cancelOperation := @IAttachmentImpl_cancelOperationDispatcher;
  IAttachmentImpl_vTable.ping := @IAttachmentImpl_pingDispatcher;
  IAttachmentImpl_vTable.deprecatedDetach := @IAttachmentImpl_deprecatedDetachDispatcher;
  IAttachmentImpl_vTable.deprecatedDropDatabase := @IAttachmentImpl_deprecatedDropDatabaseDispatcher;
  IAttachmentImpl_vTable.getIdleTimeout := @IAttachmentImpl_getIdleTimeoutDispatcher;
  IAttachmentImpl_vTable.setIdleTimeout := @IAttachmentImpl_setIdleTimeoutDispatcher;
  IAttachmentImpl_vTable.getStatementTimeout := @IAttachmentImpl_getStatementTimeoutDispatcher;
  IAttachmentImpl_vTable.setStatementTimeout := @IAttachmentImpl_setStatementTimeoutDispatcher;
  IAttachmentImpl_vTable.createBatch := @IAttachmentImpl_createBatchDispatcher;
  IAttachmentImpl_vTable.createReplicator := @IAttachmentImpl_createReplicatorDispatcher;
  IAttachmentImpl_vTable.detach := @IAttachmentImpl_detachDispatcher;
  IAttachmentImpl_vTable.dropDatabase := @IAttachmentImpl_dropDatabaseDispatcher;

  IServiceImpl_vTable := TServiceVTable.create;
  IServiceImpl_vTable.version := cIService_VERSION;
  IServiceImpl_vTable.addRef := @IServiceImpl_addRefDispatcher;
  IServiceImpl_vTable.release := @IServiceImpl_releaseDispatcher;
  IServiceImpl_vTable.deprecatedDetach := @IServiceImpl_deprecatedDetachDispatcher;
  IServiceImpl_vTable.query := @IServiceImpl_queryDispatcher;
  IServiceImpl_vTable.start := @IServiceImpl_startDispatcher;
  IServiceImpl_vTable.detach := @IServiceImpl_detachDispatcher;
  IServiceImpl_vTable.cancel := @IServiceImpl_cancelDispatcher;

  IProviderImpl_vTable := TProviderVTable.create;
  IProviderImpl_vTable.version := cIProvider_VERSION;
  IProviderImpl_vTable.addRef := @IProviderImpl_addRefDispatcher;
  IProviderImpl_vTable.release := @IProviderImpl_releaseDispatcher;
  IProviderImpl_vTable.setOwner := @IProviderImpl_setOwnerDispatcher;
  IProviderImpl_vTable.getOwner := @IProviderImpl_getOwnerDispatcher;
  IProviderImpl_vTable.attachDatabase := @IProviderImpl_attachDatabaseDispatcher;
  IProviderImpl_vTable.createDatabase := @IProviderImpl_createDatabaseDispatcher;
  IProviderImpl_vTable.attachServiceManager := @IProviderImpl_attachServiceManagerDispatcher;
  IProviderImpl_vTable.shutdown := @IProviderImpl_shutdownDispatcher;
  IProviderImpl_vTable.setDbCryptCallback := @IProviderImpl_setDbCryptCallbackDispatcher;

  IDtcStartImpl_vTable := TDtcStartVTable.create;
  IDtcStartImpl_vTable.version := cIDtcStart_VERSION;
  IDtcStartImpl_vTable.dispose := @IDtcStartImpl_disposeDispatcher;
  IDtcStartImpl_vTable.addAttachment := @IDtcStartImpl_addAttachmentDispatcher;
  IDtcStartImpl_vTable.addWithTpb := @IDtcStartImpl_addWithTpbDispatcher;
  IDtcStartImpl_vTable.start := @IDtcStartImpl_startDispatcher;

  IDtcImpl_vTable := TDtcVTable.create;
  IDtcImpl_vTable.version := cIDtc_VERSION;
  IDtcImpl_vTable.join := @IDtcImpl_joinDispatcher;
  IDtcImpl_vTable.startBuilder := @IDtcImpl_startBuilderDispatcher;

  IAuthImpl_vTable := TAuthVTable.create;
  IAuthImpl_vTable.version := cIAuth_VERSION;
  IAuthImpl_vTable.addRef := @IAuthImpl_addRefDispatcher;
  IAuthImpl_vTable.release := @IAuthImpl_releaseDispatcher;
  IAuthImpl_vTable.setOwner := @IAuthImpl_setOwnerDispatcher;
  IAuthImpl_vTable.getOwner := @IAuthImpl_getOwnerDispatcher;

  IWriterImpl_vTable := TWriterVTable.create;
  IWriterImpl_vTable.version := cIWriter_VERSION;
  IWriterImpl_vTable.reset := @IWriterImpl_resetDispatcher;
  IWriterImpl_vTable.add := @IWriterImpl_addDispatcher;
  IWriterImpl_vTable.setType := @IWriterImpl_setTypeDispatcher;
  IWriterImpl_vTable.setDb := @IWriterImpl_setDbDispatcher;

  IServerBlockImpl_vTable := TServerBlockVTable.create;
  IServerBlockImpl_vTable.version := cIServerBlock_VERSION;
  IServerBlockImpl_vTable.getLogin := @IServerBlockImpl_getLoginDispatcher;
  IServerBlockImpl_vTable.getData := @IServerBlockImpl_getDataDispatcher;
  IServerBlockImpl_vTable.putData := @IServerBlockImpl_putDataDispatcher;
  IServerBlockImpl_vTable.newKey := @IServerBlockImpl_newKeyDispatcher;

  IClientBlockImpl_vTable := TClientBlockVTable.create;
  IClientBlockImpl_vTable.version := cIClientBlock_VERSION;
  IClientBlockImpl_vTable.addRef := @IClientBlockImpl_addRefDispatcher;
  IClientBlockImpl_vTable.release := @IClientBlockImpl_releaseDispatcher;
  IClientBlockImpl_vTable.getLogin := @IClientBlockImpl_getLoginDispatcher;
  IClientBlockImpl_vTable.getPassword := @IClientBlockImpl_getPasswordDispatcher;
  IClientBlockImpl_vTable.getData := @IClientBlockImpl_getDataDispatcher;
  IClientBlockImpl_vTable.putData := @IClientBlockImpl_putDataDispatcher;
  IClientBlockImpl_vTable.newKey := @IClientBlockImpl_newKeyDispatcher;
  IClientBlockImpl_vTable.getAuthBlock := @IClientBlockImpl_getAuthBlockDispatcher;

  IServerImpl_vTable := TServerVTable.create;
  IServerImpl_vTable.version := cIServer_VERSION;
  IServerImpl_vTable.addRef := @IServerImpl_addRefDispatcher;
  IServerImpl_vTable.release := @IServerImpl_releaseDispatcher;
  IServerImpl_vTable.setOwner := @IServerImpl_setOwnerDispatcher;
  IServerImpl_vTable.getOwner := @IServerImpl_getOwnerDispatcher;
  IServerImpl_vTable.authenticate := @IServerImpl_authenticateDispatcher;
  IServerImpl_vTable.setDbCryptCallback := @IServerImpl_setDbCryptCallbackDispatcher;

  IClientImpl_vTable := TClientVTable.create;
  IClientImpl_vTable.version := cIClient_VERSION;
  IClientImpl_vTable.addRef := @IClientImpl_addRefDispatcher;
  IClientImpl_vTable.release := @IClientImpl_releaseDispatcher;
  IClientImpl_vTable.setOwner := @IClientImpl_setOwnerDispatcher;
  IClientImpl_vTable.getOwner := @IClientImpl_getOwnerDispatcher;
  IClientImpl_vTable.authenticate := @IClientImpl_authenticateDispatcher;

  IUserFieldImpl_vTable := TUserFieldVTable.create;
  IUserFieldImpl_vTable.version := cIUserField_VERSION;
  IUserFieldImpl_vTable.entered := @IUserFieldImpl_enteredDispatcher;
  IUserFieldImpl_vTable.specified := @IUserFieldImpl_specifiedDispatcher;
  IUserFieldImpl_vTable.setEntered := @IUserFieldImpl_setEnteredDispatcher;

  ICharUserFieldImpl_vTable := TCharUserFieldVTable.create;
  ICharUserFieldImpl_vTable.version := cICharUserField_VERSION;
  ICharUserFieldImpl_vTable.entered := @ICharUserFieldImpl_enteredDispatcher;
  ICharUserFieldImpl_vTable.specified := @ICharUserFieldImpl_specifiedDispatcher;
  ICharUserFieldImpl_vTable.setEntered := @ICharUserFieldImpl_setEnteredDispatcher;
  ICharUserFieldImpl_vTable.get := @ICharUserFieldImpl_getDispatcher;
  ICharUserFieldImpl_vTable.set_ := @ICharUserFieldImpl_set_Dispatcher;

  IIntUserFieldImpl_vTable := TIntUserFieldVTable.create;
  IIntUserFieldImpl_vTable.version := cIIntUserField_VERSION;
  IIntUserFieldImpl_vTable.entered := @IIntUserFieldImpl_enteredDispatcher;
  IIntUserFieldImpl_vTable.specified := @IIntUserFieldImpl_specifiedDispatcher;
  IIntUserFieldImpl_vTable.setEntered := @IIntUserFieldImpl_setEnteredDispatcher;
  IIntUserFieldImpl_vTable.get := @IIntUserFieldImpl_getDispatcher;
  IIntUserFieldImpl_vTable.set_ := @IIntUserFieldImpl_set_Dispatcher;

  IUserImpl_vTable := TUserVTable.create;
  IUserImpl_vTable.version := cIUser_VERSION;
  IUserImpl_vTable.operation := @IUserImpl_operationDispatcher;
  IUserImpl_vTable.userName := @IUserImpl_userNameDispatcher;
  IUserImpl_vTable.password := @IUserImpl_passwordDispatcher;
  IUserImpl_vTable.firstName := @IUserImpl_firstNameDispatcher;
  IUserImpl_vTable.lastName := @IUserImpl_lastNameDispatcher;
  IUserImpl_vTable.middleName := @IUserImpl_middleNameDispatcher;
  IUserImpl_vTable.comment := @IUserImpl_commentDispatcher;
  IUserImpl_vTable.attributes := @IUserImpl_attributesDispatcher;
  IUserImpl_vTable.active := @IUserImpl_activeDispatcher;
  IUserImpl_vTable.admin := @IUserImpl_adminDispatcher;
  IUserImpl_vTable.clear := @IUserImpl_clearDispatcher;

  IListUsersImpl_vTable := TListUsersVTable.create;
  IListUsersImpl_vTable.version := cIListUsers_VERSION;
  IListUsersImpl_vTable.list := @IListUsersImpl_listDispatcher;

  ILogonInfoImpl_vTable := TLogonInfoVTable.create;
  ILogonInfoImpl_vTable.version := cILogonInfo_VERSION;
  ILogonInfoImpl_vTable.name := @ILogonInfoImpl_nameDispatcher;
  ILogonInfoImpl_vTable.role := @ILogonInfoImpl_roleDispatcher;
  ILogonInfoImpl_vTable.networkProtocol := @ILogonInfoImpl_networkProtocolDispatcher;
  ILogonInfoImpl_vTable.remoteAddress := @ILogonInfoImpl_remoteAddressDispatcher;
  ILogonInfoImpl_vTable.authBlock := @ILogonInfoImpl_authBlockDispatcher;
  ILogonInfoImpl_vTable.attachment := @ILogonInfoImpl_attachmentDispatcher;
  ILogonInfoImpl_vTable.transaction := @ILogonInfoImpl_transactionDispatcher;

  IManagementImpl_vTable := TManagementVTable.create;
  IManagementImpl_vTable.version := cIManagement_VERSION;
  IManagementImpl_vTable.addRef := @IManagementImpl_addRefDispatcher;
  IManagementImpl_vTable.release := @IManagementImpl_releaseDispatcher;
  IManagementImpl_vTable.setOwner := @IManagementImpl_setOwnerDispatcher;
  IManagementImpl_vTable.getOwner := @IManagementImpl_getOwnerDispatcher;
  IManagementImpl_vTable.start := @IManagementImpl_startDispatcher;
  IManagementImpl_vTable.execute := @IManagementImpl_executeDispatcher;
  IManagementImpl_vTable.commit := @IManagementImpl_commitDispatcher;
  IManagementImpl_vTable.rollback := @IManagementImpl_rollbackDispatcher;

  IAuthBlockImpl_vTable := TAuthBlockVTable.create;
  IAuthBlockImpl_vTable.version := cIAuthBlock_VERSION;
  IAuthBlockImpl_vTable.getType := @IAuthBlockImpl_getTypeDispatcher;
  IAuthBlockImpl_vTable.getName := @IAuthBlockImpl_getNameDispatcher;
  IAuthBlockImpl_vTable.getPlugin := @IAuthBlockImpl_getPluginDispatcher;
  IAuthBlockImpl_vTable.getSecurityDb := @IAuthBlockImpl_getSecurityDbDispatcher;
  IAuthBlockImpl_vTable.getOriginalPlugin := @IAuthBlockImpl_getOriginalPluginDispatcher;
  IAuthBlockImpl_vTable.next := @IAuthBlockImpl_nextDispatcher;
  IAuthBlockImpl_vTable.first := @IAuthBlockImpl_firstDispatcher;

  IWireCryptPluginImpl_vTable := TWireCryptPluginVTable.create;
  IWireCryptPluginImpl_vTable.version := cIWireCryptPlugin_VERSION;
  IWireCryptPluginImpl_vTable.addRef := @IWireCryptPluginImpl_addRefDispatcher;
  IWireCryptPluginImpl_vTable.release := @IWireCryptPluginImpl_releaseDispatcher;
  IWireCryptPluginImpl_vTable.setOwner := @IWireCryptPluginImpl_setOwnerDispatcher;
  IWireCryptPluginImpl_vTable.getOwner := @IWireCryptPluginImpl_getOwnerDispatcher;
  IWireCryptPluginImpl_vTable.getKnownTypes := @IWireCryptPluginImpl_getKnownTypesDispatcher;
  IWireCryptPluginImpl_vTable.setKey := @IWireCryptPluginImpl_setKeyDispatcher;
  IWireCryptPluginImpl_vTable.encrypt := @IWireCryptPluginImpl_encryptDispatcher;
  IWireCryptPluginImpl_vTable.decrypt := @IWireCryptPluginImpl_decryptDispatcher;
  IWireCryptPluginImpl_vTable.getSpecificData := @IWireCryptPluginImpl_getSpecificDataDispatcher;
  IWireCryptPluginImpl_vTable.setSpecificData := @IWireCryptPluginImpl_setSpecificDataDispatcher;

  ICryptKeyCallbackImpl_vTable := TCryptKeyCallbackVTable.create;
  ICryptKeyCallbackImpl_vTable.version := cICryptKeyCallback_VERSION;
  ICryptKeyCallbackImpl_vTable.callback := @ICryptKeyCallbackImpl_callbackDispatcher;

  IKeyHolderPluginImpl_vTable := TKeyHolderPluginVTable.create;
  IKeyHolderPluginImpl_vTable.version := cIKeyHolderPlugin_VERSION;
  IKeyHolderPluginImpl_vTable.addRef := @IKeyHolderPluginImpl_addRefDispatcher;
  IKeyHolderPluginImpl_vTable.release := @IKeyHolderPluginImpl_releaseDispatcher;
  IKeyHolderPluginImpl_vTable.setOwner := @IKeyHolderPluginImpl_setOwnerDispatcher;
  IKeyHolderPluginImpl_vTable.getOwner := @IKeyHolderPluginImpl_getOwnerDispatcher;
  IKeyHolderPluginImpl_vTable.keyCallback := @IKeyHolderPluginImpl_keyCallbackDispatcher;
  IKeyHolderPluginImpl_vTable.keyHandle := @IKeyHolderPluginImpl_keyHandleDispatcher;
  IKeyHolderPluginImpl_vTable.useOnlyOwnKeys := @IKeyHolderPluginImpl_useOnlyOwnKeysDispatcher;
  IKeyHolderPluginImpl_vTable.chainHandle := @IKeyHolderPluginImpl_chainHandleDispatcher;

  IDbCryptInfoImpl_vTable := TDbCryptInfoVTable.create;
  IDbCryptInfoImpl_vTable.version := cIDbCryptInfo_VERSION;
  IDbCryptInfoImpl_vTable.addRef := @IDbCryptInfoImpl_addRefDispatcher;
  IDbCryptInfoImpl_vTable.release := @IDbCryptInfoImpl_releaseDispatcher;
  IDbCryptInfoImpl_vTable.getDatabaseFullPath := @IDbCryptInfoImpl_getDatabaseFullPathDispatcher;

  IDbCryptPluginImpl_vTable := TDbCryptPluginVTable.create;
  IDbCryptPluginImpl_vTable.version := cIDbCryptPlugin_VERSION;
  IDbCryptPluginImpl_vTable.addRef := @IDbCryptPluginImpl_addRefDispatcher;
  IDbCryptPluginImpl_vTable.release := @IDbCryptPluginImpl_releaseDispatcher;
  IDbCryptPluginImpl_vTable.setOwner := @IDbCryptPluginImpl_setOwnerDispatcher;
  IDbCryptPluginImpl_vTable.getOwner := @IDbCryptPluginImpl_getOwnerDispatcher;
  IDbCryptPluginImpl_vTable.setKey := @IDbCryptPluginImpl_setKeyDispatcher;
  IDbCryptPluginImpl_vTable.encrypt := @IDbCryptPluginImpl_encryptDispatcher;
  IDbCryptPluginImpl_vTable.decrypt := @IDbCryptPluginImpl_decryptDispatcher;
  IDbCryptPluginImpl_vTable.setInfo := @IDbCryptPluginImpl_setInfoDispatcher;

  IExternalContextImpl_vTable := TExternalContextVTable.create;
  IExternalContextImpl_vTable.version := cIExternalContext_VERSION;
  IExternalContextImpl_vTable.getMaster := @IExternalContextImpl_getMasterDispatcher;
  IExternalContextImpl_vTable.getEngine := @IExternalContextImpl_getEngineDispatcher;
  IExternalContextImpl_vTable.getAttachment := @IExternalContextImpl_getAttachmentDispatcher;
  IExternalContextImpl_vTable.getTransaction := @IExternalContextImpl_getTransactionDispatcher;
  IExternalContextImpl_vTable.getUserName := @IExternalContextImpl_getUserNameDispatcher;
  IExternalContextImpl_vTable.getDatabaseName := @IExternalContextImpl_getDatabaseNameDispatcher;
  IExternalContextImpl_vTable.getClientCharSet := @IExternalContextImpl_getClientCharSetDispatcher;
  IExternalContextImpl_vTable.obtainInfoCode := @IExternalContextImpl_obtainInfoCodeDispatcher;
  IExternalContextImpl_vTable.getInfo := @IExternalContextImpl_getInfoDispatcher;
  IExternalContextImpl_vTable.setInfo := @IExternalContextImpl_setInfoDispatcher;

  IExternalResultSetImpl_vTable := TExternalResultSetVTable.create;
  IExternalResultSetImpl_vTable.version := cIExternalResultSet_VERSION;
  IExternalResultSetImpl_vTable.dispose := @IExternalResultSetImpl_disposeDispatcher;
  IExternalResultSetImpl_vTable.fetch := @IExternalResultSetImpl_fetchDispatcher;

  IExternalFunctionImpl_vTable := TExternalFunctionVTable.create;
  IExternalFunctionImpl_vTable.version := cIExternalFunction_VERSION;
  IExternalFunctionImpl_vTable.dispose := @IExternalFunctionImpl_disposeDispatcher;
  IExternalFunctionImpl_vTable.getCharSet := @IExternalFunctionImpl_getCharSetDispatcher;
  IExternalFunctionImpl_vTable.execute := @IExternalFunctionImpl_executeDispatcher;

  IExternalProcedureImpl_vTable := TExternalProcedureVTable.create;
  IExternalProcedureImpl_vTable.version := cIExternalProcedure_VERSION;
  IExternalProcedureImpl_vTable.dispose := @IExternalProcedureImpl_disposeDispatcher;
  IExternalProcedureImpl_vTable.getCharSet := @IExternalProcedureImpl_getCharSetDispatcher;
  IExternalProcedureImpl_vTable.open := @IExternalProcedureImpl_openDispatcher;

  IExternalTriggerImpl_vTable := TExternalTriggerVTable.create;
  IExternalTriggerImpl_vTable.version := cIExternalTrigger_VERSION;
  IExternalTriggerImpl_vTable.dispose := @IExternalTriggerImpl_disposeDispatcher;
  IExternalTriggerImpl_vTable.getCharSet := @IExternalTriggerImpl_getCharSetDispatcher;
  IExternalTriggerImpl_vTable.execute := @IExternalTriggerImpl_executeDispatcher;

  IRoutineMetadataImpl_vTable := TRoutineMetadataVTable.create;
  IRoutineMetadataImpl_vTable.version := cIRoutineMetadata_VERSION;
  IRoutineMetadataImpl_vTable.getPackage := @IRoutineMetadataImpl_getPackageDispatcher;
  IRoutineMetadataImpl_vTable.getName := @IRoutineMetadataImpl_getNameDispatcher;
  IRoutineMetadataImpl_vTable.getEntryPoint := @IRoutineMetadataImpl_getEntryPointDispatcher;
  IRoutineMetadataImpl_vTable.getBody := @IRoutineMetadataImpl_getBodyDispatcher;
  IRoutineMetadataImpl_vTable.getInputMetadata := @IRoutineMetadataImpl_getInputMetadataDispatcher;
  IRoutineMetadataImpl_vTable.getOutputMetadata := @IRoutineMetadataImpl_getOutputMetadataDispatcher;
  IRoutineMetadataImpl_vTable.getTriggerMetadata := @IRoutineMetadataImpl_getTriggerMetadataDispatcher;
  IRoutineMetadataImpl_vTable.getTriggerTable := @IRoutineMetadataImpl_getTriggerTableDispatcher;
  IRoutineMetadataImpl_vTable.getTriggerType := @IRoutineMetadataImpl_getTriggerTypeDispatcher;

  IExternalEngineImpl_vTable := TExternalEngineVTable.create;
  IExternalEngineImpl_vTable.version := cIExternalEngine_VERSION;
  IExternalEngineImpl_vTable.addRef := @IExternalEngineImpl_addRefDispatcher;
  IExternalEngineImpl_vTable.release := @IExternalEngineImpl_releaseDispatcher;
  IExternalEngineImpl_vTable.setOwner := @IExternalEngineImpl_setOwnerDispatcher;
  IExternalEngineImpl_vTable.getOwner := @IExternalEngineImpl_getOwnerDispatcher;
  IExternalEngineImpl_vTable.open := @IExternalEngineImpl_openDispatcher;
  IExternalEngineImpl_vTable.openAttachment := @IExternalEngineImpl_openAttachmentDispatcher;
  IExternalEngineImpl_vTable.closeAttachment := @IExternalEngineImpl_closeAttachmentDispatcher;
  IExternalEngineImpl_vTable.makeFunction := @IExternalEngineImpl_makeFunctionDispatcher;
  IExternalEngineImpl_vTable.makeProcedure := @IExternalEngineImpl_makeProcedureDispatcher;
  IExternalEngineImpl_vTable.makeTrigger := @IExternalEngineImpl_makeTriggerDispatcher;

  ITimerImpl_vTable := TTimerVTable.create;
  ITimerImpl_vTable.version := cITimer_VERSION;
  ITimerImpl_vTable.addRef := @ITimerImpl_addRefDispatcher;
  ITimerImpl_vTable.release := @ITimerImpl_releaseDispatcher;
  ITimerImpl_vTable.handler := @ITimerImpl_handlerDispatcher;

  ITimerControlImpl_vTable := TTimerControlVTable.create;
  ITimerControlImpl_vTable.version := cITimerControl_VERSION;
  ITimerControlImpl_vTable.start := @ITimerControlImpl_startDispatcher;
  ITimerControlImpl_vTable.stop := @ITimerControlImpl_stopDispatcher;

  IVersionCallbackImpl_vTable := TVersionCallbackVTable.create;
  IVersionCallbackImpl_vTable.version := cIVersionCallback_VERSION;
  IVersionCallbackImpl_vTable.callback := @IVersionCallbackImpl_callbackDispatcher;

  IUtilImpl_vTable := TUtilVTable.create;
  IUtilImpl_vTable.version := cIUtil_VERSION;
  IUtilImpl_vTable.getFbVersion := @IUtilImpl_getFbVersionDispatcher;
  IUtilImpl_vTable.loadBlob := @IUtilImpl_loadBlobDispatcher;
  IUtilImpl_vTable.dumpBlob := @IUtilImpl_dumpBlobDispatcher;
  IUtilImpl_vTable.getPerfCounters := @IUtilImpl_getPerfCountersDispatcher;
  IUtilImpl_vTable.executeCreateDatabase := @IUtilImpl_executeCreateDatabaseDispatcher;
  IUtilImpl_vTable.decodeDate := @IUtilImpl_decodeDateDispatcher;
  IUtilImpl_vTable.decodeTime := @IUtilImpl_decodeTimeDispatcher;
  IUtilImpl_vTable.encodeDate := @IUtilImpl_encodeDateDispatcher;
  IUtilImpl_vTable.encodeTime := @IUtilImpl_encodeTimeDispatcher;
  IUtilImpl_vTable.formatStatus := @IUtilImpl_formatStatusDispatcher;
  IUtilImpl_vTable.getClientVersion := @IUtilImpl_getClientVersionDispatcher;
  IUtilImpl_vTable.getXpbBuilder := @IUtilImpl_getXpbBuilderDispatcher;
  IUtilImpl_vTable.setOffsets := @IUtilImpl_setOffsetsDispatcher;
  IUtilImpl_vTable.getDecFloat16 := @IUtilImpl_getDecFloat16Dispatcher;
  IUtilImpl_vTable.getDecFloat34 := @IUtilImpl_getDecFloat34Dispatcher;
  IUtilImpl_vTable.decodeTimeTz := @IUtilImpl_decodeTimeTzDispatcher;
  IUtilImpl_vTable.decodeTimeStampTz := @IUtilImpl_decodeTimeStampTzDispatcher;
  IUtilImpl_vTable.encodeTimeTz := @IUtilImpl_encodeTimeTzDispatcher;
  IUtilImpl_vTable.encodeTimeStampTz := @IUtilImpl_encodeTimeStampTzDispatcher;
  IUtilImpl_vTable.getInt128 := @IUtilImpl_getInt128Dispatcher;
  IUtilImpl_vTable.decodeTimeTzEx := @IUtilImpl_decodeTimeTzExDispatcher;
  IUtilImpl_vTable.decodeTimeStampTzEx := @IUtilImpl_decodeTimeStampTzExDispatcher;

  IOffsetsCallbackImpl_vTable := TOffsetsCallbackVTable.create;
  IOffsetsCallbackImpl_vTable.version := cIOffsetsCallback_VERSION;
  IOffsetsCallbackImpl_vTable.setOffset := @IOffsetsCallbackImpl_setOffsetDispatcher;

  IXpbBuilderImpl_vTable := TXpbBuilderVTable.create;
  IXpbBuilderImpl_vTable.version := cIXpbBuilder_VERSION;
  IXpbBuilderImpl_vTable.dispose := @IXpbBuilderImpl_disposeDispatcher;
  IXpbBuilderImpl_vTable.clear := @IXpbBuilderImpl_clearDispatcher;
  IXpbBuilderImpl_vTable.removeCurrent := @IXpbBuilderImpl_removeCurrentDispatcher;
  IXpbBuilderImpl_vTable.insertInt := @IXpbBuilderImpl_insertIntDispatcher;
  IXpbBuilderImpl_vTable.insertBigInt := @IXpbBuilderImpl_insertBigIntDispatcher;
  IXpbBuilderImpl_vTable.insertBytes := @IXpbBuilderImpl_insertBytesDispatcher;
  IXpbBuilderImpl_vTable.insertString := @IXpbBuilderImpl_insertStringDispatcher;
  IXpbBuilderImpl_vTable.insertTag := @IXpbBuilderImpl_insertTagDispatcher;
  IXpbBuilderImpl_vTable.isEof := @IXpbBuilderImpl_isEofDispatcher;
  IXpbBuilderImpl_vTable.moveNext := @IXpbBuilderImpl_moveNextDispatcher;
  IXpbBuilderImpl_vTable.rewind := @IXpbBuilderImpl_rewindDispatcher;
  IXpbBuilderImpl_vTable.findFirst := @IXpbBuilderImpl_findFirstDispatcher;
  IXpbBuilderImpl_vTable.findNext := @IXpbBuilderImpl_findNextDispatcher;
  IXpbBuilderImpl_vTable.getTag := @IXpbBuilderImpl_getTagDispatcher;
  IXpbBuilderImpl_vTable.getLength := @IXpbBuilderImpl_getLengthDispatcher;
  IXpbBuilderImpl_vTable.getInt := @IXpbBuilderImpl_getIntDispatcher;
  IXpbBuilderImpl_vTable.getBigInt := @IXpbBuilderImpl_getBigIntDispatcher;
  IXpbBuilderImpl_vTable.getString := @IXpbBuilderImpl_getStringDispatcher;
  IXpbBuilderImpl_vTable.getBytes := @IXpbBuilderImpl_getBytesDispatcher;
  IXpbBuilderImpl_vTable.getBufferLength := @IXpbBuilderImpl_getBufferLengthDispatcher;
  IXpbBuilderImpl_vTable.getBuffer := @IXpbBuilderImpl_getBufferDispatcher;

  ITraceConnectionImpl_vTable := TTraceConnectionVTable.create;
  ITraceConnectionImpl_vTable.version := cITraceConnection_VERSION;
  ITraceConnectionImpl_vTable.getKind := @ITraceConnectionImpl_getKindDispatcher;
  ITraceConnectionImpl_vTable.getProcessID := @ITraceConnectionImpl_getProcessIDDispatcher;
  ITraceConnectionImpl_vTable.getUserName := @ITraceConnectionImpl_getUserNameDispatcher;
  ITraceConnectionImpl_vTable.getRoleName := @ITraceConnectionImpl_getRoleNameDispatcher;
  ITraceConnectionImpl_vTable.getCharSet := @ITraceConnectionImpl_getCharSetDispatcher;
  ITraceConnectionImpl_vTable.getRemoteProtocol := @ITraceConnectionImpl_getRemoteProtocolDispatcher;
  ITraceConnectionImpl_vTable.getRemoteAddress := @ITraceConnectionImpl_getRemoteAddressDispatcher;
  ITraceConnectionImpl_vTable.getRemoteProcessID := @ITraceConnectionImpl_getRemoteProcessIDDispatcher;
  ITraceConnectionImpl_vTable.getRemoteProcessName := @ITraceConnectionImpl_getRemoteProcessNameDispatcher;

  ITraceDatabaseConnectionImpl_vTable := TTraceDatabaseConnectionVTable.create;
  ITraceDatabaseConnectionImpl_vTable.version := cITraceDatabaseConnection_VERSION;
  ITraceDatabaseConnectionImpl_vTable.getKind := @ITraceDatabaseConnectionImpl_getKindDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getProcessID := @ITraceDatabaseConnectionImpl_getProcessIDDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getUserName := @ITraceDatabaseConnectionImpl_getUserNameDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getRoleName := @ITraceDatabaseConnectionImpl_getRoleNameDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getCharSet := @ITraceDatabaseConnectionImpl_getCharSetDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getRemoteProtocol := @ITraceDatabaseConnectionImpl_getRemoteProtocolDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getRemoteAddress := @ITraceDatabaseConnectionImpl_getRemoteAddressDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getRemoteProcessID := @ITraceDatabaseConnectionImpl_getRemoteProcessIDDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getRemoteProcessName := @ITraceDatabaseConnectionImpl_getRemoteProcessNameDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getConnectionID := @ITraceDatabaseConnectionImpl_getConnectionIDDispatcher;
  ITraceDatabaseConnectionImpl_vTable.getDatabaseName := @ITraceDatabaseConnectionImpl_getDatabaseNameDispatcher;

  ITraceTransactionImpl_vTable := TTraceTransactionVTable.create;
  ITraceTransactionImpl_vTable.version := cITraceTransaction_VERSION;
  ITraceTransactionImpl_vTable.getTransactionID := @ITraceTransactionImpl_getTransactionIDDispatcher;
  ITraceTransactionImpl_vTable.getReadOnly := @ITraceTransactionImpl_getReadOnlyDispatcher;
  ITraceTransactionImpl_vTable.getWait := @ITraceTransactionImpl_getWaitDispatcher;
  ITraceTransactionImpl_vTable.getIsolation := @ITraceTransactionImpl_getIsolationDispatcher;
  ITraceTransactionImpl_vTable.getPerf := @ITraceTransactionImpl_getPerfDispatcher;
  ITraceTransactionImpl_vTable.getInitialID := @ITraceTransactionImpl_getInitialIDDispatcher;
  ITraceTransactionImpl_vTable.getPreviousID := @ITraceTransactionImpl_getPreviousIDDispatcher;

  ITraceParamsImpl_vTable := TTraceParamsVTable.create;
  ITraceParamsImpl_vTable.version := cITraceParams_VERSION;
  ITraceParamsImpl_vTable.getCount := @ITraceParamsImpl_getCountDispatcher;
  ITraceParamsImpl_vTable.getParam := @ITraceParamsImpl_getParamDispatcher;
  ITraceParamsImpl_vTable.getTextUTF8 := @ITraceParamsImpl_getTextUTF8Dispatcher;

  ITraceStatementImpl_vTable := TTraceStatementVTable.create;
  ITraceStatementImpl_vTable.version := cITraceStatement_VERSION;
  ITraceStatementImpl_vTable.getStmtID := @ITraceStatementImpl_getStmtIDDispatcher;
  ITraceStatementImpl_vTable.getPerf := @ITraceStatementImpl_getPerfDispatcher;

  ITraceSQLStatementImpl_vTable := TTraceSQLStatementVTable.create;
  ITraceSQLStatementImpl_vTable.version := cITraceSQLStatement_VERSION;
  ITraceSQLStatementImpl_vTable.getStmtID := @ITraceSQLStatementImpl_getStmtIDDispatcher;
  ITraceSQLStatementImpl_vTable.getPerf := @ITraceSQLStatementImpl_getPerfDispatcher;
  ITraceSQLStatementImpl_vTable.getText := @ITraceSQLStatementImpl_getTextDispatcher;
  ITraceSQLStatementImpl_vTable.getPlan := @ITraceSQLStatementImpl_getPlanDispatcher;
  ITraceSQLStatementImpl_vTable.getInputs := @ITraceSQLStatementImpl_getInputsDispatcher;
  ITraceSQLStatementImpl_vTable.getTextUTF8 := @ITraceSQLStatementImpl_getTextUTF8Dispatcher;
  ITraceSQLStatementImpl_vTable.getExplainedPlan := @ITraceSQLStatementImpl_getExplainedPlanDispatcher;

  ITraceBLRStatementImpl_vTable := TTraceBLRStatementVTable.create;
  ITraceBLRStatementImpl_vTable.version := cITraceBLRStatement_VERSION;
  ITraceBLRStatementImpl_vTable.getStmtID := @ITraceBLRStatementImpl_getStmtIDDispatcher;
  ITraceBLRStatementImpl_vTable.getPerf := @ITraceBLRStatementImpl_getPerfDispatcher;
  ITraceBLRStatementImpl_vTable.getData := @ITraceBLRStatementImpl_getDataDispatcher;
  ITraceBLRStatementImpl_vTable.getDataLength := @ITraceBLRStatementImpl_getDataLengthDispatcher;
  ITraceBLRStatementImpl_vTable.getText := @ITraceBLRStatementImpl_getTextDispatcher;

  ITraceDYNRequestImpl_vTable := TTraceDYNRequestVTable.create;
  ITraceDYNRequestImpl_vTable.version := cITraceDYNRequest_VERSION;
  ITraceDYNRequestImpl_vTable.getData := @ITraceDYNRequestImpl_getDataDispatcher;
  ITraceDYNRequestImpl_vTable.getDataLength := @ITraceDYNRequestImpl_getDataLengthDispatcher;
  ITraceDYNRequestImpl_vTable.getText := @ITraceDYNRequestImpl_getTextDispatcher;

  ITraceContextVariableImpl_vTable := TTraceContextVariableVTable.create;
  ITraceContextVariableImpl_vTable.version := cITraceContextVariable_VERSION;
  ITraceContextVariableImpl_vTable.getNameSpace := @ITraceContextVariableImpl_getNameSpaceDispatcher;
  ITraceContextVariableImpl_vTable.getVarName := @ITraceContextVariableImpl_getVarNameDispatcher;
  ITraceContextVariableImpl_vTable.getVarValue := @ITraceContextVariableImpl_getVarValueDispatcher;

  ITraceProcedureImpl_vTable := TTraceProcedureVTable.create;
  ITraceProcedureImpl_vTable.version := cITraceProcedure_VERSION;
  ITraceProcedureImpl_vTable.getProcName := @ITraceProcedureImpl_getProcNameDispatcher;
  ITraceProcedureImpl_vTable.getInputs := @ITraceProcedureImpl_getInputsDispatcher;
  ITraceProcedureImpl_vTable.getPerf := @ITraceProcedureImpl_getPerfDispatcher;
  ITraceProcedureImpl_vTable.getStmtID := @ITraceProcedureImpl_getStmtIDDispatcher;
  ITraceProcedureImpl_vTable.getPlan := @ITraceProcedureImpl_getPlanDispatcher;
  ITraceProcedureImpl_vTable.getExplainedPlan := @ITraceProcedureImpl_getExplainedPlanDispatcher;

  ITraceFunctionImpl_vTable := TTraceFunctionVTable.create;
  ITraceFunctionImpl_vTable.version := cITraceFunction_VERSION;
  ITraceFunctionImpl_vTable.getFuncName := @ITraceFunctionImpl_getFuncNameDispatcher;
  ITraceFunctionImpl_vTable.getInputs := @ITraceFunctionImpl_getInputsDispatcher;
  ITraceFunctionImpl_vTable.getResult := @ITraceFunctionImpl_getResultDispatcher;
  ITraceFunctionImpl_vTable.getPerf := @ITraceFunctionImpl_getPerfDispatcher;
  ITraceFunctionImpl_vTable.getStmtID := @ITraceFunctionImpl_getStmtIDDispatcher;
  ITraceFunctionImpl_vTable.getPlan := @ITraceFunctionImpl_getPlanDispatcher;
  ITraceFunctionImpl_vTable.getExplainedPlan := @ITraceFunctionImpl_getExplainedPlanDispatcher;

  ITraceTriggerImpl_vTable := TTraceTriggerVTable.create;
  ITraceTriggerImpl_vTable.version := cITraceTrigger_VERSION;
  ITraceTriggerImpl_vTable.getTriggerName := @ITraceTriggerImpl_getTriggerNameDispatcher;
  ITraceTriggerImpl_vTable.getRelationName := @ITraceTriggerImpl_getRelationNameDispatcher;
  ITraceTriggerImpl_vTable.getAction := @ITraceTriggerImpl_getActionDispatcher;
  ITraceTriggerImpl_vTable.getWhich := @ITraceTriggerImpl_getWhichDispatcher;
  ITraceTriggerImpl_vTable.getPerf := @ITraceTriggerImpl_getPerfDispatcher;
  ITraceTriggerImpl_vTable.getStmtID := @ITraceTriggerImpl_getStmtIDDispatcher;
  ITraceTriggerImpl_vTable.getPlan := @ITraceTriggerImpl_getPlanDispatcher;
  ITraceTriggerImpl_vTable.getExplainedPlan := @ITraceTriggerImpl_getExplainedPlanDispatcher;

  ITraceServiceConnectionImpl_vTable := TTraceServiceConnectionVTable.create;
  ITraceServiceConnectionImpl_vTable.version := cITraceServiceConnection_VERSION;
  ITraceServiceConnectionImpl_vTable.getKind := @ITraceServiceConnectionImpl_getKindDispatcher;
  ITraceServiceConnectionImpl_vTable.getProcessID := @ITraceServiceConnectionImpl_getProcessIDDispatcher;
  ITraceServiceConnectionImpl_vTable.getUserName := @ITraceServiceConnectionImpl_getUserNameDispatcher;
  ITraceServiceConnectionImpl_vTable.getRoleName := @ITraceServiceConnectionImpl_getRoleNameDispatcher;
  ITraceServiceConnectionImpl_vTable.getCharSet := @ITraceServiceConnectionImpl_getCharSetDispatcher;
  ITraceServiceConnectionImpl_vTable.getRemoteProtocol := @ITraceServiceConnectionImpl_getRemoteProtocolDispatcher;
  ITraceServiceConnectionImpl_vTable.getRemoteAddress := @ITraceServiceConnectionImpl_getRemoteAddressDispatcher;
  ITraceServiceConnectionImpl_vTable.getRemoteProcessID := @ITraceServiceConnectionImpl_getRemoteProcessIDDispatcher;
  ITraceServiceConnectionImpl_vTable.getRemoteProcessName := @ITraceServiceConnectionImpl_getRemoteProcessNameDispatcher;
  ITraceServiceConnectionImpl_vTable.getServiceID := @ITraceServiceConnectionImpl_getServiceIDDispatcher;
  ITraceServiceConnectionImpl_vTable.getServiceMgr := @ITraceServiceConnectionImpl_getServiceMgrDispatcher;
  ITraceServiceConnectionImpl_vTable.getServiceName := @ITraceServiceConnectionImpl_getServiceNameDispatcher;

  ITraceStatusVectorImpl_vTable := TTraceStatusVectorVTable.create;
  ITraceStatusVectorImpl_vTable.version := cITraceStatusVector_VERSION;
  ITraceStatusVectorImpl_vTable.hasError := @ITraceStatusVectorImpl_hasErrorDispatcher;
  ITraceStatusVectorImpl_vTable.hasWarning := @ITraceStatusVectorImpl_hasWarningDispatcher;
  ITraceStatusVectorImpl_vTable.getStatus := @ITraceStatusVectorImpl_getStatusDispatcher;
  ITraceStatusVectorImpl_vTable.getText := @ITraceStatusVectorImpl_getTextDispatcher;

  ITraceSweepInfoImpl_vTable := TTraceSweepInfoVTable.create;
  ITraceSweepInfoImpl_vTable.version := cITraceSweepInfo_VERSION;
  ITraceSweepInfoImpl_vTable.getOIT := @ITraceSweepInfoImpl_getOITDispatcher;
  ITraceSweepInfoImpl_vTable.getOST := @ITraceSweepInfoImpl_getOSTDispatcher;
  ITraceSweepInfoImpl_vTable.getOAT := @ITraceSweepInfoImpl_getOATDispatcher;
  ITraceSweepInfoImpl_vTable.getNext := @ITraceSweepInfoImpl_getNextDispatcher;
  ITraceSweepInfoImpl_vTable.getPerf := @ITraceSweepInfoImpl_getPerfDispatcher;

  ITraceLogWriterImpl_vTable := TTraceLogWriterVTable.create;
  ITraceLogWriterImpl_vTable.version := cITraceLogWriter_VERSION;
  ITraceLogWriterImpl_vTable.addRef := @ITraceLogWriterImpl_addRefDispatcher;
  ITraceLogWriterImpl_vTable.release := @ITraceLogWriterImpl_releaseDispatcher;
  ITraceLogWriterImpl_vTable.write := @ITraceLogWriterImpl_writeDispatcher;
  ITraceLogWriterImpl_vTable.write_s := @ITraceLogWriterImpl_write_sDispatcher;

  ITraceInitInfoImpl_vTable := TTraceInitInfoVTable.create;
  ITraceInitInfoImpl_vTable.version := cITraceInitInfo_VERSION;
  ITraceInitInfoImpl_vTable.getConfigText := @ITraceInitInfoImpl_getConfigTextDispatcher;
  ITraceInitInfoImpl_vTable.getTraceSessionID := @ITraceInitInfoImpl_getTraceSessionIDDispatcher;
  ITraceInitInfoImpl_vTable.getTraceSessionName := @ITraceInitInfoImpl_getTraceSessionNameDispatcher;
  ITraceInitInfoImpl_vTable.getFirebirdRootDirectory := @ITraceInitInfoImpl_getFirebirdRootDirectoryDispatcher;
  ITraceInitInfoImpl_vTable.getDatabaseName := @ITraceInitInfoImpl_getDatabaseNameDispatcher;
  ITraceInitInfoImpl_vTable.getConnection := @ITraceInitInfoImpl_getConnectionDispatcher;
  ITraceInitInfoImpl_vTable.getLogWriter := @ITraceInitInfoImpl_getLogWriterDispatcher;

  ITracePluginImpl_vTable := TTracePluginVTable.create;
  ITracePluginImpl_vTable.version := cITracePlugin_VERSION;
  ITracePluginImpl_vTable.addRef := @ITracePluginImpl_addRefDispatcher;
  ITracePluginImpl_vTable.release := @ITracePluginImpl_releaseDispatcher;
  ITracePluginImpl_vTable.trace_get_error := @ITracePluginImpl_trace_get_errorDispatcher;
  ITracePluginImpl_vTable.trace_attach := @ITracePluginImpl_trace_attachDispatcher;
  ITracePluginImpl_vTable.trace_detach := @ITracePluginImpl_trace_detachDispatcher;
  ITracePluginImpl_vTable.trace_transaction_start := @ITracePluginImpl_trace_transaction_startDispatcher;
  ITracePluginImpl_vTable.trace_transaction_end := @ITracePluginImpl_trace_transaction_endDispatcher;
  ITracePluginImpl_vTable.trace_proc_execute := @ITracePluginImpl_trace_proc_executeDispatcher;
  ITracePluginImpl_vTable.trace_trigger_execute := @ITracePluginImpl_trace_trigger_executeDispatcher;
  ITracePluginImpl_vTable.trace_set_context := @ITracePluginImpl_trace_set_contextDispatcher;
  ITracePluginImpl_vTable.trace_dsql_prepare := @ITracePluginImpl_trace_dsql_prepareDispatcher;
  ITracePluginImpl_vTable.trace_dsql_free := @ITracePluginImpl_trace_dsql_freeDispatcher;
  ITracePluginImpl_vTable.trace_dsql_execute := @ITracePluginImpl_trace_dsql_executeDispatcher;
  ITracePluginImpl_vTable.trace_blr_compile := @ITracePluginImpl_trace_blr_compileDispatcher;
  ITracePluginImpl_vTable.trace_blr_execute := @ITracePluginImpl_trace_blr_executeDispatcher;
  ITracePluginImpl_vTable.trace_dyn_execute := @ITracePluginImpl_trace_dyn_executeDispatcher;
  ITracePluginImpl_vTable.trace_service_attach := @ITracePluginImpl_trace_service_attachDispatcher;
  ITracePluginImpl_vTable.trace_service_start := @ITracePluginImpl_trace_service_startDispatcher;
  ITracePluginImpl_vTable.trace_service_query := @ITracePluginImpl_trace_service_queryDispatcher;
  ITracePluginImpl_vTable.trace_service_detach := @ITracePluginImpl_trace_service_detachDispatcher;
  ITracePluginImpl_vTable.trace_event_error := @ITracePluginImpl_trace_event_errorDispatcher;
  ITracePluginImpl_vTable.trace_event_sweep := @ITracePluginImpl_trace_event_sweepDispatcher;
  ITracePluginImpl_vTable.trace_func_execute := @ITracePluginImpl_trace_func_executeDispatcher;
  ITracePluginImpl_vTable.trace_dsql_restart := @ITracePluginImpl_trace_dsql_restartDispatcher;
  ITracePluginImpl_vTable.trace_proc_compile := @ITracePluginImpl_trace_proc_compileDispatcher;
  ITracePluginImpl_vTable.trace_func_compile := @ITracePluginImpl_trace_func_compileDispatcher;
  ITracePluginImpl_vTable.trace_trigger_compile := @ITracePluginImpl_trace_trigger_compileDispatcher;

  ITraceFactoryImpl_vTable := TTraceFactoryVTable.create;
  ITraceFactoryImpl_vTable.version := cITraceFactory_VERSION;
  ITraceFactoryImpl_vTable.addRef := @ITraceFactoryImpl_addRefDispatcher;
  ITraceFactoryImpl_vTable.release := @ITraceFactoryImpl_releaseDispatcher;
  ITraceFactoryImpl_vTable.setOwner := @ITraceFactoryImpl_setOwnerDispatcher;
  ITraceFactoryImpl_vTable.getOwner := @ITraceFactoryImpl_getOwnerDispatcher;
  ITraceFactoryImpl_vTable.trace_needs := @ITraceFactoryImpl_trace_needsDispatcher;
  ITraceFactoryImpl_vTable.trace_create := @ITraceFactoryImpl_trace_createDispatcher;

  IUdrFunctionFactoryImpl_vTable := TUdrFunctionFactoryVTable.create;
  IUdrFunctionFactoryImpl_vTable.version := cIUdrFunctionFactory_VERSION;
  IUdrFunctionFactoryImpl_vTable.dispose := @IUdrFunctionFactoryImpl_disposeDispatcher;
  IUdrFunctionFactoryImpl_vTable.setup := @IUdrFunctionFactoryImpl_setupDispatcher;
  IUdrFunctionFactoryImpl_vTable.newItem := @IUdrFunctionFactoryImpl_newItemDispatcher;

  IUdrProcedureFactoryImpl_vTable := TUdrProcedureFactoryVTable.create;
  IUdrProcedureFactoryImpl_vTable.version := cIUdrProcedureFactory_VERSION;
  IUdrProcedureFactoryImpl_vTable.dispose := @IUdrProcedureFactoryImpl_disposeDispatcher;
  IUdrProcedureFactoryImpl_vTable.setup := @IUdrProcedureFactoryImpl_setupDispatcher;
  IUdrProcedureFactoryImpl_vTable.newItem := @IUdrProcedureFactoryImpl_newItemDispatcher;

  IUdrTriggerFactoryImpl_vTable := TUdrTriggerFactoryVTable.create;
  IUdrTriggerFactoryImpl_vTable.version := cIUdrTriggerFactory_VERSION;
  IUdrTriggerFactoryImpl_vTable.dispose := @IUdrTriggerFactoryImpl_disposeDispatcher;
  IUdrTriggerFactoryImpl_vTable.setup := @IUdrTriggerFactoryImpl_setupDispatcher;
  IUdrTriggerFactoryImpl_vTable.newItem := @IUdrTriggerFactoryImpl_newItemDispatcher;

  IUdrPluginImpl_vTable := TUdrPluginVTable.create;
  IUdrPluginImpl_vTable.version := cIUdrPlugin_VERSION;
  IUdrPluginImpl_vTable.getMaster := @IUdrPluginImpl_getMasterDispatcher;
  IUdrPluginImpl_vTable.registerFunction := @IUdrPluginImpl_registerFunctionDispatcher;
  IUdrPluginImpl_vTable.registerProcedure := @IUdrPluginImpl_registerProcedureDispatcher;
  IUdrPluginImpl_vTable.registerTrigger := @IUdrPluginImpl_registerTriggerDispatcher;

  IDecFloat16Impl_vTable := TDecFloat16VTable.create;
  IDecFloat16Impl_vTable.version := cIDecFloat16_VERSION;
  IDecFloat16Impl_vTable.toBcd := @IDecFloat16Impl_toBcdDispatcher;
  IDecFloat16Impl_vTable.toString := @IDecFloat16Impl_toStringDispatcher;
  IDecFloat16Impl_vTable.fromBcd := @IDecFloat16Impl_fromBcdDispatcher;
  IDecFloat16Impl_vTable.fromString := @IDecFloat16Impl_fromStringDispatcher;

  IDecFloat34Impl_vTable := TDecFloat34VTable.create;
  IDecFloat34Impl_vTable.version := cIDecFloat34_VERSION;
  IDecFloat34Impl_vTable.toBcd := @IDecFloat34Impl_toBcdDispatcher;
  IDecFloat34Impl_vTable.toString := @IDecFloat34Impl_toStringDispatcher;
  IDecFloat34Impl_vTable.fromBcd := @IDecFloat34Impl_fromBcdDispatcher;
  IDecFloat34Impl_vTable.fromString := @IDecFloat34Impl_fromStringDispatcher;

  IInt128Impl_vTable := TInt128VTable.create;
  IInt128Impl_vTable.version := cIInt128_VERSION;
  IInt128Impl_vTable.toString := @IInt128Impl_toStringDispatcher;
  IInt128Impl_vTable.fromString := @IInt128Impl_fromStringDispatcher;

  IReplicatedFieldImpl_vTable := TReplicatedFieldVTable.create;
  IReplicatedFieldImpl_vTable.version := cIReplicatedField_VERSION;
  IReplicatedFieldImpl_vTable.getName := @IReplicatedFieldImpl_getNameDispatcher;
  IReplicatedFieldImpl_vTable.getType := @IReplicatedFieldImpl_getTypeDispatcher;
  IReplicatedFieldImpl_vTable.getSubType := @IReplicatedFieldImpl_getSubTypeDispatcher;
  IReplicatedFieldImpl_vTable.getScale := @IReplicatedFieldImpl_getScaleDispatcher;
  IReplicatedFieldImpl_vTable.getLength := @IReplicatedFieldImpl_getLengthDispatcher;
  IReplicatedFieldImpl_vTable.getCharSet := @IReplicatedFieldImpl_getCharSetDispatcher;
  IReplicatedFieldImpl_vTable.getData := @IReplicatedFieldImpl_getDataDispatcher;

  IReplicatedRecordImpl_vTable := TReplicatedRecordVTable.create;
  IReplicatedRecordImpl_vTable.version := cIReplicatedRecord_VERSION;
  IReplicatedRecordImpl_vTable.getCount := @IReplicatedRecordImpl_getCountDispatcher;
  IReplicatedRecordImpl_vTable.getField := @IReplicatedRecordImpl_getFieldDispatcher;
  IReplicatedRecordImpl_vTable.getRawLength := @IReplicatedRecordImpl_getRawLengthDispatcher;
  IReplicatedRecordImpl_vTable.getRawData := @IReplicatedRecordImpl_getRawDataDispatcher;

  IReplicatedTransactionImpl_vTable := TReplicatedTransactionVTable.create;
  IReplicatedTransactionImpl_vTable.version := cIReplicatedTransaction_VERSION;
  IReplicatedTransactionImpl_vTable.dispose := @IReplicatedTransactionImpl_disposeDispatcher;
  IReplicatedTransactionImpl_vTable.prepare := @IReplicatedTransactionImpl_prepareDispatcher;
  IReplicatedTransactionImpl_vTable.commit := @IReplicatedTransactionImpl_commitDispatcher;
  IReplicatedTransactionImpl_vTable.rollback := @IReplicatedTransactionImpl_rollbackDispatcher;
  IReplicatedTransactionImpl_vTable.startSavepoint := @IReplicatedTransactionImpl_startSavepointDispatcher;
  IReplicatedTransactionImpl_vTable.releaseSavepoint := @IReplicatedTransactionImpl_releaseSavepointDispatcher;
  IReplicatedTransactionImpl_vTable.rollbackSavepoint := @IReplicatedTransactionImpl_rollbackSavepointDispatcher;
  IReplicatedTransactionImpl_vTable.insertRecord := @IReplicatedTransactionImpl_insertRecordDispatcher;
  IReplicatedTransactionImpl_vTable.updateRecord := @IReplicatedTransactionImpl_updateRecordDispatcher;
  IReplicatedTransactionImpl_vTable.deleteRecord := @IReplicatedTransactionImpl_deleteRecordDispatcher;
  IReplicatedTransactionImpl_vTable.executeSql := @IReplicatedTransactionImpl_executeSqlDispatcher;
  IReplicatedTransactionImpl_vTable.executeSqlIntl := @IReplicatedTransactionImpl_executeSqlIntlDispatcher;

  IReplicatedSessionImpl_vTable := TReplicatedSessionVTable.create;
  IReplicatedSessionImpl_vTable.version := cIReplicatedSession_VERSION;
  IReplicatedSessionImpl_vTable.addRef := @IReplicatedSessionImpl_addRefDispatcher;
  IReplicatedSessionImpl_vTable.release := @IReplicatedSessionImpl_releaseDispatcher;
  IReplicatedSessionImpl_vTable.setOwner := @IReplicatedSessionImpl_setOwnerDispatcher;
  IReplicatedSessionImpl_vTable.getOwner := @IReplicatedSessionImpl_getOwnerDispatcher;
  IReplicatedSessionImpl_vTable.init := @IReplicatedSessionImpl_initDispatcher;
  IReplicatedSessionImpl_vTable.startTransaction := @IReplicatedSessionImpl_startTransactionDispatcher;
  IReplicatedSessionImpl_vTable.cleanupTransaction := @IReplicatedSessionImpl_cleanupTransactionDispatcher;
  IReplicatedSessionImpl_vTable.setSequence := @IReplicatedSessionImpl_setSequenceDispatcher;

  IProfilerPluginImpl_vTable := TProfilerPluginVTable.create;
  IProfilerPluginImpl_vTable.version := cIProfilerPlugin_VERSION;
  IProfilerPluginImpl_vTable.addRef := @IProfilerPluginImpl_addRefDispatcher;
  IProfilerPluginImpl_vTable.release := @IProfilerPluginImpl_releaseDispatcher;
  IProfilerPluginImpl_vTable.setOwner := @IProfilerPluginImpl_setOwnerDispatcher;
  IProfilerPluginImpl_vTable.getOwner := @IProfilerPluginImpl_getOwnerDispatcher;
  IProfilerPluginImpl_vTable.init := @IProfilerPluginImpl_initDispatcher;
  IProfilerPluginImpl_vTable.startSession := @IProfilerPluginImpl_startSessionDispatcher;
  IProfilerPluginImpl_vTable.flush := @IProfilerPluginImpl_flushDispatcher;

  IProfilerSessionImpl_vTable := TProfilerSessionVTable.create;
  IProfilerSessionImpl_vTable.version := cIProfilerSession_VERSION;
  IProfilerSessionImpl_vTable.dispose := @IProfilerSessionImpl_disposeDispatcher;
  IProfilerSessionImpl_vTable.getId := @IProfilerSessionImpl_getIdDispatcher;
  IProfilerSessionImpl_vTable.getFlags := @IProfilerSessionImpl_getFlagsDispatcher;
  IProfilerSessionImpl_vTable.cancel := @IProfilerSessionImpl_cancelDispatcher;
  IProfilerSessionImpl_vTable.finish := @IProfilerSessionImpl_finishDispatcher;
  IProfilerSessionImpl_vTable.defineStatement := @IProfilerSessionImpl_defineStatementDispatcher;
  IProfilerSessionImpl_vTable.defineCursor := @IProfilerSessionImpl_defineCursorDispatcher;
  IProfilerSessionImpl_vTable.defineRecordSource := @IProfilerSessionImpl_defineRecordSourceDispatcher;
  IProfilerSessionImpl_vTable.onRequestStart := @IProfilerSessionImpl_onRequestStartDispatcher;
  IProfilerSessionImpl_vTable.onRequestFinish := @IProfilerSessionImpl_onRequestFinishDispatcher;
  IProfilerSessionImpl_vTable.beforePsqlLineColumn := @IProfilerSessionImpl_beforePsqlLineColumnDispatcher;
  IProfilerSessionImpl_vTable.afterPsqlLineColumn := @IProfilerSessionImpl_afterPsqlLineColumnDispatcher;
  IProfilerSessionImpl_vTable.beforeRecordSourceOpen := @IProfilerSessionImpl_beforeRecordSourceOpenDispatcher;
  IProfilerSessionImpl_vTable.afterRecordSourceOpen := @IProfilerSessionImpl_afterRecordSourceOpenDispatcher;
  IProfilerSessionImpl_vTable.beforeRecordSourceGetRecord := @IProfilerSessionImpl_beforeRecordSourceGetRecordDispatcher;
  IProfilerSessionImpl_vTable.afterRecordSourceGetRecord := @IProfilerSessionImpl_afterRecordSourceGetRecordDispatcher;

  IProfilerStatsImpl_vTable := TProfilerStatsVTable.create;
  IProfilerStatsImpl_vTable.version := cIProfilerStats_VERSION;
  IProfilerStatsImpl_vTable.getElapsedTicks := @IProfilerStatsImpl_getElapsedTicksDispatcher;

finalization
  IVersionedImpl_vTable.destroy;
  IReferenceCountedImpl_vTable.destroy;
  IDisposableImpl_vTable.destroy;
  IStatusImpl_vTable.destroy;
  IMasterImpl_vTable.destroy;
  IPluginBaseImpl_vTable.destroy;
  IPluginSetImpl_vTable.destroy;
  IConfigEntryImpl_vTable.destroy;
  IConfigImpl_vTable.destroy;
  IFirebirdConfImpl_vTable.destroy;
  IPluginConfigImpl_vTable.destroy;
  IPluginFactoryImpl_vTable.destroy;
  IPluginModuleImpl_vTable.destroy;
  IPluginManagerImpl_vTable.destroy;
  ICryptKeyImpl_vTable.destroy;
  IConfigManagerImpl_vTable.destroy;
  IEventCallbackImpl_vTable.destroy;
  IBlobImpl_vTable.destroy;
  ITransactionImpl_vTable.destroy;
  IMessageMetadataImpl_vTable.destroy;
  IMetadataBuilderImpl_vTable.destroy;
  IResultSetImpl_vTable.destroy;
  IStatementImpl_vTable.destroy;
  IBatchImpl_vTable.destroy;
  IBatchCompletionStateImpl_vTable.destroy;
  IReplicatorImpl_vTable.destroy;
  IRequestImpl_vTable.destroy;
  IEventsImpl_vTable.destroy;
  IAttachmentImpl_vTable.destroy;
  IServiceImpl_vTable.destroy;
  IProviderImpl_vTable.destroy;
  IDtcStartImpl_vTable.destroy;
  IDtcImpl_vTable.destroy;
  IAuthImpl_vTable.destroy;
  IWriterImpl_vTable.destroy;
  IServerBlockImpl_vTable.destroy;
  IClientBlockImpl_vTable.destroy;
  IServerImpl_vTable.destroy;
  IClientImpl_vTable.destroy;
  IUserFieldImpl_vTable.destroy;
  ICharUserFieldImpl_vTable.destroy;
  IIntUserFieldImpl_vTable.destroy;
  IUserImpl_vTable.destroy;
  IListUsersImpl_vTable.destroy;
  ILogonInfoImpl_vTable.destroy;
  IManagementImpl_vTable.destroy;
  IAuthBlockImpl_vTable.destroy;
  IWireCryptPluginImpl_vTable.destroy;
  ICryptKeyCallbackImpl_vTable.destroy;
  IKeyHolderPluginImpl_vTable.destroy;
  IDbCryptInfoImpl_vTable.destroy;
  IDbCryptPluginImpl_vTable.destroy;
  IExternalContextImpl_vTable.destroy;
  IExternalResultSetImpl_vTable.destroy;
  IExternalFunctionImpl_vTable.destroy;
  IExternalProcedureImpl_vTable.destroy;
  IExternalTriggerImpl_vTable.destroy;
  IRoutineMetadataImpl_vTable.destroy;
  IExternalEngineImpl_vTable.destroy;
  ITimerImpl_vTable.destroy;
  ITimerControlImpl_vTable.destroy;
  IVersionCallbackImpl_vTable.destroy;
  IUtilImpl_vTable.destroy;
  IOffsetsCallbackImpl_vTable.destroy;
  IXpbBuilderImpl_vTable.destroy;
  ITraceConnectionImpl_vTable.destroy;
  ITraceDatabaseConnectionImpl_vTable.destroy;
  ITraceTransactionImpl_vTable.destroy;
  ITraceParamsImpl_vTable.destroy;
  ITraceStatementImpl_vTable.destroy;
  ITraceSQLStatementImpl_vTable.destroy;
  ITraceBLRStatementImpl_vTable.destroy;
  ITraceDYNRequestImpl_vTable.destroy;
  ITraceContextVariableImpl_vTable.destroy;
  ITraceProcedureImpl_vTable.destroy;
  ITraceFunctionImpl_vTable.destroy;
  ITraceTriggerImpl_vTable.destroy;
  ITraceServiceConnectionImpl_vTable.destroy;
  ITraceStatusVectorImpl_vTable.destroy;
  ITraceSweepInfoImpl_vTable.destroy;
  ITraceLogWriterImpl_vTable.destroy;
  ITraceInitInfoImpl_vTable.destroy;
  ITracePluginImpl_vTable.destroy;
  ITraceFactoryImpl_vTable.destroy;
  IUdrFunctionFactoryImpl_vTable.destroy;
  IUdrProcedureFactoryImpl_vTable.destroy;
  IUdrTriggerFactoryImpl_vTable.destroy;
  IUdrPluginImpl_vTable.destroy;
  IDecFloat16Impl_vTable.destroy;
  IDecFloat34Impl_vTable.destroy;
  IInt128Impl_vTable.destroy;
  IReplicatedFieldImpl_vTable.destroy;
  IReplicatedRecordImpl_vTable.destroy;
  IReplicatedTransactionImpl_vTable.destroy;
  IReplicatedSessionImpl_vTable.destroy;
  IProfilerPluginImpl_vTable.destroy;
  IProfilerSessionImpl_vTable.destroy;
  IProfilerStatsImpl_vTable.destroy;

{$ENDIF !WITH_RECORD_METHODS}
{$ENDIF ZEOS_DISABLE_FIREBIRD}
end.
